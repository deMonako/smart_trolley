
smart_trolley.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007444  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007614  08007614  00017614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076cc  080076cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080076cc  080076cc  000176cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076d4  080076d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076d8  080076d8  000176d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080076dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004190  2000000c  080076e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000419c  080076e8  0002419c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b79  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003308  00000000  00000000  00036bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  00039ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001180  00000000  00000000  0003b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026b32  00000000  00000000  0003c358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000102d2  00000000  00000000  00062e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1aeb  00000000  00000000  0007315c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00164c47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e10  00000000  00000000  00164cc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075fc 	.word	0x080075fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	080075fc 	.word	0x080075fc

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b972 	b.w	800050c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	4688      	mov	r8, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14b      	bne.n	80002e6 <__udivmoddi4+0xa6>
 800024e:	428a      	cmp	r2, r1
 8000250:	4615      	mov	r5, r2
 8000252:	d967      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0720 	rsb	r7, r2, #32
 800025e:	fa01 f302 	lsl.w	r3, r1, r2
 8000262:	fa20 f707 	lsr.w	r7, r0, r7
 8000266:	4095      	lsls	r5, r2
 8000268:	ea47 0803 	orr.w	r8, r7, r3
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbb8 f7fe 	udiv	r7, r8, lr
 8000278:	fa1f fc85 	uxth.w	ip, r5
 800027c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000280:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000284:	fb07 f10c 	mul.w	r1, r7, ip
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18eb      	adds	r3, r5, r3
 800028e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000292:	f080 811b 	bcs.w	80004cc <__udivmoddi4+0x28c>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8118 	bls.w	80004cc <__udivmoddi4+0x28c>
 800029c:	3f02      	subs	r7, #2
 800029e:	442b      	add	r3, r5
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b4:	45a4      	cmp	ip, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	192c      	adds	r4, r5, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8107 	bcs.w	80004d0 <__udivmoddi4+0x290>
 80002c2:	45a4      	cmp	ip, r4
 80002c4:	f240 8104 	bls.w	80004d0 <__udivmoddi4+0x290>
 80002c8:	3802      	subs	r0, #2
 80002ca:	442c      	add	r4, r5
 80002cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d0:	eba4 040c 	sub.w	r4, r4, ip
 80002d4:	2700      	movs	r7, #0
 80002d6:	b11e      	cbz	r6, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c6 4300 	strd	r4, r3, [r6]
 80002e0:	4639      	mov	r1, r7
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d909      	bls.n	80002fe <__udivmoddi4+0xbe>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80eb 	beq.w	80004c6 <__udivmoddi4+0x286>
 80002f0:	2700      	movs	r7, #0
 80002f2:	e9c6 0100 	strd	r0, r1, [r6]
 80002f6:	4638      	mov	r0, r7
 80002f8:	4639      	mov	r1, r7
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	fab3 f783 	clz	r7, r3
 8000302:	2f00      	cmp	r7, #0
 8000304:	d147      	bne.n	8000396 <__udivmoddi4+0x156>
 8000306:	428b      	cmp	r3, r1
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xd0>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2c4>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb61 0303 	sbc.w	r3, r1, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4698      	mov	r8, r3
 800031a:	2e00      	cmp	r6, #0
 800031c:	d0e0      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800031e:	e9c6 4800 	strd	r4, r8, [r6]
 8000322:	e7dd      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000324:	b902      	cbnz	r2, 8000328 <__udivmoddi4+0xe8>
 8000326:	deff      	udf	#255	; 0xff
 8000328:	fab2 f282 	clz	r2, r2
 800032c:	2a00      	cmp	r2, #0
 800032e:	f040 808f 	bne.w	8000450 <__udivmoddi4+0x210>
 8000332:	1b49      	subs	r1, r1, r5
 8000334:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000338:	fa1f f885 	uxth.w	r8, r5
 800033c:	2701      	movs	r7, #1
 800033e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fb0e 111c 	mls	r1, lr, ip, r1
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb08 f10c 	mul.w	r1, r8, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x124>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f10c 30ff 	add.w	r0, ip, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4299      	cmp	r1, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 8000362:	4684      	mov	ip, r0
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	b2a3      	uxth	r3, r4
 8000368:	fbb1 f0fe 	udiv	r0, r1, lr
 800036c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000370:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000374:	fb08 f800 	mul.w	r8, r8, r0
 8000378:	45a0      	cmp	r8, r4
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x14c>
 800037c:	192c      	adds	r4, r5, r4
 800037e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x14a>
 8000384:	45a0      	cmp	r8, r4
 8000386:	f200 80b6 	bhi.w	80004f6 <__udivmoddi4+0x2b6>
 800038a:	4618      	mov	r0, r3
 800038c:	eba4 0408 	sub.w	r4, r4, r8
 8000390:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000394:	e79f      	b.n	80002d6 <__udivmoddi4+0x96>
 8000396:	f1c7 0c20 	rsb	ip, r7, #32
 800039a:	40bb      	lsls	r3, r7
 800039c:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003a4:	fa01 f407 	lsl.w	r4, r1, r7
 80003a8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003ac:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003b4:	4325      	orrs	r5, r4
 80003b6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ba:	0c2c      	lsrs	r4, r5, #16
 80003bc:	fb08 3319 	mls	r3, r8, r9, r3
 80003c0:	fa1f fa8e 	uxth.w	sl, lr
 80003c4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003c8:	fb09 f40a 	mul.w	r4, r9, sl
 80003cc:	429c      	cmp	r4, r3
 80003ce:	fa02 f207 	lsl.w	r2, r2, r7
 80003d2:	fa00 f107 	lsl.w	r1, r0, r7
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1e 0303 	adds.w	r3, lr, r3
 80003dc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e0:	f080 8087 	bcs.w	80004f2 <__udivmoddi4+0x2b2>
 80003e4:	429c      	cmp	r4, r3
 80003e6:	f240 8084 	bls.w	80004f2 <__udivmoddi4+0x2b2>
 80003ea:	f1a9 0902 	sub.w	r9, r9, #2
 80003ee:	4473      	add	r3, lr
 80003f0:	1b1b      	subs	r3, r3, r4
 80003f2:	b2ad      	uxth	r5, r5
 80003f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003f8:	fb08 3310 	mls	r3, r8, r0, r3
 80003fc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000400:	fb00 fa0a 	mul.w	sl, r0, sl
 8000404:	45a2      	cmp	sl, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1e 0404 	adds.w	r4, lr, r4
 800040c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000410:	d26b      	bcs.n	80004ea <__udivmoddi4+0x2aa>
 8000412:	45a2      	cmp	sl, r4
 8000414:	d969      	bls.n	80004ea <__udivmoddi4+0x2aa>
 8000416:	3802      	subs	r0, #2
 8000418:	4474      	add	r4, lr
 800041a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800041e:	fba0 8902 	umull	r8, r9, r0, r2
 8000422:	eba4 040a 	sub.w	r4, r4, sl
 8000426:	454c      	cmp	r4, r9
 8000428:	46c2      	mov	sl, r8
 800042a:	464b      	mov	r3, r9
 800042c:	d354      	bcc.n	80004d8 <__udivmoddi4+0x298>
 800042e:	d051      	beq.n	80004d4 <__udivmoddi4+0x294>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d069      	beq.n	8000508 <__udivmoddi4+0x2c8>
 8000434:	ebb1 050a 	subs.w	r5, r1, sl
 8000438:	eb64 0403 	sbc.w	r4, r4, r3
 800043c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000440:	40fd      	lsrs	r5, r7
 8000442:	40fc      	lsrs	r4, r7
 8000444:	ea4c 0505 	orr.w	r5, ip, r5
 8000448:	e9c6 5400 	strd	r5, r4, [r6]
 800044c:	2700      	movs	r7, #0
 800044e:	e747      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000450:	f1c2 0320 	rsb	r3, r2, #32
 8000454:	fa20 f703 	lsr.w	r7, r0, r3
 8000458:	4095      	lsls	r5, r2
 800045a:	fa01 f002 	lsl.w	r0, r1, r2
 800045e:	fa21 f303 	lsr.w	r3, r1, r3
 8000462:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000466:	4338      	orrs	r0, r7
 8000468:	0c01      	lsrs	r1, r0, #16
 800046a:	fbb3 f7fe 	udiv	r7, r3, lr
 800046e:	fa1f f885 	uxth.w	r8, r5
 8000472:	fb0e 3317 	mls	r3, lr, r7, r3
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb07 f308 	mul.w	r3, r7, r8
 800047e:	428b      	cmp	r3, r1
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x256>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f107 3cff 	add.w	ip, r7, #4294967295
 800048c:	d22f      	bcs.n	80004ee <__udivmoddi4+0x2ae>
 800048e:	428b      	cmp	r3, r1
 8000490:	d92d      	bls.n	80004ee <__udivmoddi4+0x2ae>
 8000492:	3f02      	subs	r7, #2
 8000494:	4429      	add	r1, r5
 8000496:	1acb      	subs	r3, r1, r3
 8000498:	b281      	uxth	r1, r0
 800049a:	fbb3 f0fe 	udiv	r0, r3, lr
 800049e:	fb0e 3310 	mls	r3, lr, r0, r3
 80004a2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a6:	fb00 f308 	mul.w	r3, r0, r8
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x27e>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004b4:	d217      	bcs.n	80004e6 <__udivmoddi4+0x2a6>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d915      	bls.n	80004e6 <__udivmoddi4+0x2a6>
 80004ba:	3802      	subs	r0, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1ac9      	subs	r1, r1, r3
 80004c0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004c4:	e73b      	b.n	800033e <__udivmoddi4+0xfe>
 80004c6:	4637      	mov	r7, r6
 80004c8:	4630      	mov	r0, r6
 80004ca:	e709      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004cc:	4607      	mov	r7, r0
 80004ce:	e6e7      	b.n	80002a0 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fb      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d4:	4541      	cmp	r1, r8
 80004d6:	d2ab      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004d8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004dc:	eb69 020e 	sbc.w	r2, r9, lr
 80004e0:	3801      	subs	r0, #1
 80004e2:	4613      	mov	r3, r2
 80004e4:	e7a4      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e6:	4660      	mov	r0, ip
 80004e8:	e7e9      	b.n	80004be <__udivmoddi4+0x27e>
 80004ea:	4618      	mov	r0, r3
 80004ec:	e795      	b.n	800041a <__udivmoddi4+0x1da>
 80004ee:	4667      	mov	r7, ip
 80004f0:	e7d1      	b.n	8000496 <__udivmoddi4+0x256>
 80004f2:	4681      	mov	r9, r0
 80004f4:	e77c      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	442c      	add	r4, r5
 80004fa:	e747      	b.n	800038c <__udivmoddi4+0x14c>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	442b      	add	r3, r5
 8000502:	e72f      	b.n	8000364 <__udivmoddi4+0x124>
 8000504:	4638      	mov	r0, r7
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xda>
 8000508:	4637      	mov	r7, r6
 800050a:	e6e9      	b.n	80002e0 <__udivmoddi4+0xa0>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4a07      	ldr	r2, [pc, #28]	; (800053c <vApplicationGetIdleTaskMemory+0x2c>)
 8000520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	4a06      	ldr	r2, [pc, #24]	; (8000540 <vApplicationGetIdleTaskMemory+0x30>)
 8000526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000050 	.word	0x20000050
 8000540:	200000a4 	.word	0x200000a4

08000544 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000544:	b5b0      	push	{r4, r5, r7, lr}
 8000546:	b09e      	sub	sp, #120	; 0x78
 8000548:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of Perm */
  osSemaphoreDef(Perm);
 800054a:	2300      	movs	r3, #0
 800054c:	673b      	str	r3, [r7, #112]	; 0x70
 800054e:	2300      	movs	r3, #0
 8000550:	677b      	str	r3, [r7, #116]	; 0x74
  PermHandle = osSemaphoreCreate(osSemaphore(Perm), 1);
 8000552:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000556:	2101      	movs	r1, #1
 8000558:	4618      	mov	r0, r3
 800055a:	f004 fcef 	bl	8004f3c <osSemaphoreCreate>
 800055e:	4602      	mov	r2, r0
 8000560:	4b27      	ldr	r3, [pc, #156]	; (8000600 <MX_FREERTOS_Init+0xbc>)
 8000562:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityBelowNormal, 0, 128);
 8000564:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MX_FREERTOS_Init+0xc0>)
 8000566:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800056a:	461d      	mov	r5, r3
 800056c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000570:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000574:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000578:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fc7c 	bl	8004e7c <osThreadCreate>
 8000584:	4602      	mov	r2, r0
 8000586:	4b20      	ldr	r3, [pc, #128]	; (8000608 <MX_FREERTOS_Init+0xc4>)
 8000588:	601a      	str	r2, [r3, #0]

  /* definition and creation of czujnik */
  osThreadDef(czujnik, czujnik_init, osPriorityNormal, 0, 128);
 800058a:	4b20      	ldr	r3, [pc, #128]	; (800060c <MX_FREERTOS_Init+0xc8>)
 800058c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000590:	461d      	mov	r5, r3
 8000592:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000594:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000596:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  czujnikHandle = osThreadCreate(osThread(czujnik), NULL);
 800059e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f004 fc69 	bl	8004e7c <osThreadCreate>
 80005aa:	4602      	mov	r2, r0
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_FREERTOS_Init+0xcc>)
 80005ae:	601a      	str	r2, [r3, #0]

  /* definition and creation of wyswietlacz */
  osThreadDef(wyswietlacz, wyswietlacz_init, osPriorityAboveNormal, 0, 128);
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_FREERTOS_Init+0xd0>)
 80005b2:	f107 041c 	add.w	r4, r7, #28
 80005b6:	461d      	mov	r5, r3
 80005b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  wyswietlaczHandle = osThreadCreate(osThread(wyswietlacz), NULL);
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f004 fc56 	bl	8004e7c <osThreadCreate>
 80005d0:	4602      	mov	r2, r0
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_FREERTOS_Init+0xd4>)
 80005d4:	601a      	str	r2, [r3, #0]

  /* definition and creation of pilot */
  osThreadDef(pilot, pilot_init, osPriorityHigh, 0, 128);
 80005d6:	4b11      	ldr	r3, [pc, #68]	; (800061c <MX_FREERTOS_Init+0xd8>)
 80005d8:	463c      	mov	r4, r7
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pilotHandle = osThreadCreate(osThread(pilot), NULL);
 80005e8:	463b      	mov	r3, r7
 80005ea:	2100      	movs	r1, #0
 80005ec:	4618      	mov	r0, r3
 80005ee:	f004 fc45 	bl	8004e7c <osThreadCreate>
 80005f2:	4602      	mov	r2, r0
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_FREERTOS_Init+0xdc>)
 80005f6:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005f8:	bf00      	nop
 80005fa:	3778      	adds	r7, #120	; 0x78
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000600:	200040cc 	.word	0x200040cc
 8000604:	08007620 	.word	0x08007620
 8000608:	20003ff0 	.word	0x20003ff0
 800060c:	08007644 	.word	0x08007644
 8000610:	200040d4 	.word	0x200040d4
 8000614:	0800766c 	.word	0x0800766c
 8000618:	20004080 	.word	0x20004080
 800061c:	08007690 	.word	0x08007690
 8000620:	200040d0 	.word	0x200040d0

08000624 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	servo_stop();
 800062c:	f000 fe82 	bl	8001334 <servo_stop>
	//servo_forward();
  /* Infinite loop */
  for(;;)
  {
	  //powrót do wyświetlania rzeczywistej odległości (po wpisaniu wartości zadanej)
	  if(what_to_display == 2)
 8000630:	4b4e      	ldr	r3, [pc, #312]	; (800076c <StartDefaultTask+0x148>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d109      	bne.n	800064c <StartDefaultTask+0x28>
	  {
		  HAL_Delay(2000);
 8000638:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800063c:	f001 fc12 	bl	8001e64 <HAL_Delay>
		  what_to_display = 0;
 8000640:	4b4a      	ldr	r3, [pc, #296]	; (800076c <StartDefaultTask+0x148>)
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
		  ostateczna = 1;
 8000646:	4b4a      	ldr	r3, [pc, #296]	; (8000770 <StartDefaultTask+0x14c>)
 8000648:	2201      	movs	r2, #1
 800064a:	601a      	str	r2, [r3, #0]
	  }

	  if(ostateczna == 1)
 800064c:	4b48      	ldr	r3, [pc, #288]	; (8000770 <StartDefaultTask+0x14c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d179      	bne.n	8000748 <StartDefaultTask+0x124>
	  {
		HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000654:	2101      	movs	r1, #1
 8000656:	4847      	ldr	r0, [pc, #284]	; (8000774 <StartDefaultTask+0x150>)
 8000658:	f001 fee3 	bl	8002422 <HAL_GPIO_TogglePin>
		 osSemaphoreWait(PermHandle, osWaitForever);
 800065c:	4b46      	ldr	r3, [pc, #280]	; (8000778 <StartDefaultTask+0x154>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f04f 31ff 	mov.w	r1, #4294967295
 8000664:	4618      	mov	r0, r3
 8000666:	f004 fc9d 	bl	8004fa4 <osSemaphoreWait>
		 	do{
			 sensor_time = hcsr04_read();
 800066a:	f000 fae9 	bl	8000c40 <hcsr04_read>
 800066e:	4602      	mov	r2, r0
 8000670:	4b42      	ldr	r3, [pc, #264]	; (800077c <StartDefaultTask+0x158>)
 8000672:	601a      	str	r2, [r3, #0]
			 distance = sensor_time/23;
 8000674:	4b41      	ldr	r3, [pc, #260]	; (800077c <StartDefaultTask+0x158>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a41      	ldr	r2, [pc, #260]	; (8000780 <StartDefaultTask+0x15c>)
 800067a:	fba2 2303 	umull	r2, r3, r2, r3
 800067e:	091b      	lsrs	r3, r3, #4
 8000680:	4a40      	ldr	r2, [pc, #256]	; (8000784 <StartDefaultTask+0x160>)
 8000682:	6013      	str	r3, [r2, #0]

				 if(distance > sum)
 8000684:	4b3f      	ldr	r3, [pc, #252]	; (8000784 <StartDefaultTask+0x160>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a3f      	ldr	r2, [pc, #252]	; (8000788 <StartDefaultTask+0x164>)
 800068a:	6812      	ldr	r2, [r2, #0]
 800068c:	4293      	cmp	r3, r2
 800068e:	d902      	bls.n	8000696 <StartDefaultTask+0x72>
				 {
					 servo_forward();
 8000690:	f000 fe34 	bl	80012fc <servo_forward>
 8000694:	e011      	b.n	80006ba <StartDefaultTask+0x96>
				 }
				 else if(distance < sum)
 8000696:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <StartDefaultTask+0x160>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a3b      	ldr	r2, [pc, #236]	; (8000788 <StartDefaultTask+0x164>)
 800069c:	6812      	ldr	r2, [r2, #0]
 800069e:	4293      	cmp	r3, r2
 80006a0:	d202      	bcs.n	80006a8 <StartDefaultTask+0x84>
				 {
					 servo_backward();
 80006a2:	f000 fe39 	bl	8001318 <servo_backward>
 80006a6:	e008      	b.n	80006ba <StartDefaultTask+0x96>
				 }
				 else if(distance < 2)
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <StartDefaultTask+0x160>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d904      	bls.n	80006ba <StartDefaultTask+0x96>
				 {
					 	//do_nothing
				 }
				 else
				 {
					 servo_stop();
 80006b0:	f000 fe40 	bl	8001334 <servo_stop>
					 HAL_Delay(20);
 80006b4:	2014      	movs	r0, #20
 80006b6:	f001 fbd5 	bl	8001e64 <HAL_Delay>
				 }

			// HAL_Delay(10);

			 display(wartosc,10);
 80006ba:	4b34      	ldr	r3, [pc, #208]	; (800078c <StartDefaultTask+0x168>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	210a      	movs	r1, #10
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fc89 	bl	8000fd8 <display>

			 if(ikk == 0)
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <StartDefaultTask+0x16c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d104      	bne.n	80006d8 <StartDefaultTask+0xb4>
			 {
				 wartosc = distance;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <StartDefaultTask+0x160>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	4b2d      	ldr	r3, [pc, #180]	; (800078c <StartDefaultTask+0x168>)
 80006d6:	601a      	str	r2, [r3, #0]
			 }

			 ikk++;
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <StartDefaultTask+0x16c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	3301      	adds	r3, #1
 80006de:	4a2c      	ldr	r2, [pc, #176]	; (8000790 <StartDefaultTask+0x16c>)
 80006e0:	6013      	str	r3, [r2, #0]

			 if(ikk == 30)
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <StartDefaultTask+0x16c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b1e      	cmp	r3, #30
 80006e8:	d102      	bne.n	80006f0 <StartDefaultTask+0xcc>
			 {
				 ikk = 0;
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <StartDefaultTask+0x16c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
			 }

			  if(HAL_GPIO_ReadPin (IR_DATA_GPIO_Port, IR_DATA_Pin) == GPIO_PIN_RESET)
 80006f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f4:	4827      	ldr	r0, [pc, #156]	; (8000794 <StartDefaultTask+0x170>)
 80006f6:	f001 fe63 	bl	80023c0 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d11f      	bne.n	8000740 <StartDefaultTask+0x11c>
			  {
				  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8000700:	2201      	movs	r2, #1
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	481b      	ldr	r0, [pc, #108]	; (8000774 <StartDefaultTask+0x150>)
 8000706:	f001 fe73 	bl	80023f0 <HAL_GPIO_WritePin>

				  what_to_display = 0;
 800070a:	4b18      	ldr	r3, [pc, #96]	; (800076c <StartDefaultTask+0x148>)
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
				  button = 0;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <StartDefaultTask+0x174>)
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
				  zezwolenie = 0;
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <StartDefaultTask+0x178>)
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
				  cyfra_1 = 0;
 800071c:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <StartDefaultTask+0x17c>)
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
				  cyfra_2 = 0;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <StartDefaultTask+0x180>)
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
				  sum = 0;
 8000728:	4b17      	ldr	r3, [pc, #92]	; (8000788 <StartDefaultTask+0x164>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
				  ostateczna = 0;
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <StartDefaultTask+0x14c>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]

				 HAL_Delay(100);
 8000734:	2064      	movs	r0, #100	; 0x64
 8000736:	f001 fb95 	bl	8001e64 <HAL_Delay>
				 a=0;
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <StartDefaultTask+0x184>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
			  }
			 }while(ostateczna != 0);
 8000740:	4b0b      	ldr	r3, [pc, #44]	; (8000770 <StartDefaultTask+0x14c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d190      	bne.n	800066a <StartDefaultTask+0x46>
		 }
	  	  HAL_Delay(1000);
 8000748:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800074c:	f001 fb8a 	bl	8001e64 <HAL_Delay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	4807      	ldr	r0, [pc, #28]	; (8000774 <StartDefaultTask+0x150>)
 8000756:	f001 fe4b 	bl	80023f0 <HAL_GPIO_WritePin>
		 osSemaphoreRelease(PermHandle);
 800075a:	4b07      	ldr	r3, [pc, #28]	; (8000778 <StartDefaultTask+0x154>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f004 fc6e 	bl	8005040 <osSemaphoreRelease>

    osDelay(1);
 8000764:	2001      	movs	r0, #1
 8000766:	f004 fbd5 	bl	8004f14 <osDelay>
	  if(what_to_display == 2)
 800076a:	e761      	b.n	8000630 <StartDefaultTask+0xc>
 800076c:	20000028 	.word	0x20000028
 8000770:	20000040 	.word	0x20000040
 8000774:	40020400 	.word	0x40020400
 8000778:	200040cc 	.word	0x200040cc
 800077c:	20003ff4 	.word	0x20003ff4
 8000780:	b21642c9 	.word	0xb21642c9
 8000784:	2000403c 	.word	0x2000403c
 8000788:	2000003c 	.word	0x2000003c
 800078c:	2000004c 	.word	0x2000004c
 8000790:	20000048 	.word	0x20000048
 8000794:	40021800 	.word	0x40021800
 8000798:	2000002c 	.word	0x2000002c
 800079c:	20000030 	.word	0x20000030
 80007a0:	20000034 	.word	0x20000034
 80007a4:	20000038 	.word	0x20000038
 80007a8:	20000044 	.word	0x20000044

080007ac <czujnik_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_czujnik_init */
void czujnik_init(void const * argument)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN czujnik_init */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(PermHandle, osWaitForever);
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <czujnik_init+0x80>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	4618      	mov	r0, r3
 80007be:	f004 fbf1 	bl	8004fa4 <osSemaphoreWait>

	  //cykliczny odczyt odległości
	  sensor_time = hcsr04_read();
 80007c2:	f000 fa3d 	bl	8000c40 <hcsr04_read>
 80007c6:	4602      	mov	r2, r0
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <czujnik_init+0x84>)
 80007ca:	601a      	str	r2, [r3, #0]
	  if(sensor_time/23 >= 2 && sensor_time/23 <= 50)
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <czujnik_init+0x84>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b2d      	cmp	r3, #45	; 0x2d
 80007d2:	d90e      	bls.n	80007f2 <czujnik_init+0x46>
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <czujnik_init+0x84>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f240 4294 	movw	r2, #1172	; 0x494
 80007dc:	4293      	cmp	r3, r2
 80007de:	d808      	bhi.n	80007f2 <czujnik_init+0x46>
	  {
		  distance  = sensor_time / 23;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <czujnik_init+0x84>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a13      	ldr	r2, [pc, #76]	; (8000834 <czujnik_init+0x88>)
 80007e6:	fba2 2303 	umull	r2, r3, r2, r3
 80007ea:	091b      	lsrs	r3, r3, #4
 80007ec:	4a12      	ldr	r2, [pc, #72]	; (8000838 <czujnik_init+0x8c>)
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	e010      	b.n	8000814 <czujnik_init+0x68>
	  }
	  else if(sensor_time/23 > 50)
 80007f2:	4b0f      	ldr	r3, [pc, #60]	; (8000830 <czujnik_init+0x84>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	f240 4294 	movw	r2, #1172	; 0x494
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d903      	bls.n	8000806 <czujnik_init+0x5a>
	  {
		  distance = 50;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <czujnik_init+0x8c>)
 8000800:	2232      	movs	r2, #50	; 0x32
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	e006      	b.n	8000814 <czujnik_init+0x68>
	  }
	  else if (sensor_time/23 < 2)
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <czujnik_init+0x84>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b2d      	cmp	r3, #45	; 0x2d
 800080c:	d802      	bhi.n	8000814 <czujnik_init+0x68>
	  {
		  distance = 1;
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <czujnik_init+0x8c>)
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
	  }
	  else;

	  osSemaphoreRelease(PermHandle);
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <czujnik_init+0x80>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f004 fc11 	bl	8005040 <osSemaphoreRelease>

	  HAL_Delay(200);
 800081e:	20c8      	movs	r0, #200	; 0xc8
 8000820:	f001 fb20 	bl	8001e64 <HAL_Delay>

    osDelay(1);
 8000824:	2001      	movs	r0, #1
 8000826:	f004 fb75 	bl	8004f14 <osDelay>
	  osSemaphoreWait(PermHandle, osWaitForever);
 800082a:	e7c3      	b.n	80007b4 <czujnik_init+0x8>
 800082c:	200040cc 	.word	0x200040cc
 8000830:	20003ff4 	.word	0x20003ff4
 8000834:	b21642c9 	.word	0xb21642c9
 8000838:	2000403c 	.word	0x2000403c

0800083c <wyswietlacz_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_wyswietlacz_init */
void wyswietlacz_init(void const * argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wyswietlacz_init */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreWait(PermHandle, osWaitForever);
 8000844:	4b18      	ldr	r3, [pc, #96]	; (80008a8 <wyswietlacz_init+0x6c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	4618      	mov	r0, r3
 800084e:	f004 fba9 	bl	8004fa4 <osSemaphoreWait>
	if(what_to_display == 0) //wartość rzeczywista
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <wyswietlacz_init+0x70>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d106      	bne.n	8000868 <wyswietlacz_init+0x2c>
	{
		display(distance,50);
 800085a:	4b15      	ldr	r3, [pc, #84]	; (80008b0 <wyswietlacz_init+0x74>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2132      	movs	r1, #50	; 0x32
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fbb9 	bl	8000fd8 <display>
 8000866:	e015      	b.n	8000894 <wyswietlacz_init+0x58>
	}
	else if(what_to_display == 2) //wartość zadana wyświetlana przez 2s, resetowana w DefautTask
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <wyswietlacz_init+0x70>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b02      	cmp	r3, #2
 800086e:	d111      	bne.n	8000894 <wyswietlacz_init+0x58>
	{
		sum = cyfra_1*10 + cyfra_2;
 8000870:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <wyswietlacz_init+0x78>)
 8000872:	681a      	ldr	r2, [r3, #0]
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	461a      	mov	r2, r3
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <wyswietlacz_init+0x7c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4413      	add	r3, r2
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <wyswietlacz_init+0x80>)
 8000886:	6013      	str	r3, [r2, #0]
		display(sum,50);
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <wyswietlacz_init+0x80>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2132      	movs	r1, #50	; 0x32
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fba2 	bl	8000fd8 <display>
	}
	osSemaphoreRelease(PermHandle);
 8000894:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <wyswietlacz_init+0x6c>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4618      	mov	r0, r3
 800089a:	f004 fbd1 	bl	8005040 <osSemaphoreRelease>

    osDelay(1);
 800089e:	2001      	movs	r0, #1
 80008a0:	f004 fb38 	bl	8004f14 <osDelay>
	osSemaphoreWait(PermHandle, osWaitForever);
 80008a4:	e7ce      	b.n	8000844 <wyswietlacz_init+0x8>
 80008a6:	bf00      	nop
 80008a8:	200040cc 	.word	0x200040cc
 80008ac:	20000028 	.word	0x20000028
 80008b0:	2000403c 	.word	0x2000403c
 80008b4:	20000034 	.word	0x20000034
 80008b8:	20000038 	.word	0x20000038
 80008bc:	2000003c 	.word	0x2000003c

080008c0 <pilot_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_pilot_init */
void pilot_init(void const * argument)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN pilot_init */
  /* Infinite loop */
  for(;;)
  {
	  if(ostateczna == 0)
 80008c8:	4b54      	ldr	r3, [pc, #336]	; (8000a1c <pilot_init+0x15c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	f040 80a0 	bne.w	8000a12 <pilot_init+0x152>
	  {
		  if(zezwolenie == 1)
 80008d2:	4b53      	ldr	r3, [pc, #332]	; (8000a20 <pilot_init+0x160>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d17e      	bne.n	80009d8 <pilot_init+0x118>
	  {
		  osSemaphoreWait(PermHandle, osWaitForever);
 80008da:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <pilot_init+0x164>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f04f 31ff 	mov.w	r1, #4294967295
 80008e2:	4618      	mov	r0, r3
 80008e4:	f004 fb5e 	bl	8004fa4 <osSemaphoreWait>
		  //odczyt z pilota
		  HAL_Delay(600);
 80008e8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80008ec:	f001 faba 	bl	8001e64 <HAL_Delay>
		  while(HAL_GPIO_ReadPin (IR_DATA_GPIO_Port, IR_DATA_Pin));
 80008f0:	bf00      	nop
 80008f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008f6:	484c      	ldr	r0, [pc, #304]	; (8000a28 <pilot_init+0x168>)
 80008f8:	f001 fd62 	bl	80023c0 <HAL_GPIO_ReadPin>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d1f7      	bne.n	80008f2 <pilot_init+0x32>

	  		  data = receive_data ();
 8000902:	f000 f8d1 	bl	8000aa8 <receive_data>
 8000906:	4602      	mov	r2, r0
 8000908:	4b48      	ldr	r3, [pc, #288]	; (8000a2c <pilot_init+0x16c>)
 800090a:	601a      	str	r2, [r3, #0]

	  		if(convert_code (data)>=0 && convert_code (data) <=9)
 800090c:	4b47      	ldr	r3, [pc, #284]	; (8000a2c <pilot_init+0x16c>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4618      	mov	r0, r3
 8000912:	f000 f929 	bl	8000b68 <convert_code>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	db10      	blt.n	800093e <pilot_init+0x7e>
 800091c:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <pilot_init+0x16c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f000 f921 	bl	8000b68 <convert_code>
 8000926:	4603      	mov	r3, r0
 8000928:	2b09      	cmp	r3, #9
 800092a:	dc08      	bgt.n	800093e <pilot_init+0x7e>
	  		{
	  			button = convert_code (data);
 800092c:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <pilot_init+0x16c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4618      	mov	r0, r3
 8000932:	f000 f919 	bl	8000b68 <convert_code>
 8000936:	4602      	mov	r2, r0
 8000938:	4b3d      	ldr	r3, [pc, #244]	; (8000a30 <pilot_init+0x170>)
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	e00a      	b.n	8000954 <pilot_init+0x94>
	  		}
	  		else if (convert_code (data) == 100)
 800093e:	4b3b      	ldr	r3, [pc, #236]	; (8000a2c <pilot_init+0x16c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 f910 	bl	8000b68 <convert_code>
 8000948:	4603      	mov	r3, r0
 800094a:	2b64      	cmp	r3, #100	; 0x64
 800094c:	d102      	bne.n	8000954 <pilot_init+0x94>
	  		{
	  			button = 100;
 800094e:	4b38      	ldr	r3, [pc, #224]	; (8000a30 <pilot_init+0x170>)
 8000950:	2264      	movs	r2, #100	; 0x64
 8000952:	601a      	str	r2, [r3, #0]
	  		}
	  		HAL_Delay(200);
 8000954:	20c8      	movs	r0, #200	; 0xc8
 8000956:	f001 fa85 	bl	8001e64 <HAL_Delay>

	  		if(what_to_display == 0)
 800095a:	4b36      	ldr	r3, [pc, #216]	; (8000a34 <pilot_init+0x174>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d114      	bne.n	800098c <pilot_init+0xcc>
	  		{
	  			what_to_display = 1;
 8000962:	4b34      	ldr	r3, [pc, #208]	; (8000a34 <pilot_init+0x174>)
 8000964:	2201      	movs	r2, #1
 8000966:	601a      	str	r2, [r3, #0]
	  			cyfra_1 = button;
 8000968:	4b31      	ldr	r3, [pc, #196]	; (8000a30 <pilot_init+0x170>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a32      	ldr	r2, [pc, #200]	; (8000a38 <pilot_init+0x178>)
 800096e:	6013      	str	r3, [r2, #0]
	  			display(cyfra_1,400);
 8000970:	4b31      	ldr	r3, [pc, #196]	; (8000a38 <pilot_init+0x178>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000978:	4618      	mov	r0, r3
 800097a:	f000 fb2d 	bl	8000fd8 <display>
	  			HAL_Delay(1000);
 800097e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000982:	f001 fa6f 	bl	8001e64 <HAL_Delay>
	  			screenOFF();
 8000986:	f000 faf3 	bl	8000f70 <screenOFF>
 800098a:	e020      	b.n	80009ce <pilot_init+0x10e>
	  		}
	  		else if(what_to_display == 1)
 800098c:	4b29      	ldr	r3, [pc, #164]	; (8000a34 <pilot_init+0x174>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d11c      	bne.n	80009ce <pilot_init+0x10e>
	  		{
	  			what_to_display = 2;
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <pilot_init+0x174>)
 8000996:	2202      	movs	r2, #2
 8000998:	601a      	str	r2, [r3, #0]
	  			cyfra_2 = button;
 800099a:	4b25      	ldr	r3, [pc, #148]	; (8000a30 <pilot_init+0x170>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a27      	ldr	r2, [pc, #156]	; (8000a3c <pilot_init+0x17c>)
 80009a0:	6013      	str	r3, [r2, #0]
	  			display(cyfra_2,400);
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <pilot_init+0x17c>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 fb14 	bl	8000fd8 <display>
	  			HAL_Delay(1000);
 80009b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b4:	f001 fa56 	bl	8001e64 <HAL_Delay>
	  			screenOFF();
 80009b8:	f000 fada 	bl	8000f70 <screenOFF>
	  			zezwolenie = 0;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <pilot_init+0x160>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
	  			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_RESET); //sygnalizacja zezwolenia wpisania wartości
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c8:	481d      	ldr	r0, [pc, #116]	; (8000a40 <pilot_init+0x180>)
 80009ca:	f001 fd11 	bl	80023f0 <HAL_GPIO_WritePin>
	  		}

	  		osSemaphoreRelease(PermHandle);
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <pilot_init+0x164>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f004 fb34 	bl	8005040 <osSemaphoreRelease>
	  }
	  else;

	  //zezwolenie na wpisanie wartości
	  if(HAL_GPIO_ReadPin (IR_DATA_GPIO_Port, IR_DATA_Pin) == GPIO_PIN_RESET && a == 0)
 80009d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <pilot_init+0x168>)
 80009de:	f001 fcef 	bl	80023c0 <HAL_GPIO_ReadPin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d114      	bne.n	8000a12 <pilot_init+0x152>
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <pilot_init+0x184>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d110      	bne.n	8000a12 <pilot_init+0x152>
	  {
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin,GPIO_PIN_SET); //sygnalizacja zezwolenia wpisania wartości
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <pilot_init+0x180>)
 80009f8:	f001 fcfa 	bl	80023f0 <HAL_GPIO_WritePin>
		  zezwolenie = 1;
 80009fc:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <pilot_init+0x160>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	601a      	str	r2, [r3, #0]
		  a=1;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <pilot_init+0x184>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
		  screenOFF();
 8000a08:	f000 fab2 	bl	8000f70 <screenOFF>
		  HAL_Delay(100);
 8000a0c:	2064      	movs	r0, #100	; 0x64
 8000a0e:	f001 fa29 	bl	8001e64 <HAL_Delay>
	  }
	  else;

	  }
	  else;
    osDelay(1);
 8000a12:	2001      	movs	r0, #1
 8000a14:	f004 fa7e 	bl	8004f14 <osDelay>
	  if(ostateczna == 0)
 8000a18:	e756      	b.n	80008c8 <pilot_init+0x8>
 8000a1a:	bf00      	nop
 8000a1c:	20000040 	.word	0x20000040
 8000a20:	20000030 	.word	0x20000030
 8000a24:	200040cc 	.word	0x200040cc
 8000a28:	40021800 	.word	0x40021800
 8000a2c:	20004084 	.word	0x20004084
 8000a30:	2000002c 	.word	0x2000002c
 8000a34:	20000028 	.word	0x20000028
 8000a38:	20000034 	.word	0x20000034
 8000a3c:	20000038 	.word	0x20000038
 8000a40:	40020400 	.word	0x40020400
 8000a44:	20000044 	.word	0x20000044

08000a48 <delay>:
 */

#include "functions.h"

void delay (uint32_t us)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <delay+0x2c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<us);
 8000a58:	bf00      	nop
 8000a5a:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <delay+0x2c>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	d8f9      	bhi.n	8000a5a <delay+0x12>
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20004088 	.word	0x20004088

08000a78 <delay1>:

void delay1 (uint32_t us)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <delay1+0x2c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim3))<us);
 8000a88:	bf00      	nop
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <delay1+0x2c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d8f9      	bhi.n	8000a8a <delay1+0x12>
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20004040 	.word	0x20004040

08000aa8 <receive_data>:

uint32_t receive_data (void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
	uint32_t code=0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]

		  /* The START Sequence begin here
	   * there will be a pulse of 9ms LOW and
	   * than 4.5 ms space (HIGH)
	   */
	  while (!(HAL_GPIO_ReadPin (IR_DATA_GPIO_Port, IR_DATA_Pin)));  // wait for the pin to go high.. 9ms LOW
 8000ab2:	bf00      	nop
 8000ab4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ab8:	4829      	ldr	r0, [pc, #164]	; (8000b60 <receive_data+0xb8>)
 8000aba:	f001 fc81 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d0f7      	beq.n	8000ab4 <receive_data+0xc>

	  while ((HAL_GPIO_ReadPin (IR_DATA_GPIO_Port, IR_DATA_Pin)));  // wait for the pin to go low.. 4.5ms HIGH
 8000ac4:	bf00      	nop
 8000ac6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aca:	4825      	ldr	r0, [pc, #148]	; (8000b60 <receive_data+0xb8>)
 8000acc:	f001 fc78 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d1f7      	bne.n	8000ac6 <receive_data+0x1e>
	   * We are only going to check the SPACE after 562.5us pulse
	   * if the space is 562.5us, the bit indicates '0'
	   * if the space is around 1.6ms, the bit is '1'
	   */

	  for (int i=0; i<32; i++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	603b      	str	r3, [r7, #0]
 8000ada:	e038      	b.n	8000b4e <receive_data+0xa6>
	  {
		  count=0;
 8000adc:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <receive_data+0xbc>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]

		  while (!(HAL_GPIO_ReadPin (IR_DATA_GPIO_Port, IR_DATA_Pin))); // wait for pin to go high.. this is 562.5us LOW
 8000ae2:	bf00      	nop
 8000ae4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae8:	481d      	ldr	r0, [pc, #116]	; (8000b60 <receive_data+0xb8>)
 8000aea:	f001 fc69 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f7      	beq.n	8000ae4 <receive_data+0x3c>

		  while ((HAL_GPIO_ReadPin (IR_DATA_GPIO_Port, IR_DATA_Pin)))  // count the space length while the pin is high
 8000af4:	e008      	b.n	8000b08 <receive_data+0x60>
		  {
			  count++;
 8000af6:	4b1b      	ldr	r3, [pc, #108]	; (8000b64 <receive_data+0xbc>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	3301      	adds	r3, #1
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <receive_data+0xbc>)
 8000b00:	701a      	strb	r2, [r3, #0]
			  delay1(100);
 8000b02:	2064      	movs	r0, #100	; 0x64
 8000b04:	f7ff ffb8 	bl	8000a78 <delay1>
		  while ((HAL_GPIO_ReadPin (IR_DATA_GPIO_Port, IR_DATA_Pin)))  // count the space length while the pin is high
 8000b08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b0c:	4814      	ldr	r0, [pc, #80]	; (8000b60 <receive_data+0xb8>)
 8000b0e:	f001 fc57 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d1ee      	bne.n	8000af6 <receive_data+0x4e>
		  }

		  if (count > 12) // if the space is more than 1.2 ms
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <receive_data+0xbc>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b0c      	cmp	r3, #12
 8000b1e:	d909      	bls.n	8000b34 <receive_data+0x8c>
		  {
			  code |= (1UL << (31-i));   // write 1
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	f1c3 031f 	rsb	r3, r3, #31
 8000b26:	2201      	movs	r2, #1
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	687a      	ldr	r2, [r7, #4]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	e009      	b.n	8000b48 <receive_data+0xa0>
		  }

		  else code &= ~(1UL << (31-i));  // write 0
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	f1c3 031f 	rsb	r3, r3, #31
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	43db      	mvns	r3, r3
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4013      	ands	r3, r2
 8000b46:	607b      	str	r3, [r7, #4]
	  for (int i=0; i<32; i++)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	2b1f      	cmp	r3, #31
 8000b52:	ddc3      	ble.n	8000adc <receive_data+0x34>
	  }

		return code;
 8000b54:	687b      	ldr	r3, [r7, #4]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021800 	.word	0x40021800
 8000b64:	200040c8 	.word	0x200040c8

08000b68 <convert_code>:

int convert_code (uint32_t code)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	int wynik;
	code = code - 16700000;
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4b32      	ldr	r3, [pc, #200]	; (8000c3c <convert_code+0xd4>)
 8000b74:	4413      	add	r3, r2
 8000b76:	607b      	str	r3, [r7, #4]

	if(code == 24175)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	f645 626f 	movw	r2, #24175	; 0x5e6f
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d102      	bne.n	8000b88 <convert_code+0x20>
	{
		wynik = 1;
 8000b82:	2301      	movs	r3, #1
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e051      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 18055)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f244 6287 	movw	r2, #18055	; 0x4687
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d102      	bne.n	8000b98 <convert_code+0x30>
	{
		wynik = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	e049      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 43045)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f64a 0225 	movw	r2, #43045	; 0xa825
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d102      	bne.n	8000ba8 <convert_code+0x40>
	{
		wynik = 3;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	e041      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 16015)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f643 628f 	movw	r2, #16015	; 0x3e8f
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d102      	bne.n	8000bb8 <convert_code+0x50>
	{
		wynik = 4;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	e039      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 26215)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f246 6267 	movw	r2, #26215	; 0x6667
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d102      	bne.n	8000bc8 <convert_code+0x60>
	{
		wynik = 5;
 8000bc2:	2305      	movs	r3, #5
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e031      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 34885)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f648 0245 	movw	r2, #34885	; 0x8845
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d102      	bne.n	8000bd8 <convert_code+0x70>
	{
		wynik = 6;
 8000bd2:	2306      	movs	r3, #6
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	e029      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 28765)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f247 025d 	movw	r2, #28765	; 0x705d
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d102      	bne.n	8000be8 <convert_code+0x80>
	{
		wynik = 7;
 8000be2:	2307      	movs	r3, #7
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	e021      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 30805)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f647 0255 	movw	r2, #30805	; 0x7855
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d102      	bne.n	8000bf8 <convert_code+0x90>
	{
		wynik = 8;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	e019      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 32845)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f248 024d 	movw	r2, #32845	; 0x804d
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d102      	bne.n	8000c08 <convert_code+0xa0>
	{
		wynik = 9;
 8000c02:	2309      	movs	r3, #9
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	e011      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 38455)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f249 6237 	movw	r2, #38455	; 0x9637
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d102      	bne.n	8000c18 <convert_code+0xb0>
	{
		wynik = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	e009      	b.n	8000c2c <convert_code+0xc4>
	}
	else if (code == 36925)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f249 023d 	movw	r2, #36925	; 0x903d
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d102      	bne.n	8000c28 <convert_code+0xc0>
	{
		wynik = 100; //exit
 8000c22:	2364      	movs	r3, #100	; 0x64
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	e001      	b.n	8000c2c <convert_code+0xc4>
	}
	else
	{
		wynik = 10;
 8000c28:	230a      	movs	r3, #10
 8000c2a:	60fb      	str	r3, [r7, #12]
	}

	return wynik;
 8000c2c:	68fb      	ldr	r3, [r7, #12]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	ff012da0 	.word	0xff012da0

08000c40 <hcsr04_read>:

uint32_t hcsr04_read (void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	local_time=0;
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <hcsr04_read+0x6c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin HIGH
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2108      	movs	r1, #8
 8000c4e:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <hcsr04_read+0x70>)
 8000c50:	f001 fbce 	bl	80023f0 <HAL_GPIO_WritePin>
	delay(2);  // wait for 2 us
 8000c54:	2002      	movs	r0, #2
 8000c56:	f7ff fef7 	bl	8000a48 <delay>


	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	2108      	movs	r1, #8
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <hcsr04_read+0x70>)
 8000c60:	f001 fbc6 	bl	80023f0 <HAL_GPIO_WritePin>
	delay(10);  // wait for 10 us
 8000c64:	200a      	movs	r0, #10
 8000c66:	f7ff feef 	bl	8000a48 <delay>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4810      	ldr	r0, [pc, #64]	; (8000cb0 <hcsr04_read+0x70>)
 8000c70:	f001 fbbe 	bl	80023f0 <HAL_GPIO_WritePin>

	// read the time for which the pin is high

	while (!(HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin)));  // wait for the ECHO pin to go high
 8000c74:	bf00      	nop
 8000c76:	2101      	movs	r1, #1
 8000c78:	480e      	ldr	r0, [pc, #56]	; (8000cb4 <hcsr04_read+0x74>)
 8000c7a:	f001 fba1 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f8      	beq.n	8000c76 <hcsr04_read+0x36>
	while (HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin))    // while the pin is high
 8000c84:	e007      	b.n	8000c96 <hcsr04_read+0x56>
	 {
		local_time++;   // measure time for which the pin is high
 8000c86:	4b09      	ldr	r3, [pc, #36]	; (8000cac <hcsr04_read+0x6c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	4a07      	ldr	r2, [pc, #28]	; (8000cac <hcsr04_read+0x6c>)
 8000c8e:	6013      	str	r3, [r2, #0]
		delay (1);
 8000c90:	2001      	movs	r0, #1
 8000c92:	f7ff fed9 	bl	8000a48 <delay>
	while (HAL_GPIO_ReadPin(Echo_GPIO_Port, Echo_Pin))    // while the pin is high
 8000c96:	2101      	movs	r1, #1
 8000c98:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <hcsr04_read+0x74>)
 8000c9a:	f001 fb91 	bl	80023c0 <HAL_GPIO_ReadPin>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d1f0      	bne.n	8000c86 <hcsr04_read+0x46>
	 }
	return local_time;
 8000ca4:	4b01      	ldr	r3, [pc, #4]	; (8000cac <hcsr04_read+0x6c>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20004038 	.word	0x20004038
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020800 	.word	0x40020800

08000cb8 <screenON>:

void screenON(int number)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
			if(number == 1)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b01      	cmp	r3, #1
 8000cc4:	d10c      	bne.n	8000ce0 <screenON+0x28>
			{
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ccc:	48a5      	ldr	r0, [pc, #660]	; (8000f64 <screenON+0x2ac>)
 8000cce:	f001 fb8f 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd8:	48a2      	ldr	r0, [pc, #648]	; (8000f64 <screenON+0x2ac>)
 8000cda:	f001 fb89 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
			}
			else;
}
 8000cde:	e13c      	b.n	8000f5a <screenON+0x2a2>
			else if(number == 2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d11e      	bne.n	8000d24 <screenON+0x6c>
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cec:	489e      	ldr	r0, [pc, #632]	; (8000f68 <screenON+0x2b0>)
 8000cee:	f001 fb7f 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf8:	489a      	ldr	r0, [pc, #616]	; (8000f64 <screenON+0x2ac>)
 8000cfa:	f001 fb79 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d04:	4899      	ldr	r0, [pc, #612]	; (8000f6c <screenON+0x2b4>)
 8000d06:	f001 fb73 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d10:	4894      	ldr	r0, [pc, #592]	; (8000f64 <screenON+0x2ac>)
 8000d12:	f001 fb6d 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1c:	4892      	ldr	r0, [pc, #584]	; (8000f68 <screenON+0x2b0>)
 8000d1e:	f001 fb67 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000d22:	e11a      	b.n	8000f5a <screenON+0x2a2>
			else if(number == 3)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d11e      	bne.n	8000d68 <screenON+0xb0>
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d30:	488d      	ldr	r0, [pc, #564]	; (8000f68 <screenON+0x2b0>)
 8000d32:	f001 fb5d 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d3c:	4889      	ldr	r0, [pc, #548]	; (8000f64 <screenON+0x2ac>)
 8000d3e:	f001 fb57 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000d42:	2201      	movs	r2, #1
 8000d44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d48:	4888      	ldr	r0, [pc, #544]	; (8000f6c <screenON+0x2b4>)
 8000d4a:	f001 fb51 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d54:	4883      	ldr	r0, [pc, #524]	; (8000f64 <screenON+0x2ac>)
 8000d56:	f001 fb4b 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d60:	4881      	ldr	r0, [pc, #516]	; (8000f68 <screenON+0x2b0>)
 8000d62:	f001 fb45 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000d66:	e0f8      	b.n	8000f5a <screenON+0x2a2>
			else if(number == 4)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d118      	bne.n	8000da0 <screenON+0xe8>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	487b      	ldr	r0, [pc, #492]	; (8000f64 <screenON+0x2ac>)
 8000d76:	f001 fb3b 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d80:	487a      	ldr	r0, [pc, #488]	; (8000f6c <screenON+0x2b4>)
 8000d82:	f001 fb35 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000d86:	2201      	movs	r2, #1
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	4875      	ldr	r0, [pc, #468]	; (8000f64 <screenON+0x2ac>)
 8000d8e:	f001 fb2f 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d98:	4873      	ldr	r0, [pc, #460]	; (8000f68 <screenON+0x2b0>)
 8000d9a:	f001 fb29 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000d9e:	e0dc      	b.n	8000f5a <screenON+0x2a2>
			else if(number == 5)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d11e      	bne.n	8000de4 <screenON+0x12c>
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dac:	486e      	ldr	r0, [pc, #440]	; (8000f68 <screenON+0x2b0>)
 8000dae:	f001 fb1f 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db8:	486b      	ldr	r0, [pc, #428]	; (8000f68 <screenON+0x2b0>)
 8000dba:	f001 fb19 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc4:	4869      	ldr	r0, [pc, #420]	; (8000f6c <screenON+0x2b4>)
 8000dc6:	f001 fb13 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dd0:	4864      	ldr	r0, [pc, #400]	; (8000f64 <screenON+0x2ac>)
 8000dd2:	f001 fb0d 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ddc:	4862      	ldr	r0, [pc, #392]	; (8000f68 <screenON+0x2b0>)
 8000dde:	f001 fb07 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000de2:	e0ba      	b.n	8000f5a <screenON+0x2a2>
			else if(number == 6)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b06      	cmp	r3, #6
 8000de8:	d124      	bne.n	8000e34 <screenON+0x17c>
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000dea:	2201      	movs	r2, #1
 8000dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df0:	485d      	ldr	r0, [pc, #372]	; (8000f68 <screenON+0x2b0>)
 8000df2:	f001 fafd 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dfc:	485a      	ldr	r0, [pc, #360]	; (8000f68 <screenON+0x2b0>)
 8000dfe:	f001 faf7 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e08:	4858      	ldr	r0, [pc, #352]	; (8000f6c <screenON+0x2b4>)
 8000e0a:	f001 faf1 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e14:	4853      	ldr	r0, [pc, #332]	; (8000f64 <screenON+0x2ac>)
 8000e16:	f001 faeb 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e20:	4851      	ldr	r0, [pc, #324]	; (8000f68 <screenON+0x2b0>)
 8000e22:	f001 fae5 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000e26:	2201      	movs	r2, #1
 8000e28:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e2c:	484d      	ldr	r0, [pc, #308]	; (8000f64 <screenON+0x2ac>)
 8000e2e:	f001 fadf 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000e32:	e092      	b.n	8000f5a <screenON+0x2a2>
			else if(number == 7)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b07      	cmp	r3, #7
 8000e38:	d112      	bne.n	8000e60 <screenON+0x1a8>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e40:	4848      	ldr	r0, [pc, #288]	; (8000f64 <screenON+0x2ac>)
 8000e42:	f001 fad5 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e4c:	4845      	ldr	r0, [pc, #276]	; (8000f64 <screenON+0x2ac>)
 8000e4e:	f001 facf 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e58:	4843      	ldr	r0, [pc, #268]	; (8000f68 <screenON+0x2b0>)
 8000e5a:	f001 fac9 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000e5e:	e07c      	b.n	8000f5a <screenON+0x2a2>
			else if(number == 8)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b08      	cmp	r3, #8
 8000e64:	d12a      	bne.n	8000ebc <screenON+0x204>
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6c:	483e      	ldr	r0, [pc, #248]	; (8000f68 <screenON+0x2b0>)
 8000e6e:	f001 fabf 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000e72:	2201      	movs	r2, #1
 8000e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e78:	483b      	ldr	r0, [pc, #236]	; (8000f68 <screenON+0x2b0>)
 8000e7a:	f001 fab9 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e84:	4839      	ldr	r0, [pc, #228]	; (8000f6c <screenON+0x2b4>)
 8000e86:	f001 fab3 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e90:	4834      	ldr	r0, [pc, #208]	; (8000f64 <screenON+0x2ac>)
 8000e92:	f001 faad 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e9c:	4832      	ldr	r0, [pc, #200]	; (8000f68 <screenON+0x2b0>)
 8000e9e:	f001 faa7 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea8:	482e      	ldr	r0, [pc, #184]	; (8000f64 <screenON+0x2ac>)
 8000eaa:	f001 faa1 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb4:	482b      	ldr	r0, [pc, #172]	; (8000f64 <screenON+0x2ac>)
 8000eb6:	f001 fa9b 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000eba:	e04e      	b.n	8000f5a <screenON+0x2a2>
			else if(number == 9)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b09      	cmp	r3, #9
 8000ec0:	d124      	bne.n	8000f0c <screenON+0x254>
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ec8:	4827      	ldr	r0, [pc, #156]	; (8000f68 <screenON+0x2b0>)
 8000eca:	f001 fa91 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed4:	4824      	ldr	r0, [pc, #144]	; (8000f68 <screenON+0x2b0>)
 8000ed6:	f001 fa8b 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee0:	4822      	ldr	r0, [pc, #136]	; (8000f6c <screenON+0x2b4>)
 8000ee2:	f001 fa85 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eec:	481d      	ldr	r0, [pc, #116]	; (8000f64 <screenON+0x2ac>)
 8000eee:	f001 fa7f 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef8:	481b      	ldr	r0, [pc, #108]	; (8000f68 <screenON+0x2b0>)
 8000efa:	f001 fa79 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f04:	4817      	ldr	r0, [pc, #92]	; (8000f64 <screenON+0x2ac>)
 8000f06:	f001 fa73 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000f0a:	e026      	b.n	8000f5a <screenON+0x2a2>
			else if(number == 0)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d123      	bne.n	8000f5a <screenON+0x2a2>
				HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000f12:	2201      	movs	r2, #1
 8000f14:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f18:	4813      	ldr	r0, [pc, #76]	; (8000f68 <screenON+0x2b0>)
 8000f1a:	f001 fa69 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f24:	4810      	ldr	r0, [pc, #64]	; (8000f68 <screenON+0x2b0>)
 8000f26:	f001 fa63 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f30:	480c      	ldr	r0, [pc, #48]	; (8000f64 <screenON+0x2ac>)
 8000f32:	f001 fa5d 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f3c:	480a      	ldr	r0, [pc, #40]	; (8000f68 <screenON+0x2b0>)
 8000f3e:	f001 fa57 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f48:	4806      	ldr	r0, [pc, #24]	; (8000f64 <screenON+0x2ac>)
 8000f4a:	f001 fa51 	bl	80023f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <screenON+0x2ac>)
 8000f56:	f001 fa4b 	bl	80023f0 <HAL_GPIO_WritePin>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40021400 	.word	0x40021400
 8000f6c:	40021800 	.word	0x40021800

08000f70 <screenOFF>:

void screenOFF(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
					HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f7a:	4814      	ldr	r0, [pc, #80]	; (8000fcc <screenOFF+0x5c>)
 8000f7c:	f001 fa38 	bl	80023f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f86:	4811      	ldr	r0, [pc, #68]	; (8000fcc <screenOFF+0x5c>)
 8000f88:	f001 fa32 	bl	80023f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f92:	480f      	ldr	r0, [pc, #60]	; (8000fd0 <screenOFF+0x60>)
 8000f94:	f001 fa2c 	bl	80023f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <screenOFF+0x64>)
 8000fa0:	f001 fa26 	bl	80023f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <screenOFF+0x5c>)
 8000fac:	f001 fa20 	bl	80023f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <screenOFF+0x64>)
 8000fb8:	f001 fa1a 	bl	80023f0 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <screenOFF+0x64>)
 8000fc4:	f001 fa14 	bl	80023f0 <HAL_GPIO_WritePin>

}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021400 	.word	0x40021400
 8000fd0:	40021800 	.word	0x40021800
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <display>:

void display(int cyfra, int czas)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2110      	movs	r1, #16
 8000fe6:	48bf      	ldr	r0, [pc, #764]	; (80012e4 <display+0x30c>)
 8000fe8:	f001 fa02 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2110      	movs	r1, #16
 8000ff0:	48bd      	ldr	r0, [pc, #756]	; (80012e8 <display+0x310>)
 8000ff2:	f001 f9fd 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ffc:	48bb      	ldr	r0, [pc, #748]	; (80012ec <display+0x314>)
 8000ffe:	f001 f9f7 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001008:	48b9      	ldr	r0, [pc, #740]	; (80012f0 <display+0x318>)
 800100a:	f001 f9f1 	bl	80023f0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001014:	48b6      	ldr	r0, [pc, #728]	; (80012f0 <display+0x318>)
 8001016:	f001 f9eb 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	48b4      	ldr	r0, [pc, #720]	; (80012f4 <display+0x31c>)
 8001022:	f001 f9e5 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102c:	48b1      	ldr	r0, [pc, #708]	; (80012f4 <display+0x31c>)
 800102e:	f001 f9df 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001038:	48ad      	ldr	r0, [pc, #692]	; (80012f0 <display+0x318>)
 800103a:	f001 f9d9 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001044:	48ab      	ldr	r0, [pc, #684]	; (80012f4 <display+0x31c>)
 8001046:	f001 f9d3 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001050:	48a7      	ldr	r0, [pc, #668]	; (80012f0 <display+0x318>)
 8001052:	f001 f9cd 	bl	80023f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105c:	48a6      	ldr	r0, [pc, #664]	; (80012f8 <display+0x320>)
 800105e:	f001 f9c7 	bl	80023f0 <HAL_GPIO_WritePin>

	if(cyfra <10)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b09      	cmp	r3, #9
 8001066:	dc0c      	bgt.n	8001082 <display+0xaa>
	{
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8001068:	2201      	movs	r2, #1
 800106a:	2110      	movs	r1, #16
 800106c:	489d      	ldr	r0, [pc, #628]	; (80012e4 <display+0x30c>)
 800106e:	f001 f9bf 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(cyfra);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fe20 	bl	8000cb8 <screenON>
		HAL_Delay(czas);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f000 fef2 	bl	8001e64 <HAL_Delay>
		screenOFF();
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
		}
	}
	else;
}
 8001080:	e12b      	b.n	80012da <display+0x302>
	else if (cyfra >= 10 && cyfra < 20)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b09      	cmp	r3, #9
 8001086:	dd38      	ble.n	80010fa <display+0x122>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b13      	cmp	r3, #19
 800108c:	dc35      	bgt.n	80010fa <display+0x122>
		for(long i = 0 ; i<czas/4 ; i++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e028      	b.n	80010e6 <display+0x10e>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8001094:	2201      	movs	r2, #1
 8001096:	2110      	movs	r1, #16
 8001098:	4892      	ldr	r0, [pc, #584]	; (80012e4 <display+0x30c>)
 800109a:	f001 f9a9 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(1);
 800109e:	2001      	movs	r0, #1
 80010a0:	f7ff fe0a 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f000 fedd 	bl	8001e64 <HAL_Delay>
		screenOFF();
 80010aa:	f7ff ff61 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2110      	movs	r1, #16
 80010b2:	488c      	ldr	r0, [pc, #560]	; (80012e4 <display+0x30c>)
 80010b4:	f001 f99c 	bl	80023f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	488a      	ldr	r0, [pc, #552]	; (80012e8 <display+0x310>)
 80010be:	f001 f997 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(cyfra-10);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3b0a      	subs	r3, #10
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fdf6 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f000 fec9 	bl	8001e64 <HAL_Delay>
		screenOFF();
 80010d2:	f7ff ff4d 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	4883      	ldr	r0, [pc, #524]	; (80012e8 <display+0x310>)
 80010dc:	f001 f988 	bl	80023f0 <HAL_GPIO_WritePin>
		for(long i = 0 ; i<czas/4 ; i++)
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	3301      	adds	r3, #1
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	da00      	bge.n	80010ee <display+0x116>
 80010ec:	3303      	adds	r3, #3
 80010ee:	109b      	asrs	r3, r3, #2
 80010f0:	461a      	mov	r2, r3
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	4293      	cmp	r3, r2
 80010f6:	dbcd      	blt.n	8001094 <display+0xbc>
 80010f8:	e0ef      	b.n	80012da <display+0x302>
	else if (cyfra >= 20 && cyfra < 30)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2b13      	cmp	r3, #19
 80010fe:	dd38      	ble.n	8001172 <display+0x19a>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b1d      	cmp	r3, #29
 8001104:	dc35      	bgt.n	8001172 <display+0x19a>
		for(long i = 0 ; i<czas/4 ; i++)
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
 800110a:	e028      	b.n	800115e <display+0x186>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 800110c:	2201      	movs	r2, #1
 800110e:	2110      	movs	r1, #16
 8001110:	4874      	ldr	r0, [pc, #464]	; (80012e4 <display+0x30c>)
 8001112:	f001 f96d 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(2);
 8001116:	2002      	movs	r0, #2
 8001118:	f7ff fdce 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f000 fea1 	bl	8001e64 <HAL_Delay>
		screenOFF();
 8001122:	f7ff ff25 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2110      	movs	r1, #16
 800112a:	486e      	ldr	r0, [pc, #440]	; (80012e4 <display+0x30c>)
 800112c:	f001 f960 	bl	80023f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8001130:	2201      	movs	r2, #1
 8001132:	2110      	movs	r1, #16
 8001134:	486c      	ldr	r0, [pc, #432]	; (80012e8 <display+0x310>)
 8001136:	f001 f95b 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(cyfra-20);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3b14      	subs	r3, #20
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fdba 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 8001144:	2001      	movs	r0, #1
 8001146:	f000 fe8d 	bl	8001e64 <HAL_Delay>
		screenOFF();
 800114a:	f7ff ff11 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2110      	movs	r1, #16
 8001152:	4865      	ldr	r0, [pc, #404]	; (80012e8 <display+0x310>)
 8001154:	f001 f94c 	bl	80023f0 <HAL_GPIO_WritePin>
		for(long i = 0 ; i<czas/4 ; i++)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	3301      	adds	r3, #1
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	da00      	bge.n	8001166 <display+0x18e>
 8001164:	3303      	adds	r3, #3
 8001166:	109b      	asrs	r3, r3, #2
 8001168:	461a      	mov	r2, r3
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4293      	cmp	r3, r2
 800116e:	dbcd      	blt.n	800110c <display+0x134>
 8001170:	e0b3      	b.n	80012da <display+0x302>
	else if (cyfra >= 30 && cyfra < 40)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b1d      	cmp	r3, #29
 8001176:	dd38      	ble.n	80011ea <display+0x212>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b27      	cmp	r3, #39	; 0x27
 800117c:	dc35      	bgt.n	80011ea <display+0x212>
		for(long i = 0 ; i<czas/4 ; i++)
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e028      	b.n	80011d6 <display+0x1fe>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8001184:	2201      	movs	r2, #1
 8001186:	2110      	movs	r1, #16
 8001188:	4856      	ldr	r0, [pc, #344]	; (80012e4 <display+0x30c>)
 800118a:	f001 f931 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(3);
 800118e:	2003      	movs	r0, #3
 8001190:	f7ff fd92 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 8001194:	2001      	movs	r0, #1
 8001196:	f000 fe65 	bl	8001e64 <HAL_Delay>
		screenOFF();
 800119a:	f7ff fee9 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2110      	movs	r1, #16
 80011a2:	4850      	ldr	r0, [pc, #320]	; (80012e4 <display+0x30c>)
 80011a4:	f001 f924 	bl	80023f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	2110      	movs	r1, #16
 80011ac:	484e      	ldr	r0, [pc, #312]	; (80012e8 <display+0x310>)
 80011ae:	f001 f91f 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(cyfra-30);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3b1e      	subs	r3, #30
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fd7e 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 80011bc:	2001      	movs	r0, #1
 80011be:	f000 fe51 	bl	8001e64 <HAL_Delay>
		screenOFF();
 80011c2:	f7ff fed5 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2110      	movs	r1, #16
 80011ca:	4847      	ldr	r0, [pc, #284]	; (80012e8 <display+0x310>)
 80011cc:	f001 f910 	bl	80023f0 <HAL_GPIO_WritePin>
		for(long i = 0 ; i<czas/4 ; i++)
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	3301      	adds	r3, #1
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	da00      	bge.n	80011de <display+0x206>
 80011dc:	3303      	adds	r3, #3
 80011de:	109b      	asrs	r3, r3, #2
 80011e0:	461a      	mov	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	4293      	cmp	r3, r2
 80011e6:	dbcd      	blt.n	8001184 <display+0x1ac>
 80011e8:	e077      	b.n	80012da <display+0x302>
	else if (cyfra >= 40 && cyfra < 50)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b27      	cmp	r3, #39	; 0x27
 80011ee:	dd38      	ble.n	8001262 <display+0x28a>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b31      	cmp	r3, #49	; 0x31
 80011f4:	dc35      	bgt.n	8001262 <display+0x28a>
		for(long i = 0 ; i<czas/4 ; i++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	e028      	b.n	800124e <display+0x276>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2110      	movs	r1, #16
 8001200:	4838      	ldr	r0, [pc, #224]	; (80012e4 <display+0x30c>)
 8001202:	f001 f8f5 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(4);
 8001206:	2004      	movs	r0, #4
 8001208:	f7ff fd56 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 800120c:	2001      	movs	r0, #1
 800120e:	f000 fe29 	bl	8001e64 <HAL_Delay>
		screenOFF();
 8001212:	f7ff fead 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	2110      	movs	r1, #16
 800121a:	4832      	ldr	r0, [pc, #200]	; (80012e4 <display+0x30c>)
 800121c:	f001 f8e8 	bl	80023f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2110      	movs	r1, #16
 8001224:	4830      	ldr	r0, [pc, #192]	; (80012e8 <display+0x310>)
 8001226:	f001 f8e3 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(cyfra-40);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3b28      	subs	r3, #40	; 0x28
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fd42 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f000 fe15 	bl	8001e64 <HAL_Delay>
		screenOFF();
 800123a:	f7ff fe99 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	2110      	movs	r1, #16
 8001242:	4829      	ldr	r0, [pc, #164]	; (80012e8 <display+0x310>)
 8001244:	f001 f8d4 	bl	80023f0 <HAL_GPIO_WritePin>
		for(long i = 0 ; i<czas/4 ; i++)
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	3301      	adds	r3, #1
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	da00      	bge.n	8001256 <display+0x27e>
 8001254:	3303      	adds	r3, #3
 8001256:	109b      	asrs	r3, r3, #2
 8001258:	461a      	mov	r2, r3
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4293      	cmp	r3, r2
 800125e:	dbcd      	blt.n	80011fc <display+0x224>
 8001260:	e03b      	b.n	80012da <display+0x302>
	else if (cyfra >= 50 && cyfra < 60)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b31      	cmp	r3, #49	; 0x31
 8001266:	dd38      	ble.n	80012da <display+0x302>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b3b      	cmp	r3, #59	; 0x3b
 800126c:	dc35      	bgt.n	80012da <display+0x302>
		for(long i = 0 ; i<czas/4 ; i++)
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	e028      	b.n	80012c6 <display+0x2ee>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8001274:	2201      	movs	r2, #1
 8001276:	2110      	movs	r1, #16
 8001278:	481a      	ldr	r0, [pc, #104]	; (80012e4 <display+0x30c>)
 800127a:	f001 f8b9 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(5);
 800127e:	2005      	movs	r0, #5
 8001280:	f7ff fd1a 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 8001284:	2001      	movs	r0, #1
 8001286:	f000 fded 	bl	8001e64 <HAL_Delay>
		screenOFF();
 800128a:	f7ff fe71 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2110      	movs	r1, #16
 8001292:	4814      	ldr	r0, [pc, #80]	; (80012e4 <display+0x30c>)
 8001294:	f001 f8ac 	bl	80023f0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8001298:	2201      	movs	r2, #1
 800129a:	2110      	movs	r1, #16
 800129c:	4812      	ldr	r0, [pc, #72]	; (80012e8 <display+0x310>)
 800129e:	f001 f8a7 	bl	80023f0 <HAL_GPIO_WritePin>
		screenON(cyfra-50);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	3b32      	subs	r3, #50	; 0x32
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fd06 	bl	8000cb8 <screenON>
		HAL_Delay(1);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f000 fdd9 	bl	8001e64 <HAL_Delay>
		screenOFF();
 80012b2:	f7ff fe5d 	bl	8000f70 <screenOFF>
		HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2110      	movs	r1, #16
 80012ba:	480b      	ldr	r0, [pc, #44]	; (80012e8 <display+0x310>)
 80012bc:	f001 f898 	bl	80023f0 <HAL_GPIO_WritePin>
		for(long i = 0 ; i<czas/4 ; i++)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	3301      	adds	r3, #1
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	da00      	bge.n	80012ce <display+0x2f6>
 80012cc:	3303      	adds	r3, #3
 80012ce:	109b      	asrs	r3, r3, #2
 80012d0:	461a      	mov	r2, r3
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4293      	cmp	r3, r2
 80012d6:	dbcd      	blt.n	8001274 <display+0x29c>
}
 80012d8:	e7ff      	b.n	80012da <display+0x302>
 80012da:	bf00      	nop
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020c00 	.word	0x40020c00
 80012f0:	40021400 	.word	0x40021400
 80012f4:	40021000 	.word	0x40021000
 80012f8:	40021800 	.word	0x40021800

080012fc <servo_forward>:

void servo_forward()
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	htim4.Instance->CCR1 = 18600; //1400
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <servo_forward+0x18>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f644 02a8 	movw	r2, #18600	; 0x48a8
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
}
 800130a:	bf00      	nop
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20003ff8 	.word	0x20003ff8

08001318 <servo_backward>:

void servo_backward()
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	htim4.Instance->CCR1 = 18350; //1700
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <servo_backward+0x18>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f244 72ae 	movw	r2, #18350	; 0x47ae
 8001324:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	20003ff8 	.word	0x20003ff8

08001334 <servo_stop>:

void servo_stop()
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	htim4.Instance->CCR1 = 20000;
 8001338:	4b04      	ldr	r3, [pc, #16]	; (800134c <servo_stop+0x18>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001342:	bf00      	nop
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	20003ff8 	.word	0x20003ff8

08001350 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	; 0x38
 8001354:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
 8001364:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	4bb4      	ldr	r3, [pc, #720]	; (8001638 <MX_GPIO_Init+0x2e8>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4ab3      	ldr	r2, [pc, #716]	; (8001638 <MX_GPIO_Init+0x2e8>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4bb1      	ldr	r3, [pc, #708]	; (8001638 <MX_GPIO_Init+0x2e8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	4bae      	ldr	r3, [pc, #696]	; (8001638 <MX_GPIO_Init+0x2e8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4aad      	ldr	r2, [pc, #692]	; (8001638 <MX_GPIO_Init+0x2e8>)
 8001384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4bab      	ldr	r3, [pc, #684]	; (8001638 <MX_GPIO_Init+0x2e8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4ba8      	ldr	r3, [pc, #672]	; (8001638 <MX_GPIO_Init+0x2e8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4aa7      	ldr	r2, [pc, #668]	; (8001638 <MX_GPIO_Init+0x2e8>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4ba5      	ldr	r3, [pc, #660]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	61bb      	str	r3, [r7, #24]
 80013ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4ba2      	ldr	r3, [pc, #648]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4aa1      	ldr	r2, [pc, #644]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b9f      	ldr	r3, [pc, #636]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
 80013c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c6:	4b9c      	ldr	r3, [pc, #624]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a9b      	ldr	r2, [pc, #620]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013cc:	f043 0320 	orr.w	r3, r3, #32
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b99      	ldr	r3, [pc, #612]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0320 	and.w	r3, r3, #32
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013de:	4b96      	ldr	r3, [pc, #600]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a95      	ldr	r2, [pc, #596]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b93      	ldr	r3, [pc, #588]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f6:	4b90      	ldr	r3, [pc, #576]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a8f      	ldr	r2, [pc, #572]	; (8001638 <MX_GPIO_Init+0x2e8>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b8d      	ldr	r3, [pc, #564]	; (8001638 <MX_GPIO_Init+0x2e8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	60bb      	str	r3, [r7, #8]
 800140c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800140e:	4b8a      	ldr	r3, [pc, #552]	; (8001638 <MX_GPIO_Init+0x2e8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a89      	ldr	r2, [pc, #548]	; (8001638 <MX_GPIO_Init+0x2e8>)
 8001414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b87      	ldr	r3, [pc, #540]	; (8001638 <MX_GPIO_Init+0x2e8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001422:	607b      	str	r3, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trig_Pin|D1_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	2118      	movs	r1, #24
 800142a:	4884      	ldr	r0, [pc, #528]	; (800163c <MX_GPIO_Init+0x2ec>)
 800142c:	f000 ffe0 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|D2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	f244 0191 	movw	r1, #16529	; 0x4091
 8001436:	4882      	ldr	r0, [pc, #520]	; (8001640 <MX_GPIO_Init+0x2f0>)
 8001438:	f000 ffda 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, D4_Pin|A_Pin|D_Pin|F_Pin, GPIO_PIN_RESET);
 800143c:	2200      	movs	r2, #0
 800143e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001442:	4880      	ldr	r0, [pc, #512]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001444:	f000 ffd4 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, B_Pin|C_Pin|E_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 800144e:	487e      	ldr	r0, [pc, #504]	; (8001648 <MX_GPIO_Init+0x2f8>)
 8001450:	f000 ffce 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800145a:	487c      	ldr	r0, [pc, #496]	; (800164c <MX_GPIO_Init+0x2fc>)
 800145c:	f000 ffc8 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|G_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f244 0140 	movw	r1, #16448	; 0x4040
 8001466:	487a      	ldr	r0, [pc, #488]	; (8001650 <MX_GPIO_Init+0x300>)
 8001468:	f000 ffc2 	bl	80023f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001472:	4b78      	ldr	r3, [pc, #480]	; (8001654 <MX_GPIO_Init+0x304>)
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	4875      	ldr	r0, [pc, #468]	; (8001658 <MX_GPIO_Init+0x308>)
 8001482:	f000 fdf3 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Echo_Pin;
 8001486:	2301      	movs	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	486f      	ldr	r0, [pc, #444]	; (8001658 <MX_GPIO_Init+0x308>)
 800149a:	f000 fde7 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800149e:	2332      	movs	r3, #50	; 0x32
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ae:	230b      	movs	r3, #11
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	4867      	ldr	r0, [pc, #412]	; (8001658 <MX_GPIO_Init+0x308>)
 80014ba:	f000 fdd7 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014be:	2386      	movs	r3, #134	; 0x86
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ca:	2303      	movs	r3, #3
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ce:	230b      	movs	r3, #11
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	4858      	ldr	r0, [pc, #352]	; (800163c <MX_GPIO_Init+0x2ec>)
 80014da:	f000 fdc7 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Trig_Pin|D1_Pin;
 80014de:	2318      	movs	r3, #24
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f2:	4619      	mov	r1, r3
 80014f4:	4851      	ldr	r0, [pc, #324]	; (800163c <MX_GPIO_Init+0x2ec>)
 80014f6:	f000 fdb9 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|D2_Pin|LD2_Pin;
 80014fa:	f244 0391 	movw	r3, #16529	; 0x4091
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	484b      	ldr	r0, [pc, #300]	; (8001640 <MX_GPIO_Init+0x2f0>)
 8001514:	f000 fdaa 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = D4_Pin|A_Pin|D_Pin|F_Pin;
 8001518:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	4844      	ldr	r0, [pc, #272]	; (8001644 <MX_GPIO_Init+0x2f4>)
 8001532:	f000 fd9b 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = B_Pin|C_Pin|E_Pin;
 8001536:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 800153a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	483e      	ldr	r0, [pc, #248]	; (8001648 <MX_GPIO_Init+0x2f8>)
 8001550:	f000 fd8c 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001554:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155a:	2302      	movs	r3, #2
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001566:	230b      	movs	r3, #11
 8001568:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800156a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156e:	4619      	mov	r1, r3
 8001570:	4833      	ldr	r0, [pc, #204]	; (8001640 <MX_GPIO_Init+0x2f0>)
 8001572:	f000 fd7b 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001576:	f44f 7340 	mov.w	r3, #768	; 0x300
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001588:	2307      	movs	r3, #7
 800158a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800158c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001590:	4619      	mov	r1, r3
 8001592:	482e      	ldr	r0, [pc, #184]	; (800164c <MX_GPIO_Init+0x2fc>)
 8001594:	f000 fd6a 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = D3_Pin;
 8001598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a6:	2300      	movs	r3, #0
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	4826      	ldr	r0, [pc, #152]	; (800164c <MX_GPIO_Init+0x2fc>)
 80015b2:	f000 fd5b 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|G_Pin;
 80015b6:	f244 0340 	movw	r3, #16448	; 0x4040
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	4820      	ldr	r0, [pc, #128]	; (8001650 <MX_GPIO_Init+0x300>)
 80015d0:	f000 fd4c 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin|IR_DATA_Pin;
 80015d4:	f44f 7320 	mov.w	r3, #640	; 0x280
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015da:	2300      	movs	r3, #0
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e6:	4619      	mov	r1, r3
 80015e8:	4819      	ldr	r0, [pc, #100]	; (8001650 <MX_GPIO_Init+0x300>)
 80015ea:	f000 fd3f 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80015ee:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2302      	movs	r3, #2
 80015f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001600:	230a      	movs	r3, #10
 8001602:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001608:	4619      	mov	r1, r3
 800160a:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_GPIO_Init+0x2ec>)
 800160c:	f000 fd2e 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_GPIO_Init+0x2ec>)
 8001626:	f000 fd21 	bl	800206c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800162a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001630:	2302      	movs	r3, #2
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
 8001634:	e012      	b.n	800165c <MX_GPIO_Init+0x30c>
 8001636:	bf00      	nop
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000
 8001640:	40020400 	.word	0x40020400
 8001644:	40021400 	.word	0x40021400
 8001648:	40021000 	.word	0x40021000
 800164c:	40020c00 	.word	0x40020c00
 8001650:	40021800 	.word	0x40021800
 8001654:	10110000 	.word	0x10110000
 8001658:	40020800 	.word	0x40020800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001664:	230b      	movs	r3, #11
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166c:	4619      	mov	r1, r3
 800166e:	4803      	ldr	r0, [pc, #12]	; (800167c <MX_GPIO_Init+0x32c>)
 8001670:	f000 fcfc 	bl	800206c <HAL_GPIO_Init>

}
 8001674:	bf00      	nop
 8001676:	3738      	adds	r7, #56	; 0x38
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021800 	.word	0x40021800

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001684:	f000 fbc1 	bl	8001e0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001688:	f000 f820 	bl	80016cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168c:	f7ff fe60 	bl	8001350 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001690:	f000 f996 	bl	80019c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001694:	f000 f9e8 	bl	8001a68 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001698:	f000 fa34 	bl	8001b04 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800169c:	f000 fb18 	bl	8001cd0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 80016a0:	4807      	ldr	r0, [pc, #28]	; (80016c0 <main+0x40>)
 80016a2:	f001 ff99 	bl	80035d8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 80016a6:	4807      	ldr	r0, [pc, #28]	; (80016c4 <main+0x44>)
 80016a8:	f001 ff96 	bl	80035d8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80016ac:	2100      	movs	r1, #0
 80016ae:	4806      	ldr	r0, [pc, #24]	; (80016c8 <main+0x48>)
 80016b0:	f002 f812 	bl	80036d8 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */
 
  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80016b4:	f7fe ff46 	bl	8000544 <MX_FREERTOS_Init>
 
  /* Start scheduler */
  osKernelStart();
 80016b8:	f003 fbd9 	bl	8004e6e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <main+0x3c>
 80016be:	bf00      	nop
 80016c0:	20004088 	.word	0x20004088
 80016c4:	20004040 	.word	0x20004040
 80016c8:	20003ff8 	.word	0x20003ff8

080016cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b0b4      	sub	sp, #208	; 0xd0
 80016d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016d6:	2230      	movs	r2, #48	; 0x30
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f005 ff85 	bl	80075ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f0:	f107 0308 	add.w	r3, r7, #8
 80016f4:	2284      	movs	r2, #132	; 0x84
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f005 ff76 	bl	80075ea <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80016fe:	f000 feab 	bl	8002458 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <SystemClock_Config+0x10c>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a34      	ldr	r2, [pc, #208]	; (80017d8 <SystemClock_Config+0x10c>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b32      	ldr	r3, [pc, #200]	; (80017d8 <SystemClock_Config+0x10c>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800171a:	4b30      	ldr	r3, [pc, #192]	; (80017dc <SystemClock_Config+0x110>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001722:	4a2e      	ldr	r2, [pc, #184]	; (80017dc <SystemClock_Config+0x110>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <SystemClock_Config+0x110>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001736:	2301      	movs	r3, #1
 8001738:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800173c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001740:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001744:	2302      	movs	r3, #2
 8001746:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800174e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001752:	2304      	movs	r3, #4
 8001754:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001758:	2348      	movs	r3, #72	; 0x48
 800175a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001764:	2303      	movs	r3, #3
 8001766:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800176a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fe82 	bl	8002478 <HAL_RCC_OscConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800177a:	f000 f840 	bl	80017fe <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800177e:	230f      	movs	r3, #15
 8001780:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001790:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800179e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80017a2:	2102      	movs	r1, #2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f001 f8d7 	bl	8002958 <HAL_RCC_ClockConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80017b0:	f000 f825 	bl	80017fe <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	4618      	mov	r0, r3
 80017c2:	f001 faef 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x104>
  {
    Error_Handler();
 80017cc:	f000 f817 	bl	80017fe <Error_Handler>
  }
}
 80017d0:	bf00      	nop
 80017d2:	37d0      	adds	r7, #208	; 0xd0
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40007000 	.word	0x40007000

080017e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017f0:	d101      	bne.n	80017f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017f2:	f000 fb17 	bl	8001e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <HAL_MspInit+0x4c>)
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <HAL_MspInit+0x4c>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	6413      	str	r3, [r2, #64]	; 0x40
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_MspInit+0x4c>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	607b      	str	r3, [r7, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <HAL_MspInit+0x4c>)
 8001830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_MspInit+0x4c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	210f      	movs	r1, #15
 8001846:	f06f 0001 	mvn.w	r0, #1
 800184a:	f000 fbe5 	bl	8002018 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800

0800185c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b08c      	sub	sp, #48	; 0x30
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001864:	2300      	movs	r3, #0
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	201c      	movs	r0, #28
 8001872:	f000 fbd1 	bl	8002018 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8001876:	201c      	movs	r0, #28
 8001878:	f000 fbea 	bl	8002050 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800187c:	4b20      	ldr	r3, [pc, #128]	; (8001900 <HAL_InitTick+0xa4>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_InitTick+0xa4>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
 8001888:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_InitTick+0xa4>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001894:	f107 0210 	add.w	r2, r7, #16
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4611      	mov	r1, r2
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 fa4e 	bl	8002d40 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80018a4:	f001 fa24 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 80018a8:	4603      	mov	r3, r0
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <HAL_InitTick+0xa8>)
 80018b2:	fba2 2303 	umull	r2, r3, r2, r3
 80018b6:	0c9b      	lsrs	r3, r3, #18
 80018b8:	3b01      	subs	r3, #1
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80018bc:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_InitTick+0xac>)
 80018be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_InitTick+0xac>)
 80018c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018ca:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_InitTick+0xac>)
 80018ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <HAL_InitTick+0xac>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <HAL_InitTick+0xac>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80018de:	480a      	ldr	r0, [pc, #40]	; (8001908 <HAL_InitTick+0xac>)
 80018e0:	f001 fe4e 	bl	8003580 <HAL_TIM_Base_Init>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d104      	bne.n	80018f4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80018ea:	4807      	ldr	r0, [pc, #28]	; (8001908 <HAL_InitTick+0xac>)
 80018ec:	f001 fe9e 	bl	800362c <HAL_TIM_Base_Start_IT>
 80018f0:	4603      	mov	r3, r0
 80018f2:	e000      	b.n	80018f6 <HAL_InitTick+0x9a>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3730      	adds	r7, #48	; 0x30
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	431bde83 	.word	0x431bde83
 8001908:	200040d8 	.word	0x200040d8

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <HardFault_Handler+0x4>

08001920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <MemManage_Handler+0x4>

08001926 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <BusFault_Handler+0x4>

0800192c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <UsageFault_Handler+0x4>

08001932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <TIM2_IRQHandler+0x10>)
 8001946:	f001 ff0b 	bl	8003760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200040d8 	.word	0x200040d8

08001954 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <SystemInit+0x5c>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a14      	ldr	r2, [pc, #80]	; (80019b0 <SystemInit+0x5c>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <SystemInit+0x60>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <SystemInit+0x60>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001974:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <SystemInit+0x60>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800197a:	4b0e      	ldr	r3, [pc, #56]	; (80019b4 <SystemInit+0x60>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	490d      	ldr	r1, [pc, #52]	; (80019b4 <SystemInit+0x60>)
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <SystemInit+0x64>)
 8001982:	4013      	ands	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <SystemInit+0x60>)
 8001988:	4a0c      	ldr	r2, [pc, #48]	; (80019bc <SystemInit+0x68>)
 800198a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800198c:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <SystemInit+0x60>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <SystemInit+0x60>)
 8001992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001996:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <SystemInit+0x60>)
 800199a:	2200      	movs	r2, #0
 800199c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SystemInit+0x5c>)
 80019a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a4:	609a      	str	r2, [r3, #8]
#endif
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000ed00 	.word	0xe000ed00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	fef6ffff 	.word	0xfef6ffff
 80019bc:	24003010 	.word	0x24003010

080019c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <MX_TIM1_Init+0xa0>)
 80019e0:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <MX_TIM1_Init+0xa4>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <MX_TIM1_Init+0xa0>)
 80019e6:	2247      	movs	r2, #71	; 0x47
 80019e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_TIM1_Init+0xa0>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <MX_TIM1_Init+0xa0>)
 80019f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80019f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_TIM1_Init+0xa0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <MX_TIM1_Init+0xa0>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_TIM1_Init+0xa0>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a0a:	4815      	ldr	r0, [pc, #84]	; (8001a60 <MX_TIM1_Init+0xa0>)
 8001a0c:	f001 fdb8 	bl	8003580 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001a16:	f7ff fef2 	bl	80017fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	480e      	ldr	r0, [pc, #56]	; (8001a60 <MX_TIM1_Init+0xa0>)
 8001a28:	f002 f8d2 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001a32:	f7ff fee4 	bl	80017fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <MX_TIM1_Init+0xa0>)
 8001a48:	f002 fd62 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001a52:	f7ff fed4 	bl	80017fe <Error_Handler>
  }

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20004088 	.word	0x20004088
 8001a64:	40010000 	.word	0x40010000

08001a68 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]
 8001a84:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8001a86:	4b1d      	ldr	r3, [pc, #116]	; (8001afc <MX_TIM3_Init+0x94>)
 8001a88:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <MX_TIM3_Init+0x98>)
 8001a8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <MX_TIM3_Init+0x94>)
 8001a8e:	2247      	movs	r2, #71	; 0x47
 8001a90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b1a      	ldr	r3, [pc, #104]	; (8001afc <MX_TIM3_Init+0x94>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff-1;
 8001a98:	4b18      	ldr	r3, [pc, #96]	; (8001afc <MX_TIM3_Init+0x94>)
 8001a9a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_TIM3_Init+0x94>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	4b15      	ldr	r3, [pc, #84]	; (8001afc <MX_TIM3_Init+0x94>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aac:	4813      	ldr	r0, [pc, #76]	; (8001afc <MX_TIM3_Init+0x94>)
 8001aae:	f001 fd67 	bl	8003580 <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001ab8:	f7ff fea1 	bl	80017fe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	480c      	ldr	r0, [pc, #48]	; (8001afc <MX_TIM3_Init+0x94>)
 8001aca:	f002 f881 	bl	8003bd0 <HAL_TIM_ConfigClockSource>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001ad4:	f7ff fe93 	bl	80017fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4805      	ldr	r0, [pc, #20]	; (8001afc <MX_TIM3_Init+0x94>)
 8001ae6:	f002 fd13 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f7ff fe85 	bl	80017fe <Error_Handler>
  }

}
 8001af4:	bf00      	nop
 8001af6:	3720      	adds	r7, #32
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20004040 	.word	0x20004040
 8001b00:	40000400 	.word	0x40000400

08001b04 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b16:	463b      	mov	r3, r7
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
 8001b24:	615a      	str	r2, [r3, #20]
 8001b26:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001b2a:	4a22      	ldr	r2, [pc, #136]	; (8001bb4 <MX_TIM4_Init+0xb0>)
 8001b2c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001b2e:	4b20      	ldr	r3, [pc, #128]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001b30:	2247      	movs	r2, #71	; 0x47
 8001b32:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001b3c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001b40:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b4e:	4818      	ldr	r0, [pc, #96]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001b50:	f001 fd96 	bl	8003680 <HAL_TIM_PWM_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001b5a:	f7ff fe50 	bl	80017fe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4810      	ldr	r0, [pc, #64]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001b6e:	f002 fccf 	bl	8004510 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001b78:	f7ff fe41 	bl	80017fe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b7c:	2360      	movs	r3, #96	; 0x60
 8001b7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001b94:	f001 ff04 	bl	80039a0 <HAL_TIM_PWM_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001b9e:	f7ff fe2e 	bl	80017fe <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <MX_TIM4_Init+0xac>)
 8001ba4:	f000 f85c 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 8001ba8:	bf00      	nop
 8001baa:	3728      	adds	r7, #40	; 0x28
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20003ff8 	.word	0x20003ff8
 8001bb4:	40000800 	.word	0x40000800

08001bb8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_TIM_Base_MspInit+0x5c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d10c      	bne.n	8001be4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <HAL_TIM_Base_MspInit+0x60>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <HAL_TIM_Base_MspInit+0x60>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_TIM_Base_MspInit+0x60>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001be2:	e010      	b.n	8001c06 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM3)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <HAL_TIM_Base_MspInit+0x64>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d10b      	bne.n	8001c06 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_TIM_Base_MspInit+0x60>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a09      	ldr	r2, [pc, #36]	; (8001c18 <HAL_TIM_Base_MspInit+0x60>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <HAL_TIM_Base_MspInit+0x60>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	40010000 	.word	0x40010000
 8001c18:	40023800 	.word	0x40023800
 8001c1c:	40000400 	.word	0x40000400

08001c20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_TIM_PWM_MspInit+0x38>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d10b      	bne.n	8001c4a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	4a09      	ldr	r2, [pc, #36]	; (8001c5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <HAL_TIM_PWM_MspInit+0x3c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	60fb      	str	r3, [r7, #12]
 8001c48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40023800 	.word	0x40023800

08001c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a11      	ldr	r2, [pc, #68]	; (8001cc4 <HAL_TIM_MspPostInit+0x64>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d11c      	bne.n	8001cbc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c82:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_TIM_MspPostInit+0x68>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_TIM_MspPostInit+0x68>)
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_TIM_MspPostInit+0x68>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD12     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cac:	2302      	movs	r3, #2
 8001cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4805      	ldr	r0, [pc, #20]	; (8001ccc <HAL_TIM_MspPostInit+0x6c>)
 8001cb8:	f000 f9d8 	bl	800206c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cbc:	bf00      	nop
 8001cbe:	3720      	adds	r7, #32
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40000800 	.word	0x40000800
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020c00 	.word	0x40020c00

08001cd0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cd6:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <MX_USART2_UART_Init+0x5c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001cda:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce2:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ce8:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cf6:	220c      	movs	r2, #12
 8001cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_USART2_UART_Init+0x58>)
 8001d14:	f002 fc76 	bl	8004604 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d1e:	f7ff fd6e 	bl	80017fe <Error_Handler>
  }

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20004118 	.word	0x20004118
 8001d2c:	40004400 	.word	0x40004400

08001d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a17      	ldr	r2, [pc, #92]	; (8001dac <HAL_UART_MspInit+0x7c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d127      	bne.n	8001da2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_UART_MspInit+0x80>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a16      	ldr	r2, [pc, #88]	; (8001db0 <HAL_UART_MspInit+0x80>)
 8001d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_UART_MspInit+0x80>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_UART_MspInit+0x80>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <HAL_UART_MspInit+0x80>)
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_UART_MspInit+0x80>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001d82:	2360      	movs	r3, #96	; 0x60
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d92:	2307      	movs	r3, #7
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_UART_MspInit+0x84>)
 8001d9e:	f000 f965 	bl	800206c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40004400 	.word	0x40004400
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020c00 	.word	0x40020c00

08001db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dbe:	e003      	b.n	8001dc8 <LoopCopyDataInit>

08001dc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001dc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001dc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001dc6:	3104      	adds	r1, #4

08001dc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001dc8:	480b      	ldr	r0, [pc, #44]	; (8001df8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001dca:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001dcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001dce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001dd0:	d3f6      	bcc.n	8001dc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001dd4:	e002      	b.n	8001ddc <LoopFillZerobss>

08001dd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001dd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001dd8:	f842 3b04 	str.w	r3, [r2], #4

08001ddc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001dde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001de0:	d3f9      	bcc.n	8001dd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001de2:	f7ff fdb7 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001de6:	f005 fbd1 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dea:	f7ff fc49 	bl	8001680 <main>
  bx  lr    
 8001dee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df0:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001df4:	080076dc 	.word	0x080076dc
  ldr  r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dfc:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001e00:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001e04:	2000419c 	.word	0x2000419c

08001e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e08:	e7fe      	b.n	8001e08 <ADC_IRQHandler>

08001e0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f000 f8f7 	bl	8002002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff fd21 	bl	800185c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001e1a:	f7ff fcf7 	bl	800180c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000004 	.word	0x20000004
 8001e48:	20004198 	.word	0x20004198

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20004198 	.word	0x20004198

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_Delay+0x40>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000004 	.word	0x20000004

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ed6:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <__NVIC_SetPriorityGrouping+0x40>)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	60d3      	str	r3, [r2, #12]
}
 8001edc:	bf00      	nop
 8001ede:	3714      	adds	r7, #20
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr
 8001ee8:	e000ed00 	.word	0xe000ed00
 8001eec:	05fa0000 	.word	0x05fa0000

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	; (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff4c 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002018:	b580      	push	{r7, lr}
 800201a:	b086      	sub	sp, #24
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	60b9      	str	r1, [r7, #8]
 8002022:	607a      	str	r2, [r7, #4]
 8002024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800202a:	f7ff ff61 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 800202e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	68b9      	ldr	r1, [r7, #8]
 8002034:	6978      	ldr	r0, [r7, #20]
 8002036:	f7ff ffb1 	bl	8001f9c <NVIC_EncodePriority>
 800203a:	4602      	mov	r2, r0
 800203c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ff80 	bl	8001f48 <__NVIC_SetPriority>
}
 8002048:	bf00      	nop
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff ff54 	bl	8001f0c <__NVIC_EnableIRQ>
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
 800208a:	e175      	b.n	8002378 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800208c:	2201      	movs	r2, #1
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	4013      	ands	r3, r2
 800209e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	f040 8164 	bne.w	8002372 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x4e>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2b12      	cmp	r3, #18
 80020b8:	d123      	bne.n	8002102 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	220f      	movs	r2, #15
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	08da      	lsrs	r2, r3, #3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3208      	adds	r2, #8
 80020fc:	69b9      	ldr	r1, [r7, #24]
 80020fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	2203      	movs	r2, #3
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	43db      	mvns	r3, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4013      	ands	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0203 	and.w	r2, r3, #3
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d00b      	beq.n	8002156 <HAL_GPIO_Init+0xea>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d007      	beq.n	8002156 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800214a:	2b11      	cmp	r3, #17
 800214c:	d003      	beq.n	8002156 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b12      	cmp	r3, #18
 8002154:	d130      	bne.n	80021b8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	2203      	movs	r2, #3
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4013      	ands	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 0201 	and.w	r2, r3, #1
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 80be 	beq.w	8002372 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4b65      	ldr	r3, [pc, #404]	; (800238c <HAL_GPIO_Init+0x320>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a64      	ldr	r2, [pc, #400]	; (800238c <HAL_GPIO_Init+0x320>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b62      	ldr	r3, [pc, #392]	; (800238c <HAL_GPIO_Init+0x320>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800220e:	4a60      	ldr	r2, [pc, #384]	; (8002390 <HAL_GPIO_Init+0x324>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f003 0303 	and.w	r3, r3, #3
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	220f      	movs	r2, #15
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a57      	ldr	r2, [pc, #348]	; (8002394 <HAL_GPIO_Init+0x328>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d037      	beq.n	80022aa <HAL_GPIO_Init+0x23e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a56      	ldr	r2, [pc, #344]	; (8002398 <HAL_GPIO_Init+0x32c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d031      	beq.n	80022a6 <HAL_GPIO_Init+0x23a>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a55      	ldr	r2, [pc, #340]	; (800239c <HAL_GPIO_Init+0x330>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d02b      	beq.n	80022a2 <HAL_GPIO_Init+0x236>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a54      	ldr	r2, [pc, #336]	; (80023a0 <HAL_GPIO_Init+0x334>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d025      	beq.n	800229e <HAL_GPIO_Init+0x232>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a53      	ldr	r2, [pc, #332]	; (80023a4 <HAL_GPIO_Init+0x338>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01f      	beq.n	800229a <HAL_GPIO_Init+0x22e>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_GPIO_Init+0x33c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d019      	beq.n	8002296 <HAL_GPIO_Init+0x22a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a51      	ldr	r2, [pc, #324]	; (80023ac <HAL_GPIO_Init+0x340>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d013      	beq.n	8002292 <HAL_GPIO_Init+0x226>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a50      	ldr	r2, [pc, #320]	; (80023b0 <HAL_GPIO_Init+0x344>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d00d      	beq.n	800228e <HAL_GPIO_Init+0x222>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a4f      	ldr	r2, [pc, #316]	; (80023b4 <HAL_GPIO_Init+0x348>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d007      	beq.n	800228a <HAL_GPIO_Init+0x21e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a4e      	ldr	r2, [pc, #312]	; (80023b8 <HAL_GPIO_Init+0x34c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d101      	bne.n	8002286 <HAL_GPIO_Init+0x21a>
 8002282:	2309      	movs	r3, #9
 8002284:	e012      	b.n	80022ac <HAL_GPIO_Init+0x240>
 8002286:	230a      	movs	r3, #10
 8002288:	e010      	b.n	80022ac <HAL_GPIO_Init+0x240>
 800228a:	2308      	movs	r3, #8
 800228c:	e00e      	b.n	80022ac <HAL_GPIO_Init+0x240>
 800228e:	2307      	movs	r3, #7
 8002290:	e00c      	b.n	80022ac <HAL_GPIO_Init+0x240>
 8002292:	2306      	movs	r3, #6
 8002294:	e00a      	b.n	80022ac <HAL_GPIO_Init+0x240>
 8002296:	2305      	movs	r3, #5
 8002298:	e008      	b.n	80022ac <HAL_GPIO_Init+0x240>
 800229a:	2304      	movs	r3, #4
 800229c:	e006      	b.n	80022ac <HAL_GPIO_Init+0x240>
 800229e:	2303      	movs	r3, #3
 80022a0:	e004      	b.n	80022ac <HAL_GPIO_Init+0x240>
 80022a2:	2302      	movs	r3, #2
 80022a4:	e002      	b.n	80022ac <HAL_GPIO_Init+0x240>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_GPIO_Init+0x240>
 80022aa:	2300      	movs	r3, #0
 80022ac:	69fa      	ldr	r2, [r7, #28]
 80022ae:	f002 0203 	and.w	r2, r2, #3
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	4093      	lsls	r3, r2
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022bc:	4934      	ldr	r1, [pc, #208]	; (8002390 <HAL_GPIO_Init+0x324>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	089b      	lsrs	r3, r3, #2
 80022c2:	3302      	adds	r3, #2
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ca:	4b3c      	ldr	r3, [pc, #240]	; (80023bc <HAL_GPIO_Init+0x350>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ee:	4a33      	ldr	r2, [pc, #204]	; (80023bc <HAL_GPIO_Init+0x350>)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022f4:	4b31      	ldr	r3, [pc, #196]	; (80023bc <HAL_GPIO_Init+0x350>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	43db      	mvns	r3, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4013      	ands	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002318:	4a28      	ldr	r2, [pc, #160]	; (80023bc <HAL_GPIO_Init+0x350>)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231e:	4b27      	ldr	r3, [pc, #156]	; (80023bc <HAL_GPIO_Init+0x350>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002342:	4a1e      	ldr	r2, [pc, #120]	; (80023bc <HAL_GPIO_Init+0x350>)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <HAL_GPIO_Init+0x350>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800236c:	4a13      	ldr	r2, [pc, #76]	; (80023bc <HAL_GPIO_Init+0x350>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3301      	adds	r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b0f      	cmp	r3, #15
 800237c:	f67f ae86 	bls.w	800208c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002380:	bf00      	nop
 8002382:	3724      	adds	r7, #36	; 0x24
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	40023800 	.word	0x40023800
 8002390:	40013800 	.word	0x40013800
 8002394:	40020000 	.word	0x40020000
 8002398:	40020400 	.word	0x40020400
 800239c:	40020800 	.word	0x40020800
 80023a0:	40020c00 	.word	0x40020c00
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40021400 	.word	0x40021400
 80023ac:	40021800 	.word	0x40021800
 80023b0:	40021c00 	.word	0x40021c00
 80023b4:	40022000 	.word	0x40022000
 80023b8:	40022400 	.word	0x40022400
 80023bc:	40013c00 	.word	0x40013c00

080023c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	691a      	ldr	r2, [r3, #16]
 80023d0:	887b      	ldrh	r3, [r7, #2]
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d002      	beq.n	80023de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023d8:	2301      	movs	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	e001      	b.n	80023e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	460b      	mov	r3, r1
 80023fa:	807b      	strh	r3, [r7, #2]
 80023fc:	4613      	mov	r3, r2
 80023fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002400:	787b      	ldrb	r3, [r7, #1]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002406:	887a      	ldrh	r2, [r7, #2]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800240c:	e003      	b.n	8002416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800240e:	887b      	ldrh	r3, [r7, #2]
 8002410:	041a      	lsls	r2, r3, #16
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	619a      	str	r2, [r3, #24]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	460b      	mov	r3, r1
 800242c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	695a      	ldr	r2, [r3, #20]
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	401a      	ands	r2, r3
 8002436:	887b      	ldrh	r3, [r7, #2]
 8002438:	429a      	cmp	r2, r3
 800243a:	d104      	bne.n	8002446 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	041a      	lsls	r2, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002444:	e002      	b.n	800244c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	619a      	str	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002466:	6013      	str	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	40007000 	.word	0x40007000

08002478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e25c      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8087 	beq.w	80025aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800249c:	4b96      	ldr	r3, [pc, #600]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f003 030c 	and.w	r3, r3, #12
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d00c      	beq.n	80024c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024a8:	4b93      	ldr	r3, [pc, #588]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d112      	bne.n	80024da <HAL_RCC_OscConfig+0x62>
 80024b4:	4b90      	ldr	r3, [pc, #576]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c0:	d10b      	bne.n	80024da <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c2:	4b8d      	ldr	r3, [pc, #564]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d06c      	beq.n	80025a8 <HAL_RCC_OscConfig+0x130>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d168      	bne.n	80025a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e236      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024e2:	d106      	bne.n	80024f2 <HAL_RCC_OscConfig+0x7a>
 80024e4:	4b84      	ldr	r3, [pc, #528]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a83      	ldr	r2, [pc, #524]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ee:	6013      	str	r3, [r2, #0]
 80024f0:	e02e      	b.n	8002550 <HAL_RCC_OscConfig+0xd8>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x9c>
 80024fa:	4b7f      	ldr	r3, [pc, #508]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7e      	ldr	r2, [pc, #504]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b7c      	ldr	r3, [pc, #496]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7b      	ldr	r2, [pc, #492]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800250c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xd8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0xc0>
 800251e:	4b76      	ldr	r3, [pc, #472]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a75      	ldr	r2, [pc, #468]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b73      	ldr	r3, [pc, #460]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a72      	ldr	r2, [pc, #456]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xd8>
 8002538:	4b6f      	ldr	r3, [pc, #444]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a6e      	ldr	r2, [pc, #440]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b6c      	ldr	r3, [pc, #432]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a6b      	ldr	r2, [pc, #428]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7ff fc78 	bl	8001e4c <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fc74 	bl	8001e4c <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	; 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1ea      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b61      	ldr	r3, [pc, #388]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xe8>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7ff fc64 	bl	8001e4c <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fc60 	bl	8001e4c <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	; 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1d6      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b57      	ldr	r3, [pc, #348]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x110>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d069      	beq.n	800268a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025b6:	4b50      	ldr	r3, [pc, #320]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b4d      	ldr	r3, [pc, #308]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x190>
 80025ce:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b47      	ldr	r3, [pc, #284]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x17a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1aa      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	493d      	ldr	r1, [pc, #244]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e040      	b.n	800268a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d023      	beq.n	8002658 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b39      	ldr	r3, [pc, #228]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a38      	ldr	r2, [pc, #224]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7ff fc16 	bl	8001e4c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002624:	f7ff fc12 	bl	8001e4c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e188      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002636:	4b30      	ldr	r3, [pc, #192]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002642:	4b2d      	ldr	r3, [pc, #180]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4929      	ldr	r1, [pc, #164]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002652:	4313      	orrs	r3, r2
 8002654:	600b      	str	r3, [r1, #0]
 8002656:	e018      	b.n	800268a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002658:	4b27      	ldr	r3, [pc, #156]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a26      	ldr	r2, [pc, #152]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7ff fbf2 	bl	8001e4c <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800266c:	f7ff fbee 	bl	8001e4c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e164      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1f0      	bne.n	800266c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d038      	beq.n	8002708 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d019      	beq.n	80026d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	4a15      	ldr	r2, [pc, #84]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7ff fbcf 	bl	8001e4c <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026b2:	f7ff fbcb 	bl	8001e4c <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e141      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80026c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x23a>
 80026d0:	e01a      	b.n	8002708 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80026d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d6:	4a08      	ldr	r2, [pc, #32]	; (80026f8 <HAL_RCC_OscConfig+0x280>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026de:	f7ff fbb5 	bl	8001e4c <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026e4:	e00a      	b.n	80026fc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e6:	f7ff fbb1 	bl	8001e4c <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d903      	bls.n	80026fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e127      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
 80026f8:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026fc:	4b94      	ldr	r3, [pc, #592]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80026fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1ee      	bne.n	80026e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a4 	beq.w	800285e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002716:	4b8e      	ldr	r3, [pc, #568]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10d      	bne.n	800273e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002722:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	4a8a      	ldr	r2, [pc, #552]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272c:	6413      	str	r3, [r2, #64]	; 0x40
 800272e:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800273a:	2301      	movs	r3, #1
 800273c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800273e:	4b85      	ldr	r3, [pc, #532]	; (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002746:	2b00      	cmp	r3, #0
 8002748:	d118      	bne.n	800277c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800274a:	4b82      	ldr	r3, [pc, #520]	; (8002954 <HAL_RCC_OscConfig+0x4dc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a81      	ldr	r2, [pc, #516]	; (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002754:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002756:	f7ff fb79 	bl	8001e4c <HAL_GetTick>
 800275a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800275e:	f7ff fb75 	bl	8001e4c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b64      	cmp	r3, #100	; 0x64
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0eb      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002770:	4b78      	ldr	r3, [pc, #480]	; (8002954 <HAL_RCC_OscConfig+0x4dc>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0f0      	beq.n	800275e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d106      	bne.n	8002792 <HAL_RCC_OscConfig+0x31a>
 8002784:	4b72      	ldr	r3, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a71      	ldr	r2, [pc, #452]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
 8002790:	e02d      	b.n	80027ee <HAL_RCC_OscConfig+0x376>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10c      	bne.n	80027b4 <HAL_RCC_OscConfig+0x33c>
 800279a:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a6c      	ldr	r2, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
 80027a6:	4b6a      	ldr	r3, [pc, #424]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a69      	ldr	r2, [pc, #420]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027ac:	f023 0304 	bic.w	r3, r3, #4
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	e01c      	b.n	80027ee <HAL_RCC_OscConfig+0x376>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCC_OscConfig+0x35e>
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a63      	ldr	r2, [pc, #396]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	4b61      	ldr	r3, [pc, #388]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a60      	ldr	r2, [pc, #384]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
 80027d4:	e00b      	b.n	80027ee <HAL_RCC_OscConfig+0x376>
 80027d6:	4b5e      	ldr	r3, [pc, #376]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	4a5d      	ldr	r2, [pc, #372]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70
 80027e2:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	4a5a      	ldr	r2, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d015      	beq.n	8002822 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7ff fb29 	bl	8001e4c <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7ff fb25 	bl	8001e4c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e099      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	4b4e      	ldr	r3, [pc, #312]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ee      	beq.n	80027fe <HAL_RCC_OscConfig+0x386>
 8002820:	e014      	b.n	800284c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002822:	f7ff fb13 	bl	8001e4c <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7ff fb0f 	bl	8001e4c <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e083      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ee      	bne.n	800282a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d105      	bne.n	800285e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002852:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a3e      	ldr	r2, [pc, #248]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d06f      	beq.n	8002946 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002866:	4b3a      	ldr	r3, [pc, #232]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 030c 	and.w	r3, r3, #12
 800286e:	2b08      	cmp	r3, #8
 8002870:	d067      	beq.n	8002942 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d149      	bne.n	800290e <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287a:	4b35      	ldr	r3, [pc, #212]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a34      	ldr	r2, [pc, #208]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002884:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002886:	f7ff fae1 	bl	8001e4c <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288e:	f7ff fadd 	bl	8001e4c <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e053      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a0:	4b2b      	ldr	r3, [pc, #172]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	019b      	lsls	r3, r3, #6
 80028bc:	431a      	orrs	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	085b      	lsrs	r3, r3, #1
 80028c4:	3b01      	subs	r3, #1
 80028c6:	041b      	lsls	r3, r3, #16
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
 80028d0:	4313      	orrs	r3, r2
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80028d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028d8:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028da:	4b1d      	ldr	r3, [pc, #116]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a1c      	ldr	r2, [pc, #112]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 80028e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7ff fab1 	bl	8001e4c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028ee:	f7ff faad 	bl	8001e4c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e023      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x476>
 800290c:	e01b      	b.n	8002946 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7ff fa97 	bl	8001e4c <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002922:	f7ff fa93 	bl	8001e4c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e009      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_OscConfig+0x4d8>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1f0      	bne.n	8002922 <HAL_RCC_OscConfig+0x4aa>
 8002940:	e001      	b.n	8002946 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	40007000 	.word	0x40007000

08002958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e0ce      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b69      	ldr	r3, [pc, #420]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d910      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b66      	ldr	r3, [pc, #408]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 020f 	bic.w	r2, r3, #15
 8002986:	4964      	ldr	r1, [pc, #400]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b62      	ldr	r3, [pc, #392]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b6      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b58      	ldr	r3, [pc, #352]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a57      	ldr	r2, [pc, #348]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4b52      	ldr	r3, [pc, #328]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a51      	ldr	r2, [pc, #324]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b4f      	ldr	r3, [pc, #316]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	494c      	ldr	r1, [pc, #304]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d040      	beq.n	8002a7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d115      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07d      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a1a:	4b40      	ldr	r3, [pc, #256]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d109      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e071      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a2a:	4b3c      	ldr	r3, [pc, #240]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e069      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f023 0203 	bic.w	r2, r3, #3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4935      	ldr	r1, [pc, #212]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a4c:	f7ff f9fe 	bl	8001e4c <HAL_GetTick>
 8002a50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a54:	f7ff f9fa 	bl	8001e4c <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e051      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	4b2c      	ldr	r3, [pc, #176]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 020c 	and.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1eb      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7c:	4b26      	ldr	r3, [pc, #152]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	683a      	ldr	r2, [r7, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d210      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 020f 	bic.w	r2, r3, #15
 8002a92:	4921      	ldr	r1, [pc, #132]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b1f      	ldr	r3, [pc, #124]	; (8002b18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e030      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b18      	ldr	r3, [pc, #96]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4915      	ldr	r1, [pc, #84]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ad6:	4b11      	ldr	r3, [pc, #68]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490d      	ldr	r1, [pc, #52]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aea:	f000 f81d 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8002aee:	4601      	mov	r1, r0
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_RCC_ClockConfig+0x1c8>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	fa21 f303 	lsr.w	r3, r1, r3
 8002b02:	4a08      	ldr	r2, [pc, #32]	; (8002b24 <HAL_RCC_ClockConfig+0x1cc>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe fea8 	bl	800185c <HAL_InitTick>

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40023c00 	.word	0x40023c00
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	080076b4 	.word	0x080076b4
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	2300      	movs	r3, #0
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b3e:	4b63      	ldr	r3, [pc, #396]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d007      	beq.n	8002b5a <HAL_RCC_GetSysClockFreq+0x32>
 8002b4a:	2b08      	cmp	r3, #8
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCC_GetSysClockFreq+0x38>
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f040 80b4 	bne.w	8002cbc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b5e      	ldr	r3, [pc, #376]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b56:	60bb      	str	r3, [r7, #8]
       break;
 8002b58:	e0b3      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5a:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b5c:	60bb      	str	r3, [r7, #8]
      break;
 8002b5e:	e0b0      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b60:	4b5a      	ldr	r3, [pc, #360]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b68:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002b6a:	4b58      	ldr	r3, [pc, #352]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d04a      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b76:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	099b      	lsrs	r3, r3, #6
 8002b7c:	f04f 0400 	mov.w	r4, #0
 8002b80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	ea03 0501 	and.w	r5, r3, r1
 8002b8c:	ea04 0602 	and.w	r6, r4, r2
 8002b90:	4629      	mov	r1, r5
 8002b92:	4632      	mov	r2, r6
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	f04f 0400 	mov.w	r4, #0
 8002b9c:	0154      	lsls	r4, r2, #5
 8002b9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ba2:	014b      	lsls	r3, r1, #5
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	1b49      	subs	r1, r1, r5
 8002baa:	eb62 0206 	sbc.w	r2, r2, r6
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	f04f 0400 	mov.w	r4, #0
 8002bb6:	0194      	lsls	r4, r2, #6
 8002bb8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bbc:	018b      	lsls	r3, r1, #6
 8002bbe:	1a5b      	subs	r3, r3, r1
 8002bc0:	eb64 0402 	sbc.w	r4, r4, r2
 8002bc4:	f04f 0100 	mov.w	r1, #0
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	00e2      	lsls	r2, r4, #3
 8002bce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bd2:	00d9      	lsls	r1, r3, #3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4614      	mov	r4, r2
 8002bd8:	195b      	adds	r3, r3, r5
 8002bda:	eb44 0406 	adc.w	r4, r4, r6
 8002bde:	f04f 0100 	mov.w	r1, #0
 8002be2:	f04f 0200 	mov.w	r2, #0
 8002be6:	0262      	lsls	r2, r4, #9
 8002be8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002bec:	0259      	lsls	r1, r3, #9
 8002bee:	460b      	mov	r3, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4621      	mov	r1, r4
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f04f 0400 	mov.w	r4, #0
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	f7fd fb06 	bl	8000210 <__aeabi_uldivmod>
 8002c04:	4603      	mov	r3, r0
 8002c06:	460c      	mov	r4, r1
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	e049      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c0c:	4b2f      	ldr	r3, [pc, #188]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	099b      	lsrs	r3, r3, #6
 8002c12:	f04f 0400 	mov.w	r4, #0
 8002c16:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	ea03 0501 	and.w	r5, r3, r1
 8002c22:	ea04 0602 	and.w	r6, r4, r2
 8002c26:	4629      	mov	r1, r5
 8002c28:	4632      	mov	r2, r6
 8002c2a:	f04f 0300 	mov.w	r3, #0
 8002c2e:	f04f 0400 	mov.w	r4, #0
 8002c32:	0154      	lsls	r4, r2, #5
 8002c34:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c38:	014b      	lsls	r3, r1, #5
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	1b49      	subs	r1, r1, r5
 8002c40:	eb62 0206 	sbc.w	r2, r2, r6
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	f04f 0400 	mov.w	r4, #0
 8002c4c:	0194      	lsls	r4, r2, #6
 8002c4e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c52:	018b      	lsls	r3, r1, #6
 8002c54:	1a5b      	subs	r3, r3, r1
 8002c56:	eb64 0402 	sbc.w	r4, r4, r2
 8002c5a:	f04f 0100 	mov.w	r1, #0
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	00e2      	lsls	r2, r4, #3
 8002c64:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c68:	00d9      	lsls	r1, r3, #3
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4614      	mov	r4, r2
 8002c6e:	195b      	adds	r3, r3, r5
 8002c70:	eb44 0406 	adc.w	r4, r4, r6
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	02a2      	lsls	r2, r4, #10
 8002c7e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c82:	0299      	lsls	r1, r3, #10
 8002c84:	460b      	mov	r3, r1
 8002c86:	4614      	mov	r4, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f04f 0400 	mov.w	r4, #0
 8002c92:	461a      	mov	r2, r3
 8002c94:	4623      	mov	r3, r4
 8002c96:	f7fd fabb 	bl	8000210 <__aeabi_uldivmod>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	460c      	mov	r4, r1
 8002c9e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	; (8002ccc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	60bb      	str	r3, [r7, #8]
      break;
 8002cba:	e002      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cbe:	60bb      	str	r3, [r7, #8]
      break;
 8002cc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc2:	68bb      	ldr	r3, [r7, #8]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	00f42400 	.word	0x00f42400
 8002cd4:	007a1200 	.word	0x007a1200

08002cd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_RCC_GetHCLKFreq+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000000 	.word	0x20000000

08002cf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cf4:	f7ff fff0 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002cf8:	4601      	mov	r1, r0
 8002cfa:	4b05      	ldr	r3, [pc, #20]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	0a9b      	lsrs	r3, r3, #10
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	4a03      	ldr	r2, [pc, #12]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d06:	5cd3      	ldrb	r3, [r2, r3]
 8002d08:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40023800 	.word	0x40023800
 8002d14:	080076c4 	.word	0x080076c4

08002d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d1c:	f7ff ffdc 	bl	8002cd8 <HAL_RCC_GetHCLKFreq>
 8002d20:	4601      	mov	r1, r0
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	0b5b      	lsrs	r3, r3, #13
 8002d28:	f003 0307 	and.w	r3, r3, #7
 8002d2c:	4a03      	ldr	r2, [pc, #12]	; (8002d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	080076c4 	.word	0x080076c4

08002d40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	220f      	movs	r2, #15
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d50:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_RCC_GetClockConfig+0x5c>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <HAL_RCC_GetClockConfig+0x5c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <HAL_RCC_GetClockConfig+0x5c>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_RCC_GetClockConfig+0x5c>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	08db      	lsrs	r3, r3, #3
 8002d7a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d82:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_RCC_GetClockConfig+0x60>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 020f 	and.w	r2, r3, #15
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	601a      	str	r2, [r3, #0]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	40023c00 	.word	0x40023c00

08002da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b088      	sub	sp, #32
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d012      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dcc:	4b69      	ldr	r3, [pc, #420]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	4a68      	ldr	r2, [pc, #416]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dd6:	6093      	str	r3, [r2, #8]
 8002dd8:	4b66      	ldr	r3, [pc, #408]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	4964      	ldr	r1, [pc, #400]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d017      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0c:	4959      	ldr	r1, [pc, #356]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e3a:	4b4e      	ldr	r3, [pc, #312]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	494a      	ldr	r1, [pc, #296]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e76:	2301      	movs	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 808b 	beq.w	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e88:	4b3a      	ldr	r3, [pc, #232]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	4a39      	ldr	r2, [pc, #228]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e92:	6413      	str	r3, [r2, #64]	; 0x40
 8002e94:	4b37      	ldr	r3, [pc, #220]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ea0:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a34      	ldr	r2, [pc, #208]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eac:	f7fe ffce 	bl	8001e4c <HAL_GetTick>
 8002eb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb4:	f7fe ffca 	bl	8001e4c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e355      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ed2:	4b28      	ldr	r3, [pc, #160]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d035      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d02e      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef0:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f06:	4b1b      	ldr	r3, [pc, #108]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a1a      	ldr	r2, [pc, #104]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f18:	4b16      	ldr	r3, [pc, #88]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d114      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe ff92 	bl	8001e4c <HAL_GetTick>
 8002f28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2c:	f7fe ff8e 	bl	8001e4c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e317      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f42:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0ee      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f5a:	d111      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f5c:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f68:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f6a:	400b      	ands	r3, r1
 8002f6c:	4901      	ldr	r1, [pc, #4]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
 8002f72:	e00b      	b.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f74:	40023800 	.word	0x40023800
 8002f78:	40007000 	.word	0x40007000
 8002f7c:	0ffffcff 	.word	0x0ffffcff
 8002f80:	4bb0      	ldr	r3, [pc, #704]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	4aaf      	ldr	r2, [pc, #700]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f8a:	6093      	str	r3, [r2, #8]
 8002f8c:	4bad      	ldr	r3, [pc, #692]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f98:	49aa      	ldr	r1, [pc, #680]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d010      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002faa:	4ba6      	ldr	r3, [pc, #664]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb0:	4aa4      	ldr	r2, [pc, #656]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fb6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fba:	4ba2      	ldr	r3, [pc, #648]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fbc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	499f      	ldr	r1, [pc, #636]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fd8:	4b9a      	ldr	r3, [pc, #616]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe6:	4997      	ldr	r1, [pc, #604]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ffa:	4b92      	ldr	r3, [pc, #584]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003008:	498e      	ldr	r1, [pc, #568]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800301c:	4b89      	ldr	r3, [pc, #548]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302a:	4986      	ldr	r1, [pc, #536]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800303e:	4b81      	ldr	r3, [pc, #516]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304c:	497d      	ldr	r1, [pc, #500]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003060:	4b78      	ldr	r3, [pc, #480]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4975      	ldr	r1, [pc, #468]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003082:	4b70      	ldr	r3, [pc, #448]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f023 020c 	bic.w	r2, r3, #12
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003090:	496c      	ldr	r1, [pc, #432]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a4:	4b67      	ldr	r3, [pc, #412]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b2:	4964      	ldr	r1, [pc, #400]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c6:	4b5f      	ldr	r3, [pc, #380]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d4:	495b      	ldr	r1, [pc, #364]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030e8:	4b56      	ldr	r3, [pc, #344]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f6:	4953      	ldr	r1, [pc, #332]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800310a:	4b4e      	ldr	r3, [pc, #312]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003118:	494a      	ldr	r1, [pc, #296]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800312c:	4b45      	ldr	r3, [pc, #276]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	4942      	ldr	r1, [pc, #264]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800314e:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315c:	4939      	ldr	r1, [pc, #228]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003170:	4b34      	ldr	r3, [pc, #208]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800317e:	4931      	ldr	r1, [pc, #196]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d011      	beq.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003192:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a0:	4928      	ldr	r1, [pc, #160]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b0:	d101      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031b2:	2301      	movs	r3, #1
 80031b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031d2:	4b1c      	ldr	r3, [pc, #112]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e0:	4918      	ldr	r1, [pc, #96]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00b      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031f4:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003204:	490f      	ldr	r1, [pc, #60]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d005      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800321a:	f040 80d8 	bne.w	80033ce <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800321e:	4b09      	ldr	r3, [pc, #36]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a08      	ldr	r2, [pc, #32]	; (8003244 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003224:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003228:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800322a:	f7fe fe0f 	bl	8001e4c <HAL_GetTick>
 800322e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003230:	e00a      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003232:	f7fe fe0b 	bl	8001e4c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	2b64      	cmp	r3, #100	; 0x64
 800323e:	d903      	bls.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e196      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003244:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003248:	4b6c      	ldr	r3, [pc, #432]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d1ee      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d021      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003264:	2b00      	cmp	r3, #0
 8003266:	d11d      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003268:	4b64      	ldr	r3, [pc, #400]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800326a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800326e:	0c1b      	lsrs	r3, r3, #16
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003276:	4b61      	ldr	r3, [pc, #388]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	019a      	lsls	r2, r3, #6
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	431a      	orrs	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	061b      	lsls	r3, r3, #24
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	071b      	lsls	r3, r3, #28
 800329c:	4957      	ldr	r1, [pc, #348]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x516>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b8:	d00a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d02e      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ce:	d129      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80032e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e4:	0f1b      	lsrs	r3, r3, #28
 80032e6:	f003 0307 	and.w	r3, r3, #7
 80032ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	019a      	lsls	r2, r3, #6
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	431a      	orrs	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	061b      	lsls	r3, r3, #24
 80032fe:	431a      	orrs	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	071b      	lsls	r3, r3, #28
 8003304:	493d      	ldr	r1, [pc, #244]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800330c:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800330e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003312:	f023 021f 	bic.w	r2, r3, #31
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331a:	3b01      	subs	r3, #1
 800331c:	4937      	ldr	r1, [pc, #220]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01d      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003330:	4b32      	ldr	r3, [pc, #200]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003336:	0e1b      	lsrs	r3, r3, #24
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800333e:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003344:	0f1b      	lsrs	r3, r3, #28
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	019a      	lsls	r2, r3, #6
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	041b      	lsls	r3, r3, #16
 8003358:	431a      	orrs	r2, r3
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	061b      	lsls	r3, r3, #24
 800335e:	431a      	orrs	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	071b      	lsls	r3, r3, #28
 8003364:	4925      	ldr	r1, [pc, #148]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d011      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	019a      	lsls	r2, r3, #6
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	431a      	orrs	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	061b      	lsls	r3, r3, #24
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	071b      	lsls	r3, r3, #28
 8003394:	4919      	ldr	r1, [pc, #100]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800339c:	4b17      	ldr	r3, [pc, #92]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a16      	ldr	r2, [pc, #88]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a8:	f7fe fd50 	bl	8001e4c <HAL_GetTick>
 80033ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033b0:	f7fe fd4c 	bl	8001e4c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e0d7      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80033c2:	4b0e      	ldr	r3, [pc, #56]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	f040 80cd 	bne.w	8003570 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80033d6:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a08      	ldr	r2, [pc, #32]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033e2:	f7fe fd33 	bl	8001e4c <HAL_GetTick>
 80033e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80033e8:	e00a      	b.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033ea:	f7fe fd2f 	bl	8001e4c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	; 0x64
 80033f6:	d903      	bls.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e0ba      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80033fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003400:	4b5e      	ldr	r3, [pc, #376]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003408:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800340c:	d0ed      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d009      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02e      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	2b00      	cmp	r3, #0
 8003434:	d12a      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003436:	4b51      	ldr	r3, [pc, #324]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003444:	4b4d      	ldr	r3, [pc, #308]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	0f1b      	lsrs	r3, r3, #28
 800344c:	f003 0307 	and.w	r3, r3, #7
 8003450:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	019a      	lsls	r2, r3, #6
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	041b      	lsls	r3, r3, #16
 800345c:	431a      	orrs	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	061b      	lsls	r3, r3, #24
 8003464:	431a      	orrs	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	071b      	lsls	r3, r3, #28
 800346a:	4944      	ldr	r1, [pc, #272]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003472:	4b42      	ldr	r3, [pc, #264]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003478:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003480:	3b01      	subs	r3, #1
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	493d      	ldr	r1, [pc, #244]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003486:	4313      	orrs	r3, r2
 8003488:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d022      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800349c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034a0:	d11d      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034a2:	4b36      	ldr	r3, [pc, #216]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a8:	0e1b      	lsrs	r3, r3, #24
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034b0:	4b32      	ldr	r3, [pc, #200]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b6:	0f1b      	lsrs	r3, r3, #28
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	019a      	lsls	r2, r3, #6
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	041b      	lsls	r3, r3, #16
 80034ca:	431a      	orrs	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	061b      	lsls	r3, r3, #24
 80034d0:	431a      	orrs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	071b      	lsls	r3, r3, #28
 80034d6:	4929      	ldr	r1, [pc, #164]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d028      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80034ea:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	0e1b      	lsrs	r3, r3, #24
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034f8:	4b20      	ldr	r3, [pc, #128]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	019a      	lsls	r2, r3, #6
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	041b      	lsls	r3, r3, #16
 8003510:	431a      	orrs	r2, r3
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	061b      	lsls	r3, r3, #24
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	69db      	ldr	r3, [r3, #28]
 800351c:	071b      	lsls	r3, r3, #28
 800351e:	4917      	ldr	r1, [pc, #92]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003526:	4b15      	ldr	r3, [pc, #84]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800352c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	4911      	ldr	r1, [pc, #68]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800353c:	4b0f      	ldr	r3, [pc, #60]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a0e      	ldr	r2, [pc, #56]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003548:	f7fe fc80 	bl	8001e4c <HAL_GetTick>
 800354c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003550:	f7fe fc7c 	bl	8001e4c <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b64      	cmp	r3, #100	; 0x64
 800355c:	d901      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e007      	b.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800356a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800356e:	d1ef      	bne.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3720      	adds	r7, #32
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800

08003580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e01d      	b.n	80035ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7fe fb06 	bl	8001bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f000 fbe8 	bl	8003d94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2202      	movs	r2, #2
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	4b0e      	ldr	r3, [pc, #56]	; (8003628 <HAL_TIM_Base_Start+0x50>)
 80035f0:	4013      	ands	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b06      	cmp	r3, #6
 80035f8:	d00b      	beq.n	8003612 <HAL_TIM_Base_Start+0x3a>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003600:	d007      	beq.n	8003612 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3714      	adds	r7, #20
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	00010007 	.word	0x00010007

0800362c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0201 	orr.w	r2, r2, #1
 8003642:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	4b0c      	ldr	r3, [pc, #48]	; (800367c <HAL_TIM_Base_Start_IT+0x50>)
 800364c:	4013      	ands	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b06      	cmp	r3, #6
 8003654:	d00b      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x42>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d007      	beq.n	800366e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f042 0201 	orr.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3714      	adds	r7, #20
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	00010007 	.word	0x00010007

08003680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e01d      	b.n	80036ce <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe faba 	bl	8001c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 fb68 	bl	8003d94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3708      	adds	r7, #8
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2201      	movs	r2, #1
 80036e8:	6839      	ldr	r1, [r7, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 feea 	bl	80044c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <HAL_TIM_PWM_Start+0x7c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIM_PWM_Start+0x2c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_TIM_PWM_Start+0x80>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_TIM_PWM_Start+0x30>
 8003704:	2301      	movs	r3, #1
 8003706:	e000      	b.n	800370a <HAL_TIM_PWM_Start+0x32>
 8003708:	2300      	movs	r3, #0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d007      	beq.n	800371e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800371c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	4b0d      	ldr	r3, [pc, #52]	; (800375c <HAL_TIM_PWM_Start+0x84>)
 8003726:	4013      	ands	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b06      	cmp	r3, #6
 800372e:	d00b      	beq.n	8003748 <HAL_TIM_PWM_Start+0x70>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003736:	d007      	beq.n	8003748 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40010000 	.word	0x40010000
 8003758:	40010400 	.word	0x40010400
 800375c:	00010007 	.word	0x00010007

08003760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b02      	cmp	r3, #2
 8003774:	d122      	bne.n	80037bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d11b      	bne.n	80037bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0202 	mvn.w	r2, #2
 800378c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	f003 0303 	and.w	r3, r3, #3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 fad8 	bl	8003d58 <HAL_TIM_IC_CaptureCallback>
 80037a8:	e005      	b.n	80037b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 faca 	bl	8003d44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fadb 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691b      	ldr	r3, [r3, #16]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b04      	cmp	r3, #4
 80037c8:	d122      	bne.n	8003810 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b04      	cmp	r3, #4
 80037d6:	d11b      	bne.n	8003810 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f06f 0204 	mvn.w	r2, #4
 80037e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2202      	movs	r2, #2
 80037e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 faae 	bl	8003d58 <HAL_TIM_IC_CaptureCallback>
 80037fc:	e005      	b.n	800380a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 faa0 	bl	8003d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fab1 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b08      	cmp	r3, #8
 800381c:	d122      	bne.n	8003864 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0308 	and.w	r3, r3, #8
 8003828:	2b08      	cmp	r3, #8
 800382a:	d11b      	bne.n	8003864 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0208 	mvn.w	r2, #8
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa84 	bl	8003d58 <HAL_TIM_IC_CaptureCallback>
 8003850:	e005      	b.n	800385e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fa76 	bl	8003d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 fa87 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b10      	cmp	r3, #16
 8003870:	d122      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f003 0310 	and.w	r3, r3, #16
 800387c:	2b10      	cmp	r3, #16
 800387e:	d11b      	bne.n	80038b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0210 	mvn.w	r2, #16
 8003888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2208      	movs	r2, #8
 800388e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69db      	ldr	r3, [r3, #28]
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 fa5a 	bl	8003d58 <HAL_TIM_IC_CaptureCallback>
 80038a4:	e005      	b.n	80038b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 fa4c 	bl	8003d44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fa5d 	bl	8003d6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d10e      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d107      	bne.n	80038e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0201 	mvn.w	r2, #1
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd ff7e 	bl	80017e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ee:	2b80      	cmp	r3, #128	; 0x80
 80038f0:	d10e      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fc:	2b80      	cmp	r3, #128	; 0x80
 80038fe:	d107      	bne.n	8003910 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fe66 	bl	80045dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800391e:	d10e      	bne.n	800393e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	2b80      	cmp	r3, #128	; 0x80
 800392c:	d107      	bne.n	800393e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fe59 	bl	80045f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d10e      	bne.n	800396a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d107      	bne.n	800396a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fa0b 	bl	8003d80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b20      	cmp	r3, #32
 8003976:	d10e      	bne.n	8003996 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f003 0320 	and.w	r3, r3, #32
 8003982:	2b20      	cmp	r3, #32
 8003984:	d107      	bne.n	8003996 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f06f 0220 	mvn.w	r2, #32
 800398e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f000 fe19 	bl	80045c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e105      	b.n	8003bc6 <HAL_TIM_PWM_ConfigChannel+0x226>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2202      	movs	r2, #2
 80039c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b14      	cmp	r3, #20
 80039ce:	f200 80f0 	bhi.w	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x212>
 80039d2:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80039d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d8:	08003a2d 	.word	0x08003a2d
 80039dc:	08003bb3 	.word	0x08003bb3
 80039e0:	08003bb3 	.word	0x08003bb3
 80039e4:	08003bb3 	.word	0x08003bb3
 80039e8:	08003a6d 	.word	0x08003a6d
 80039ec:	08003bb3 	.word	0x08003bb3
 80039f0:	08003bb3 	.word	0x08003bb3
 80039f4:	08003bb3 	.word	0x08003bb3
 80039f8:	08003aaf 	.word	0x08003aaf
 80039fc:	08003bb3 	.word	0x08003bb3
 8003a00:	08003bb3 	.word	0x08003bb3
 8003a04:	08003bb3 	.word	0x08003bb3
 8003a08:	08003aef 	.word	0x08003aef
 8003a0c:	08003bb3 	.word	0x08003bb3
 8003a10:	08003bb3 	.word	0x08003bb3
 8003a14:	08003bb3 	.word	0x08003bb3
 8003a18:	08003b31 	.word	0x08003b31
 8003a1c:	08003bb3 	.word	0x08003bb3
 8003a20:	08003bb3 	.word	0x08003bb3
 8003a24:	08003bb3 	.word	0x08003bb3
 8003a28:	08003b71 	.word	0x08003b71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68b9      	ldr	r1, [r7, #8]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fa4e 	bl	8003ed4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0208 	orr.w	r2, r2, #8
 8003a46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	699a      	ldr	r2, [r3, #24]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0204 	bic.w	r2, r2, #4
 8003a56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	6999      	ldr	r1, [r3, #24]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	691a      	ldr	r2, [r3, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	619a      	str	r2, [r3, #24]
      break;
 8003a6a:	e0a3      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68b9      	ldr	r1, [r7, #8]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f000 faa0 	bl	8003fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699a      	ldr	r2, [r3, #24]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6999      	ldr	r1, [r3, #24]
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	021a      	lsls	r2, r3, #8
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	619a      	str	r2, [r3, #24]
      break;
 8003aac:	e082      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68b9      	ldr	r1, [r7, #8]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 faf7 	bl	80040a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	69da      	ldr	r2, [r3, #28]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f042 0208 	orr.w	r2, r2, #8
 8003ac8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0204 	bic.w	r2, r2, #4
 8003ad8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	69d9      	ldr	r1, [r3, #28]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	691a      	ldr	r2, [r3, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	61da      	str	r2, [r3, #28]
      break;
 8003aec:	e062      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68b9      	ldr	r1, [r7, #8]
 8003af4:	4618      	mov	r0, r3
 8003af6:	f000 fb4d 	bl	8004194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69da      	ldr	r2, [r3, #28]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69d9      	ldr	r1, [r3, #28]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	021a      	lsls	r2, r3, #8
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	61da      	str	r2, [r3, #28]
      break;
 8003b2e:	e041      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68b9      	ldr	r1, [r7, #8]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fb84 	bl	8004244 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f042 0208 	orr.w	r2, r2, #8
 8003b4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0204 	bic.w	r2, r2, #4
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b6e:	e021      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68b9      	ldr	r1, [r7, #8]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fbb6 	bl	80042e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8003bb2:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop

08003bd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_ConfigClockSource+0x18>
 8003be4:	2302      	movs	r3, #2
 8003be6:	e0a6      	b.n	8003d36 <HAL_TIM_ConfigClockSource+0x166>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4b4f      	ldr	r3, [pc, #316]	; (8003d40 <HAL_TIM_ConfigClockSource+0x170>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d067      	beq.n	8003cf0 <HAL_TIM_ConfigClockSource+0x120>
 8003c20:	2b40      	cmp	r3, #64	; 0x40
 8003c22:	d80b      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x6c>
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d073      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x140>
 8003c28:	2b10      	cmp	r3, #16
 8003c2a:	d802      	bhi.n	8003c32 <HAL_TIM_ConfigClockSource+0x62>
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d06f      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003c30:	e078      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d06c      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x140>
 8003c36:	2b30      	cmp	r3, #48	; 0x30
 8003c38:	d06a      	beq.n	8003d10 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c3a:	e073      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c3c:	2b70      	cmp	r3, #112	; 0x70
 8003c3e:	d00d      	beq.n	8003c5c <HAL_TIM_ConfigClockSource+0x8c>
 8003c40:	2b70      	cmp	r3, #112	; 0x70
 8003c42:	d804      	bhi.n	8003c4e <HAL_TIM_ConfigClockSource+0x7e>
 8003c44:	2b50      	cmp	r3, #80	; 0x50
 8003c46:	d033      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0xe0>
 8003c48:	2b60      	cmp	r3, #96	; 0x60
 8003c4a:	d041      	beq.n	8003cd0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c4c:	e06a      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c52:	d066      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0x152>
 8003c54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c58:	d017      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c5a:	e063      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6818      	ldr	r0, [r3, #0]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	6899      	ldr	r1, [r3, #8]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f000 fc0a 	bl	8004484 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	609a      	str	r2, [r3, #8]
      break;
 8003c88:	e04c      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6899      	ldr	r1, [r3, #8]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	f000 fbf3 	bl	8004484 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cac:	609a      	str	r2, [r3, #8]
      break;
 8003cae:	e039      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f000 fb67 	bl	8004390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2150      	movs	r1, #80	; 0x50
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fbc0 	bl	800444e <TIM_ITRx_SetConfig>
      break;
 8003cce:	e029      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f000 fb86 	bl	80043ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2160      	movs	r1, #96	; 0x60
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fbb0 	bl	800444e <TIM_ITRx_SetConfig>
      break;
 8003cee:	e019      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6818      	ldr	r0, [r3, #0]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	6859      	ldr	r1, [r3, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f000 fb47 	bl	8004390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2140      	movs	r1, #64	; 0x40
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fba0 	bl	800444e <TIM_ITRx_SetConfig>
      break;
 8003d0e:	e009      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f000 fb97 	bl	800444e <TIM_ITRx_SetConfig>
      break;
 8003d20:	e000      	b.n	8003d24 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	fffeff88 	.word	0xfffeff88

08003d44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a40      	ldr	r2, [pc, #256]	; (8003ea8 <TIM_Base_SetConfig+0x114>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d013      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db2:	d00f      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a3d      	ldr	r2, [pc, #244]	; (8003eac <TIM_Base_SetConfig+0x118>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00b      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a3c      	ldr	r2, [pc, #240]	; (8003eb0 <TIM_Base_SetConfig+0x11c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a3b      	ldr	r2, [pc, #236]	; (8003eb4 <TIM_Base_SetConfig+0x120>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_Base_SetConfig+0x40>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a3a      	ldr	r2, [pc, #232]	; (8003eb8 <TIM_Base_SetConfig+0x124>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a2f      	ldr	r2, [pc, #188]	; (8003ea8 <TIM_Base_SetConfig+0x114>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d02b      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df4:	d027      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <TIM_Base_SetConfig+0x118>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d023      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a2b      	ldr	r2, [pc, #172]	; (8003eb0 <TIM_Base_SetConfig+0x11c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d01f      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <TIM_Base_SetConfig+0x120>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01b      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a29      	ldr	r2, [pc, #164]	; (8003eb8 <TIM_Base_SetConfig+0x124>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d017      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a28      	ldr	r2, [pc, #160]	; (8003ebc <TIM_Base_SetConfig+0x128>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a27      	ldr	r2, [pc, #156]	; (8003ec0 <TIM_Base_SetConfig+0x12c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00f      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a26      	ldr	r2, [pc, #152]	; (8003ec4 <TIM_Base_SetConfig+0x130>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00b      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a25      	ldr	r2, [pc, #148]	; (8003ec8 <TIM_Base_SetConfig+0x134>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d007      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a24      	ldr	r2, [pc, #144]	; (8003ecc <TIM_Base_SetConfig+0x138>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d003      	beq.n	8003e46 <TIM_Base_SetConfig+0xb2>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <TIM_Base_SetConfig+0x13c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d108      	bne.n	8003e58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	689a      	ldr	r2, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ea8 <TIM_Base_SetConfig+0x114>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d003      	beq.n	8003e8c <TIM_Base_SetConfig+0xf8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a0c      	ldr	r2, [pc, #48]	; (8003eb8 <TIM_Base_SetConfig+0x124>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d103      	bne.n	8003e94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	615a      	str	r2, [r3, #20]
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	40000c00 	.word	0x40000c00
 8003eb8:	40010400 	.word	0x40010400
 8003ebc:	40014000 	.word	0x40014000
 8003ec0:	40014400 	.word	0x40014400
 8003ec4:	40014800 	.word	0x40014800
 8003ec8:	40001800 	.word	0x40001800
 8003ecc:	40001c00 	.word	0x40001c00
 8003ed0:	40002000 	.word	0x40002000

08003ed4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	f023 0201 	bic.w	r2, r3, #1
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003efc:	68fa      	ldr	r2, [r7, #12]
 8003efe:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <TIM_OC1_SetConfig+0xd8>)
 8003f00:	4013      	ands	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f023 0302 	bic.w	r3, r3, #2
 8003f1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a21      	ldr	r2, [pc, #132]	; (8003fb0 <TIM_OC1_SetConfig+0xdc>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC1_SetConfig+0x64>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a20      	ldr	r2, [pc, #128]	; (8003fb4 <TIM_OC1_SetConfig+0xe0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10c      	bne.n	8003f52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0308 	bic.w	r3, r3, #8
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f023 0304 	bic.w	r3, r3, #4
 8003f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a16      	ldr	r2, [pc, #88]	; (8003fb0 <TIM_OC1_SetConfig+0xdc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_OC1_SetConfig+0x8e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <TIM_OC1_SetConfig+0xe0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d111      	bne.n	8003f86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	693a      	ldr	r2, [r7, #16]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68fa      	ldr	r2, [r7, #12]
 8003f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	621a      	str	r2, [r3, #32]
}
 8003fa0:	bf00      	nop
 8003fa2:	371c      	adds	r7, #28
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	fffeff8f 	.word	0xfffeff8f
 8003fb0:	40010000 	.word	0x40010000
 8003fb4:	40010400 	.word	0x40010400

08003fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b087      	sub	sp, #28
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a1b      	ldr	r3, [r3, #32]
 8003fc6:	f023 0210 	bic.w	r2, r3, #16
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <TIM_OC2_SetConfig+0xe4>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	021b      	lsls	r3, r3, #8
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f023 0320 	bic.w	r3, r3, #32
 8004002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	011b      	lsls	r3, r3, #4
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4313      	orrs	r3, r2
 800400e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <TIM_OC2_SetConfig+0xe8>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d003      	beq.n	8004020 <TIM_OC2_SetConfig+0x68>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a22      	ldr	r2, [pc, #136]	; (80040a4 <TIM_OC2_SetConfig+0xec>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10d      	bne.n	800403c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	011b      	lsls	r3, r3, #4
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800403a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a18      	ldr	r2, [pc, #96]	; (80040a0 <TIM_OC2_SetConfig+0xe8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_OC2_SetConfig+0x94>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <TIM_OC2_SetConfig+0xec>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d113      	bne.n	8004074 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800405a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	693a      	ldr	r2, [r7, #16]
 8004064:	4313      	orrs	r3, r2
 8004066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	621a      	str	r2, [r3, #32]
}
 800408e:	bf00      	nop
 8004090:	371c      	adds	r7, #28
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	feff8fff 	.word	0xfeff8fff
 80040a0:	40010000 	.word	0x40010000
 80040a4:	40010400 	.word	0x40010400

080040a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69db      	ldr	r3, [r3, #28]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <TIM_OC3_SetConfig+0xe0>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	021b      	lsls	r3, r3, #8
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <TIM_OC3_SetConfig+0xe4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d003      	beq.n	800410e <TIM_OC3_SetConfig+0x66>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a21      	ldr	r2, [pc, #132]	; (8004190 <TIM_OC3_SetConfig+0xe8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10d      	bne.n	800412a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004114:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	021b      	lsls	r3, r3, #8
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	4313      	orrs	r3, r2
 8004120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a17      	ldr	r2, [pc, #92]	; (800418c <TIM_OC3_SetConfig+0xe4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <TIM_OC3_SetConfig+0x92>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a16      	ldr	r2, [pc, #88]	; (8004190 <TIM_OC3_SetConfig+0xe8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d113      	bne.n	8004162 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	011b      	lsls	r3, r3, #4
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	4313      	orrs	r3, r2
 8004160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	697a      	ldr	r2, [r7, #20]
 800417a:	621a      	str	r2, [r3, #32]
}
 800417c:	bf00      	nop
 800417e:	371c      	adds	r7, #28
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	fffeff8f 	.word	0xfffeff8f
 800418c:	40010000 	.word	0x40010000
 8004190:	40010400 	.word	0x40010400

08004194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004194:	b480      	push	{r7}
 8004196:	b087      	sub	sp, #28
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <TIM_OC4_SetConfig+0xa4>)
 80041c0:	4013      	ands	r3, r2
 80041c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	021b      	lsls	r3, r3, #8
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	031b      	lsls	r3, r3, #12
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a13      	ldr	r2, [pc, #76]	; (800423c <TIM_OC4_SetConfig+0xa8>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_OC4_SetConfig+0x68>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <TIM_OC4_SetConfig+0xac>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d109      	bne.n	8004210 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004202:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	695b      	ldr	r3, [r3, #20]
 8004208:	019b      	lsls	r3, r3, #6
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	693a      	ldr	r2, [r7, #16]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	feff8fff 	.word	0xfeff8fff
 800423c:	40010000 	.word	0x40010000
 8004240:	40010400 	.word	0x40010400

08004244 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
 800425e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <TIM_OC5_SetConfig+0x98>)
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004284:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	4313      	orrs	r3, r2
 8004290:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a12      	ldr	r2, [pc, #72]	; (80042e0 <TIM_OC5_SetConfig+0x9c>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_OC5_SetConfig+0x5e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <TIM_OC5_SetConfig+0xa0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d109      	bne.n	80042b6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	021b      	lsls	r3, r3, #8
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	621a      	str	r2, [r3, #32]
}
 80042d0:	bf00      	nop
 80042d2:	371c      	adds	r7, #28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	fffeff8f 	.word	0xfffeff8f
 80042e0:	40010000 	.word	0x40010000
 80042e4:	40010400 	.word	0x40010400

080042e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4b1c      	ldr	r3, [pc, #112]	; (8004384 <TIM_OC6_SetConfig+0x9c>)
 8004314:	4013      	ands	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800432a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	051b      	lsls	r3, r3, #20
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a13      	ldr	r2, [pc, #76]	; (8004388 <TIM_OC6_SetConfig+0xa0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d003      	beq.n	8004348 <TIM_OC6_SetConfig+0x60>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a12      	ldr	r2, [pc, #72]	; (800438c <TIM_OC6_SetConfig+0xa4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d109      	bne.n	800435c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	029b      	lsls	r3, r3, #10
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	621a      	str	r2, [r3, #32]
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	feff8fff 	.word	0xfeff8fff
 8004388:	40010000 	.word	0x40010000
 800438c:	40010400 	.word	0x40010400

08004390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a1b      	ldr	r3, [r3, #32]
 80043a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f023 0201 	bic.w	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	f023 030a 	bic.w	r3, r3, #10
 80043cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b087      	sub	sp, #28
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	f023 0210 	bic.w	r2, r3, #16
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004418:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	031b      	lsls	r3, r3, #12
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800442a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	693a      	ldr	r2, [r7, #16]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr

0800444e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
 8004456:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004464:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4313      	orrs	r3, r2
 800446c:	f043 0307 	orr.w	r3, r3, #7
 8004470:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	609a      	str	r2, [r3, #8]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
 8004490:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800449e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	021a      	lsls	r2, r3, #8
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	431a      	orrs	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	609a      	str	r2, [r3, #8]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b087      	sub	sp, #28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	60b9      	str	r1, [r7, #8]
 80044ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 031f 	and.w	r3, r3, #31
 80044d6:	2201      	movs	r2, #1
 80044d8:	fa02 f303 	lsl.w	r3, r2, r3
 80044dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a1a      	ldr	r2, [r3, #32]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	401a      	ands	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1a      	ldr	r2, [r3, #32]
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 031f 	and.w	r3, r3, #31
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	621a      	str	r2, [r3, #32]
}
 8004502:	bf00      	nop
 8004504:	371c      	adds	r7, #28
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004524:	2302      	movs	r3, #2
 8004526:	e045      	b.n	80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1c      	ldr	r2, [pc, #112]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004562:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004574:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4313      	orrs	r3, r2
 800457e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004586:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	40010000 	.word	0x40010000
 80045c4:	40010400 	.word	0x40010400

080045c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e040      	b.n	8004698 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800461a:	2b00      	cmp	r3, #0
 800461c:	d106      	bne.n	800462c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7fd fb82 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2224      	movs	r2, #36	; 0x24
 8004630:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 0201 	bic.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f82c 	bl	80046a0 <UART_SetConfig>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e022      	b.n	8004698 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	d002      	beq.n	8004660 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 fac4 	bl	8004be8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800466e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800467e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0201 	orr.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fb4b 	bl	8004d2c <UART_CheckIdleState>
 8004696:	4603      	mov	r3, r0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ac:	2300      	movs	r3, #0
 80046ae:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689a      	ldr	r2, [r3, #8]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	69db      	ldr	r3, [r3, #28]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	4bb1      	ldr	r3, [pc, #708]	; (8004994 <UART_SetConfig+0x2f4>)
 80046d0:	4013      	ands	r3, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6812      	ldr	r2, [r2, #0]
 80046d6:	6939      	ldr	r1, [r7, #16]
 80046d8:	430b      	orrs	r3, r1
 80046da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	430a      	orrs	r2, r1
 80046f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	430a      	orrs	r2, r1
 8004714:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a9f      	ldr	r2, [pc, #636]	; (8004998 <UART_SetConfig+0x2f8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d121      	bne.n	8004764 <UART_SetConfig+0xc4>
 8004720:	4b9e      	ldr	r3, [pc, #632]	; (800499c <UART_SetConfig+0x2fc>)
 8004722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	2b03      	cmp	r3, #3
 800472c:	d816      	bhi.n	800475c <UART_SetConfig+0xbc>
 800472e:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <UART_SetConfig+0x94>)
 8004730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004734:	08004745 	.word	0x08004745
 8004738:	08004751 	.word	0x08004751
 800473c:	0800474b 	.word	0x0800474b
 8004740:	08004757 	.word	0x08004757
 8004744:	2301      	movs	r3, #1
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e151      	b.n	80049ee <UART_SetConfig+0x34e>
 800474a:	2302      	movs	r3, #2
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e14e      	b.n	80049ee <UART_SetConfig+0x34e>
 8004750:	2304      	movs	r3, #4
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e14b      	b.n	80049ee <UART_SetConfig+0x34e>
 8004756:	2308      	movs	r3, #8
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e148      	b.n	80049ee <UART_SetConfig+0x34e>
 800475c:	2310      	movs	r3, #16
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	bf00      	nop
 8004762:	e144      	b.n	80049ee <UART_SetConfig+0x34e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a8d      	ldr	r2, [pc, #564]	; (80049a0 <UART_SetConfig+0x300>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d134      	bne.n	80047d8 <UART_SetConfig+0x138>
 800476e:	4b8b      	ldr	r3, [pc, #556]	; (800499c <UART_SetConfig+0x2fc>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f003 030c 	and.w	r3, r3, #12
 8004778:	2b0c      	cmp	r3, #12
 800477a:	d829      	bhi.n	80047d0 <UART_SetConfig+0x130>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <UART_SetConfig+0xe4>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047b9 	.word	0x080047b9
 8004788:	080047d1 	.word	0x080047d1
 800478c:	080047d1 	.word	0x080047d1
 8004790:	080047d1 	.word	0x080047d1
 8004794:	080047c5 	.word	0x080047c5
 8004798:	080047d1 	.word	0x080047d1
 800479c:	080047d1 	.word	0x080047d1
 80047a0:	080047d1 	.word	0x080047d1
 80047a4:	080047bf 	.word	0x080047bf
 80047a8:	080047d1 	.word	0x080047d1
 80047ac:	080047d1 	.word	0x080047d1
 80047b0:	080047d1 	.word	0x080047d1
 80047b4:	080047cb 	.word	0x080047cb
 80047b8:	2300      	movs	r3, #0
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e117      	b.n	80049ee <UART_SetConfig+0x34e>
 80047be:	2302      	movs	r3, #2
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e114      	b.n	80049ee <UART_SetConfig+0x34e>
 80047c4:	2304      	movs	r3, #4
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e111      	b.n	80049ee <UART_SetConfig+0x34e>
 80047ca:	2308      	movs	r3, #8
 80047cc:	77fb      	strb	r3, [r7, #31]
 80047ce:	e10e      	b.n	80049ee <UART_SetConfig+0x34e>
 80047d0:	2310      	movs	r3, #16
 80047d2:	77fb      	strb	r3, [r7, #31]
 80047d4:	bf00      	nop
 80047d6:	e10a      	b.n	80049ee <UART_SetConfig+0x34e>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a71      	ldr	r2, [pc, #452]	; (80049a4 <UART_SetConfig+0x304>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d120      	bne.n	8004824 <UART_SetConfig+0x184>
 80047e2:	4b6e      	ldr	r3, [pc, #440]	; (800499c <UART_SetConfig+0x2fc>)
 80047e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047ec:	2b10      	cmp	r3, #16
 80047ee:	d00f      	beq.n	8004810 <UART_SetConfig+0x170>
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d802      	bhi.n	80047fa <UART_SetConfig+0x15a>
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <UART_SetConfig+0x164>
 80047f8:	e010      	b.n	800481c <UART_SetConfig+0x17c>
 80047fa:	2b20      	cmp	r3, #32
 80047fc:	d005      	beq.n	800480a <UART_SetConfig+0x16a>
 80047fe:	2b30      	cmp	r3, #48	; 0x30
 8004800:	d009      	beq.n	8004816 <UART_SetConfig+0x176>
 8004802:	e00b      	b.n	800481c <UART_SetConfig+0x17c>
 8004804:	2300      	movs	r3, #0
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e0f1      	b.n	80049ee <UART_SetConfig+0x34e>
 800480a:	2302      	movs	r3, #2
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e0ee      	b.n	80049ee <UART_SetConfig+0x34e>
 8004810:	2304      	movs	r3, #4
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e0eb      	b.n	80049ee <UART_SetConfig+0x34e>
 8004816:	2308      	movs	r3, #8
 8004818:	77fb      	strb	r3, [r7, #31]
 800481a:	e0e8      	b.n	80049ee <UART_SetConfig+0x34e>
 800481c:	2310      	movs	r3, #16
 800481e:	77fb      	strb	r3, [r7, #31]
 8004820:	bf00      	nop
 8004822:	e0e4      	b.n	80049ee <UART_SetConfig+0x34e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a5f      	ldr	r2, [pc, #380]	; (80049a8 <UART_SetConfig+0x308>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d120      	bne.n	8004870 <UART_SetConfig+0x1d0>
 800482e:	4b5b      	ldr	r3, [pc, #364]	; (800499c <UART_SetConfig+0x2fc>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004834:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004838:	2b40      	cmp	r3, #64	; 0x40
 800483a:	d00f      	beq.n	800485c <UART_SetConfig+0x1bc>
 800483c:	2b40      	cmp	r3, #64	; 0x40
 800483e:	d802      	bhi.n	8004846 <UART_SetConfig+0x1a6>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <UART_SetConfig+0x1b0>
 8004844:	e010      	b.n	8004868 <UART_SetConfig+0x1c8>
 8004846:	2b80      	cmp	r3, #128	; 0x80
 8004848:	d005      	beq.n	8004856 <UART_SetConfig+0x1b6>
 800484a:	2bc0      	cmp	r3, #192	; 0xc0
 800484c:	d009      	beq.n	8004862 <UART_SetConfig+0x1c2>
 800484e:	e00b      	b.n	8004868 <UART_SetConfig+0x1c8>
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e0cb      	b.n	80049ee <UART_SetConfig+0x34e>
 8004856:	2302      	movs	r3, #2
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e0c8      	b.n	80049ee <UART_SetConfig+0x34e>
 800485c:	2304      	movs	r3, #4
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0c5      	b.n	80049ee <UART_SetConfig+0x34e>
 8004862:	2308      	movs	r3, #8
 8004864:	77fb      	strb	r3, [r7, #31]
 8004866:	e0c2      	b.n	80049ee <UART_SetConfig+0x34e>
 8004868:	2310      	movs	r3, #16
 800486a:	77fb      	strb	r3, [r7, #31]
 800486c:	bf00      	nop
 800486e:	e0be      	b.n	80049ee <UART_SetConfig+0x34e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a4d      	ldr	r2, [pc, #308]	; (80049ac <UART_SetConfig+0x30c>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d124      	bne.n	80048c4 <UART_SetConfig+0x224>
 800487a:	4b48      	ldr	r3, [pc, #288]	; (800499c <UART_SetConfig+0x2fc>)
 800487c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004880:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004888:	d012      	beq.n	80048b0 <UART_SetConfig+0x210>
 800488a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488e:	d802      	bhi.n	8004896 <UART_SetConfig+0x1f6>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d007      	beq.n	80048a4 <UART_SetConfig+0x204>
 8004894:	e012      	b.n	80048bc <UART_SetConfig+0x21c>
 8004896:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800489a:	d006      	beq.n	80048aa <UART_SetConfig+0x20a>
 800489c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048a0:	d009      	beq.n	80048b6 <UART_SetConfig+0x216>
 80048a2:	e00b      	b.n	80048bc <UART_SetConfig+0x21c>
 80048a4:	2300      	movs	r3, #0
 80048a6:	77fb      	strb	r3, [r7, #31]
 80048a8:	e0a1      	b.n	80049ee <UART_SetConfig+0x34e>
 80048aa:	2302      	movs	r3, #2
 80048ac:	77fb      	strb	r3, [r7, #31]
 80048ae:	e09e      	b.n	80049ee <UART_SetConfig+0x34e>
 80048b0:	2304      	movs	r3, #4
 80048b2:	77fb      	strb	r3, [r7, #31]
 80048b4:	e09b      	b.n	80049ee <UART_SetConfig+0x34e>
 80048b6:	2308      	movs	r3, #8
 80048b8:	77fb      	strb	r3, [r7, #31]
 80048ba:	e098      	b.n	80049ee <UART_SetConfig+0x34e>
 80048bc:	2310      	movs	r3, #16
 80048be:	77fb      	strb	r3, [r7, #31]
 80048c0:	bf00      	nop
 80048c2:	e094      	b.n	80049ee <UART_SetConfig+0x34e>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a39      	ldr	r2, [pc, #228]	; (80049b0 <UART_SetConfig+0x310>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d124      	bne.n	8004918 <UART_SetConfig+0x278>
 80048ce:	4b33      	ldr	r3, [pc, #204]	; (800499c <UART_SetConfig+0x2fc>)
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048dc:	d012      	beq.n	8004904 <UART_SetConfig+0x264>
 80048de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e2:	d802      	bhi.n	80048ea <UART_SetConfig+0x24a>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d007      	beq.n	80048f8 <UART_SetConfig+0x258>
 80048e8:	e012      	b.n	8004910 <UART_SetConfig+0x270>
 80048ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ee:	d006      	beq.n	80048fe <UART_SetConfig+0x25e>
 80048f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048f4:	d009      	beq.n	800490a <UART_SetConfig+0x26a>
 80048f6:	e00b      	b.n	8004910 <UART_SetConfig+0x270>
 80048f8:	2301      	movs	r3, #1
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e077      	b.n	80049ee <UART_SetConfig+0x34e>
 80048fe:	2302      	movs	r3, #2
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e074      	b.n	80049ee <UART_SetConfig+0x34e>
 8004904:	2304      	movs	r3, #4
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e071      	b.n	80049ee <UART_SetConfig+0x34e>
 800490a:	2308      	movs	r3, #8
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e06e      	b.n	80049ee <UART_SetConfig+0x34e>
 8004910:	2310      	movs	r3, #16
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	bf00      	nop
 8004916:	e06a      	b.n	80049ee <UART_SetConfig+0x34e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <UART_SetConfig+0x314>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d124      	bne.n	800496c <UART_SetConfig+0x2cc>
 8004922:	4b1e      	ldr	r3, [pc, #120]	; (800499c <UART_SetConfig+0x2fc>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d012      	beq.n	8004958 <UART_SetConfig+0x2b8>
 8004932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004936:	d802      	bhi.n	800493e <UART_SetConfig+0x29e>
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <UART_SetConfig+0x2ac>
 800493c:	e012      	b.n	8004964 <UART_SetConfig+0x2c4>
 800493e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004942:	d006      	beq.n	8004952 <UART_SetConfig+0x2b2>
 8004944:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004948:	d009      	beq.n	800495e <UART_SetConfig+0x2be>
 800494a:	e00b      	b.n	8004964 <UART_SetConfig+0x2c4>
 800494c:	2300      	movs	r3, #0
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e04d      	b.n	80049ee <UART_SetConfig+0x34e>
 8004952:	2302      	movs	r3, #2
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e04a      	b.n	80049ee <UART_SetConfig+0x34e>
 8004958:	2304      	movs	r3, #4
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e047      	b.n	80049ee <UART_SetConfig+0x34e>
 800495e:	2308      	movs	r3, #8
 8004960:	77fb      	strb	r3, [r7, #31]
 8004962:	e044      	b.n	80049ee <UART_SetConfig+0x34e>
 8004964:	2310      	movs	r3, #16
 8004966:	77fb      	strb	r3, [r7, #31]
 8004968:	bf00      	nop
 800496a:	e040      	b.n	80049ee <UART_SetConfig+0x34e>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <UART_SetConfig+0x318>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d139      	bne.n	80049ea <UART_SetConfig+0x34a>
 8004976:	4b09      	ldr	r3, [pc, #36]	; (800499c <UART_SetConfig+0x2fc>)
 8004978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800497c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004984:	d027      	beq.n	80049d6 <UART_SetConfig+0x336>
 8004986:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800498a:	d817      	bhi.n	80049bc <UART_SetConfig+0x31c>
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01c      	beq.n	80049ca <UART_SetConfig+0x32a>
 8004990:	e027      	b.n	80049e2 <UART_SetConfig+0x342>
 8004992:	bf00      	nop
 8004994:	efff69f3 	.word	0xefff69f3
 8004998:	40011000 	.word	0x40011000
 800499c:	40023800 	.word	0x40023800
 80049a0:	40004400 	.word	0x40004400
 80049a4:	40004800 	.word	0x40004800
 80049a8:	40004c00 	.word	0x40004c00
 80049ac:	40005000 	.word	0x40005000
 80049b0:	40011400 	.word	0x40011400
 80049b4:	40007800 	.word	0x40007800
 80049b8:	40007c00 	.word	0x40007c00
 80049bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c0:	d006      	beq.n	80049d0 <UART_SetConfig+0x330>
 80049c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049c6:	d009      	beq.n	80049dc <UART_SetConfig+0x33c>
 80049c8:	e00b      	b.n	80049e2 <UART_SetConfig+0x342>
 80049ca:	2300      	movs	r3, #0
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e00e      	b.n	80049ee <UART_SetConfig+0x34e>
 80049d0:	2302      	movs	r3, #2
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e00b      	b.n	80049ee <UART_SetConfig+0x34e>
 80049d6:	2304      	movs	r3, #4
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e008      	b.n	80049ee <UART_SetConfig+0x34e>
 80049dc:	2308      	movs	r3, #8
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e005      	b.n	80049ee <UART_SetConfig+0x34e>
 80049e2:	2310      	movs	r3, #16
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	bf00      	nop
 80049e8:	e001      	b.n	80049ee <UART_SetConfig+0x34e>
 80049ea:	2310      	movs	r3, #16
 80049ec:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f6:	d17c      	bne.n	8004af2 <UART_SetConfig+0x452>
  {
    switch (clocksource)
 80049f8:	7ffb      	ldrb	r3, [r7, #31]
 80049fa:	2b08      	cmp	r3, #8
 80049fc:	d859      	bhi.n	8004ab2 <UART_SetConfig+0x412>
 80049fe:	a201      	add	r2, pc, #4	; (adr r2, 8004a04 <UART_SetConfig+0x364>)
 8004a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a04:	08004a29 	.word	0x08004a29
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a65 	.word	0x08004a65
 8004a10:	08004ab3 	.word	0x08004ab3
 8004a14:	08004a7d 	.word	0x08004a7d
 8004a18:	08004ab3 	.word	0x08004ab3
 8004a1c:	08004ab3 	.word	0x08004ab3
 8004a20:	08004ab3 	.word	0x08004ab3
 8004a24:	08004a9b 	.word	0x08004a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004a28:	f7fe f962 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	005a      	lsls	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	085b      	lsrs	r3, r3, #1
 8004a36:	441a      	add	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	61bb      	str	r3, [r7, #24]
        break;
 8004a44:	e038      	b.n	8004ab8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004a46:	f7fe f967 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	005a      	lsls	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	085b      	lsrs	r3, r3, #1
 8004a54:	441a      	add	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	61bb      	str	r3, [r7, #24]
        break;
 8004a62:	e029      	b.n	8004ab8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	085a      	lsrs	r2, r3, #1
 8004a6a:	4b5d      	ldr	r3, [pc, #372]	; (8004be0 <UART_SetConfig+0x540>)
 8004a6c:	4413      	add	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6852      	ldr	r2, [r2, #4]
 8004a72:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	61bb      	str	r3, [r7, #24]
        break;
 8004a7a:	e01d      	b.n	8004ab8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004a7c:	f7fe f854 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8004a80:	4603      	mov	r3, r0
 8004a82:	005a      	lsls	r2, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	085b      	lsrs	r3, r3, #1
 8004a8a:	441a      	add	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	61bb      	str	r3, [r7, #24]
        break;
 8004a98:	e00e      	b.n	8004ab8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	085b      	lsrs	r3, r3, #1
 8004aa0:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	61bb      	str	r3, [r7, #24]
        break;
 8004ab0:	e002      	b.n	8004ab8 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	75fb      	strb	r3, [r7, #23]
        break;
 8004ab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	2b0f      	cmp	r3, #15
 8004abc:	d916      	bls.n	8004aec <UART_SetConfig+0x44c>
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac4:	d212      	bcs.n	8004aec <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	f023 030f 	bic.w	r3, r3, #15
 8004ace:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	085b      	lsrs	r3, r3, #1
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f003 0307 	and.w	r3, r3, #7
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	89fb      	ldrh	r3, [r7, #14]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	89fa      	ldrh	r2, [r7, #14]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	e06e      	b.n	8004bca <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	75fb      	strb	r3, [r7, #23]
 8004af0:	e06b      	b.n	8004bca <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8004af2:	7ffb      	ldrb	r3, [r7, #31]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d857      	bhi.n	8004ba8 <UART_SetConfig+0x508>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <UART_SetConfig+0x460>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b41 	.word	0x08004b41
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004ba9 	.word	0x08004ba9
 8004b10:	08004b75 	.word	0x08004b75
 8004b14:	08004ba9 	.word	0x08004ba9
 8004b18:	08004ba9 	.word	0x08004ba9
 8004b1c:	08004ba9 	.word	0x08004ba9
 8004b20:	08004b91 	.word	0x08004b91
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8004b24:	f7fe f8e4 	bl	8002cf0 <HAL_RCC_GetPCLK1Freq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	085b      	lsrs	r3, r3, #1
 8004b30:	441a      	add	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	61bb      	str	r3, [r7, #24]
        break;
 8004b3e:	e036      	b.n	8004bae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8004b40:	f7fe f8ea 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
 8004b44:	4602      	mov	r2, r0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	441a      	add	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	61bb      	str	r3, [r7, #24]
        break;
 8004b5a:	e028      	b.n	8004bae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	085a      	lsrs	r2, r3, #1
 8004b62:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <UART_SetConfig+0x544>)
 8004b64:	4413      	add	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	6852      	ldr	r2, [r2, #4]
 8004b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	61bb      	str	r3, [r7, #24]
        break;
 8004b72:	e01c      	b.n	8004bae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8004b74:	f7fd ffd8 	bl	8002b28 <HAL_RCC_GetSysClockFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	085b      	lsrs	r3, r3, #1
 8004b80:	441a      	add	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	61bb      	str	r3, [r7, #24]
        break;
 8004b8e:	e00e      	b.n	8004bae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	085b      	lsrs	r3, r3, #1
 8004b96:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	61bb      	str	r3, [r7, #24]
        break;
 8004ba6:	e002      	b.n	8004bae <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	75fb      	strb	r3, [r7, #23]
        break;
 8004bac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	2b0f      	cmp	r3, #15
 8004bb2:	d908      	bls.n	8004bc6 <UART_SetConfig+0x526>
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bba:	d204      	bcs.n	8004bc6 <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	60da      	str	r2, [r3, #12]
 8004bc4:	e001      	b.n	8004bca <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3720      	adds	r7, #32
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	01e84800 	.word	0x01e84800
 8004be4:	00f42400 	.word	0x00f42400

08004be8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	f003 0320 	and.w	r3, r3, #32
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d01a      	beq.n	8004cfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce6:	d10a      	bne.n	8004cfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	605a      	str	r2, [r3, #4]
  }
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b086      	sub	sp, #24
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004d3a:	f7fd f887 	bl	8001e4c <HAL_GetTick>
 8004d3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b08      	cmp	r3, #8
 8004d4c:	d10e      	bne.n	8004d6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f814 	bl	8004d8a <UART_WaitOnFlagUntilTimeout>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d001      	beq.n	8004d6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e00a      	b.n	8004d82 <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4613      	mov	r3, r2
 8004d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9a:	e02a      	b.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d026      	beq.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da4:	f7fd f852 	bl	8001e4c <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d302      	bcc.n	8004dba <UART_WaitOnFlagUntilTimeout+0x30>
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d11b      	bne.n	8004df2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004dc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e00f      	b.n	8004e12 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	bf0c      	ite	eq
 8004e02:	2301      	moveq	r3, #1
 8004e04:	2300      	movne	r3, #0
 8004e06:	b2db      	uxtb	r3, r3
 8004e08:	461a      	mov	r2, r3
 8004e0a:	79fb      	ldrb	r3, [r7, #7]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d0c5      	beq.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e10:	2300      	movs	r3, #0
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	4603      	mov	r3, r0
 8004e22:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004e28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004e2c:	2b84      	cmp	r3, #132	; 0x84
 8004e2e:	d005      	beq.n	8004e3c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004e30:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4413      	add	r3, r2
 8004e38:	3303      	adds	r3, #3
 8004e3a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3714      	adds	r7, #20
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr

08004e4a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b083      	sub	sp, #12
 8004e4e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e50:	f3ef 8305 	mrs	r3, IPSR
 8004e54:	607b      	str	r3, [r7, #4]
  return(result);
 8004e56:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004e72:	f001 f927 	bl	80060c4 <vTaskStartScheduler>
  
  return osOK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e7e:	b089      	sub	sp, #36	; 0x24
 8004e80:	af04      	add	r7, sp, #16
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d020      	beq.n	8004ed0 <osThreadCreate+0x54>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01c      	beq.n	8004ed0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685c      	ldr	r4, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681d      	ldr	r5, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	691e      	ldr	r6, [r3, #16]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7ff ffb6 	bl	8004e1a <makeFreeRtosPriority>
 8004eae:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004eb8:	9202      	str	r2, [sp, #8]
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	9100      	str	r1, [sp, #0]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	4632      	mov	r2, r6
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 ff38 	bl	8005d3a <xTaskCreateStatic>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e01c      	b.n	8004f0a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685c      	ldr	r4, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004edc:	b29e      	uxth	r6, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff ff98 	bl	8004e1a <makeFreeRtosPriority>
 8004eea:	4602      	mov	r2, r0
 8004eec:	f107 030c 	add.w	r3, r7, #12
 8004ef0:	9301      	str	r3, [sp, #4]
 8004ef2:	9200      	str	r2, [sp, #0]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4632      	mov	r2, r6
 8004ef8:	4629      	mov	r1, r5
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 ff7c 	bl	8005df8 <xTaskCreate>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d001      	beq.n	8004f0a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004f06:	2300      	movs	r3, #0
 8004f08:	e000      	b.n	8004f0c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f14 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <osDelay+0x16>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	e000      	b.n	8004f2c <osDelay+0x18>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 f893 	bl	8006058 <vTaskDelay>
  
  return osOK;
 8004f32:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d010      	beq.n	8004f70 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d10b      	bne.n	8004f6c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	2303      	movs	r3, #3
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	2200      	movs	r2, #0
 8004f60:	2100      	movs	r1, #0
 8004f62:	2001      	movs	r0, #1
 8004f64:	f000 f9c0 	bl	80052e8 <xQueueGenericCreateStatic>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	e016      	b.n	8004f9a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e014      	b.n	8004f9a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d110      	bne.n	8004f98 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004f76:	2203      	movs	r2, #3
 8004f78:	2100      	movs	r1, #0
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f000 fa30 	bl	80053e0 <xQueueGenericCreate>
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d005      	beq.n	8004f94 <osSemaphoreCreate+0x58>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 fa84 	bl	800549c <xQueueGenericSend>
      return sema;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	e000      	b.n	8004f9a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004f98:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004fae:	2300      	movs	r3, #0
 8004fb0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	e03a      	b.n	8005032 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc6:	d103      	bne.n	8004fd0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e009      	b.n	8004fe4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d006      	beq.n	8004fe4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <osSemaphoreWait+0x40>
      ticks = 1;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004fe4:	f7ff ff31 	bl	8004e4a <inHandlerMode>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d017      	beq.n	800501e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004fee:	f107 0308 	add.w	r3, r7, #8
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fcf4 	bl	80059e4 <xQueueReceiveFromISR>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d001      	beq.n	8005006 <osSemaphoreWait+0x62>
      return osErrorOS;
 8005002:	23ff      	movs	r3, #255	; 0xff
 8005004:	e015      	b.n	8005032 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d011      	beq.n	8005030 <osSemaphoreWait+0x8c>
 800500c:	4b0b      	ldr	r3, [pc, #44]	; (800503c <osSemaphoreWait+0x98>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	e008      	b.n	8005030 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800501e:	68f9      	ldr	r1, [r7, #12]
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 fbcf 	bl	80057c4 <xQueueSemaphoreTake>
 8005026:	4603      	mov	r3, r0
 8005028:	2b01      	cmp	r3, #1
 800502a:	d001      	beq.n	8005030 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800502c:	23ff      	movs	r3, #255	; 0xff
 800502e:	e000      	b.n	8005032 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3710      	adds	r7, #16
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	e000ed04 	.word	0xe000ed04

08005040 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800504c:	2300      	movs	r3, #0
 800504e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005050:	f7ff fefb 	bl	8004e4a <inHandlerMode>
 8005054:	4603      	mov	r3, r0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d016      	beq.n	8005088 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800505a:	f107 0308 	add.w	r3, r7, #8
 800505e:	4619      	mov	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fb1d 	bl	80056a0 <xQueueGiveFromISR>
 8005066:	4603      	mov	r3, r0
 8005068:	2b01      	cmp	r3, #1
 800506a:	d001      	beq.n	8005070 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800506c:	23ff      	movs	r3, #255	; 0xff
 800506e:	e017      	b.n	80050a0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d013      	beq.n	800509e <osSemaphoreRelease+0x5e>
 8005076:	4b0c      	ldr	r3, [pc, #48]	; (80050a8 <osSemaphoreRelease+0x68>)
 8005078:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	f3bf 8f6f 	isb	sy
 8005086:	e00a      	b.n	800509e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005088:	2300      	movs	r3, #0
 800508a:	2200      	movs	r2, #0
 800508c:	2100      	movs	r1, #0
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa04 	bl	800549c <xQueueGenericSend>
 8005094:	4603      	mov	r3, r0
 8005096:	2b01      	cmp	r3, #1
 8005098:	d001      	beq.n	800509e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800509a:	23ff      	movs	r3, #255	; 0xff
 800509c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800509e:	68fb      	ldr	r3, [r7, #12]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f103 0208 	add.w	r2, r3, #8
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f04f 32ff 	mov.w	r2, #4294967295
 80050c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f103 0208 	add.w	r2, r3, #8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f103 0208 	add.w	r2, r3, #8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80050fa:	bf00      	nop
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr

08005106 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005106:	b480      	push	{r7}
 8005108:	b085      	sub	sp, #20
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	601a      	str	r2, [r3, #0]
}
 8005142:	bf00      	nop
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr

0800514e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005164:	d103      	bne.n	800516e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e00c      	b.n	8005188 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	3308      	adds	r3, #8
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e002      	b.n	800517c <vListInsert+0x2e>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	60fb      	str	r3, [r7, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	429a      	cmp	r2, r3
 8005186:	d2f6      	bcs.n	8005176 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	601a      	str	r2, [r3, #0]
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	687a      	ldr	r2, [r7, #4]
 80051d4:	6892      	ldr	r2, [r2, #8]
 80051d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	6852      	ldr	r2, [r2, #4]
 80051e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d103      	bne.n	80051f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	1e5a      	subs	r2, r3, #1
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522c:	b672      	cpsid	i
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	b662      	cpsie	i
 800523c:	60bb      	str	r3, [r7, #8]
 800523e:	e7fe      	b.n	800523e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005240:	f001 fea2 	bl	8006f88 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800524c:	68f9      	ldr	r1, [r7, #12]
 800524e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005250:	fb01 f303 	mul.w	r3, r1, r3
 8005254:	441a      	add	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2200      	movs	r2, #0
 800525e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005270:	3b01      	subs	r3, #1
 8005272:	68f9      	ldr	r1, [r7, #12]
 8005274:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005276:	fb01 f303 	mul.w	r3, r1, r3
 800527a:	441a      	add	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	22ff      	movs	r2, #255	; 0xff
 8005284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	22ff      	movs	r2, #255	; 0xff
 800528c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d114      	bne.n	80052c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01a      	beq.n	80052d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3310      	adds	r3, #16
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 f95c 	bl	8006560 <xTaskRemoveFromEventList>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d012      	beq.n	80052d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052ae:	4b0d      	ldr	r3, [pc, #52]	; (80052e4 <xQueueGenericReset+0xd0>)
 80052b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	e009      	b.n	80052d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	3310      	adds	r3, #16
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff fef1 	bl	80050ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	3324      	adds	r3, #36	; 0x24
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff feec 	bl	80050ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052d4:	f001 fe8a 	bl	8006fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052d8:	2301      	movs	r3, #1
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	e000ed04 	.word	0xe000ed04

080052e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b08e      	sub	sp, #56	; 0x38
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d10b      	bne.n	8005314 <xQueueGenericCreateStatic+0x2c>
 80052fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005300:	b672      	cpsid	i
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	b662      	cpsie	i
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
 8005312:	e7fe      	b.n	8005312 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <xQueueGenericCreateStatic+0x4a>
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	b672      	cpsid	i
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	b662      	cpsie	i
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
 8005330:	e7fe      	b.n	8005330 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <xQueueGenericCreateStatic+0x56>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <xQueueGenericCreateStatic+0x5a>
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <xQueueGenericCreateStatic+0x5c>
 8005342:	2300      	movs	r3, #0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d10b      	bne.n	8005360 <xQueueGenericCreateStatic+0x78>
 8005348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534c:	b672      	cpsid	i
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	b662      	cpsie	i
 800535c:	623b      	str	r3, [r7, #32]
 800535e:	e7fe      	b.n	800535e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d102      	bne.n	800536c <xQueueGenericCreateStatic+0x84>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <xQueueGenericCreateStatic+0x88>
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <xQueueGenericCreateStatic+0x8a>
 8005370:	2300      	movs	r3, #0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <xQueueGenericCreateStatic+0xa6>
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	b672      	cpsid	i
 800537c:	f383 8811 	msr	BASEPRI, r3
 8005380:	f3bf 8f6f 	isb	sy
 8005384:	f3bf 8f4f 	dsb	sy
 8005388:	b662      	cpsie	i
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e7fe      	b.n	800538c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800538e:	2348      	movs	r3, #72	; 0x48
 8005390:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	2b48      	cmp	r3, #72	; 0x48
 8005396:	d00b      	beq.n	80053b0 <xQueueGenericCreateStatic+0xc8>
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	b672      	cpsid	i
 800539e:	f383 8811 	msr	BASEPRI, r3
 80053a2:	f3bf 8f6f 	isb	sy
 80053a6:	f3bf 8f4f 	dsb	sy
 80053aa:	b662      	cpsie	i
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e7fe      	b.n	80053ae <xQueueGenericCreateStatic+0xc6>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00d      	beq.n	80053d6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	4613      	mov	r3, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f844 	bl	800545e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053d8:	4618      	mov	r0, r3
 80053da:	3730      	adds	r7, #48	; 0x30
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b08a      	sub	sp, #40	; 0x28
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <xQueueGenericCreate+0x2c>
 80053f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f8:	b672      	cpsid	i
 80053fa:	f383 8811 	msr	BASEPRI, r3
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	f3bf 8f4f 	dsb	sy
 8005406:	b662      	cpsie	i
 8005408:	613b      	str	r3, [r7, #16]
 800540a:	e7fe      	b.n	800540a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d102      	bne.n	8005418 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005412:	2300      	movs	r3, #0
 8005414:	61fb      	str	r3, [r7, #28]
 8005416:	e004      	b.n	8005422 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	fb02 f303 	mul.w	r3, r2, r3
 8005420:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	3348      	adds	r3, #72	; 0x48
 8005426:	4618      	mov	r0, r3
 8005428:	f001 fed0 	bl	80071cc <pvPortMalloc>
 800542c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00f      	beq.n	8005454 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	3348      	adds	r3, #72	; 0x48
 8005438:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005442:	79fa      	ldrb	r2, [r7, #7]
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f805 	bl	800545e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005454:	69bb      	ldr	r3, [r7, #24]
	}
 8005456:	4618      	mov	r0, r3
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b084      	sub	sp, #16
 8005462:	af00      	add	r7, sp, #0
 8005464:	60f8      	str	r0, [r7, #12]
 8005466:	60b9      	str	r1, [r7, #8]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d103      	bne.n	800547a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	e002      	b.n	8005480 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800548c:	2101      	movs	r1, #1
 800548e:	69b8      	ldr	r0, [r7, #24]
 8005490:	f7ff fec0 	bl	8005214 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08e      	sub	sp, #56	; 0x38
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054aa:	2300      	movs	r3, #0
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10b      	bne.n	80054d0 <xQueueGenericSend+0x34>
 80054b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054bc:	b672      	cpsid	i
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	b662      	cpsie	i
 80054cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80054ce:	e7fe      	b.n	80054ce <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d103      	bne.n	80054de <xQueueGenericSend+0x42>
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <xQueueGenericSend+0x46>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <xQueueGenericSend+0x48>
 80054e2:	2300      	movs	r3, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10b      	bne.n	8005500 <xQueueGenericSend+0x64>
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	b672      	cpsid	i
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	b662      	cpsie	i
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
 80054fe:	e7fe      	b.n	80054fe <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d103      	bne.n	800550e <xQueueGenericSend+0x72>
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550a:	2b01      	cmp	r3, #1
 800550c:	d101      	bne.n	8005512 <xQueueGenericSend+0x76>
 800550e:	2301      	movs	r3, #1
 8005510:	e000      	b.n	8005514 <xQueueGenericSend+0x78>
 8005512:	2300      	movs	r3, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d10b      	bne.n	8005530 <xQueueGenericSend+0x94>
 8005518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551c:	b672      	cpsid	i
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	b662      	cpsie	i
 800552c:	623b      	str	r3, [r7, #32]
 800552e:	e7fe      	b.n	800552e <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005530:	f001 f9da 	bl	80068e8 <xTaskGetSchedulerState>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d102      	bne.n	8005540 <xQueueGenericSend+0xa4>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d101      	bne.n	8005544 <xQueueGenericSend+0xa8>
 8005540:	2301      	movs	r3, #1
 8005542:	e000      	b.n	8005546 <xQueueGenericSend+0xaa>
 8005544:	2300      	movs	r3, #0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10b      	bne.n	8005562 <xQueueGenericSend+0xc6>
 800554a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800554e:	b672      	cpsid	i
 8005550:	f383 8811 	msr	BASEPRI, r3
 8005554:	f3bf 8f6f 	isb	sy
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	b662      	cpsie	i
 800555e:	61fb      	str	r3, [r7, #28]
 8005560:	e7fe      	b.n	8005560 <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005562:	f001 fd11 	bl	8006f88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	429a      	cmp	r2, r3
 8005570:	d302      	bcc.n	8005578 <xQueueGenericSend+0xdc>
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b02      	cmp	r3, #2
 8005576:	d129      	bne.n	80055cc <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005578:	683a      	ldr	r2, [r7, #0]
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800557e:	f000 facc 	bl	8005b1a <prvCopyDataToQueue>
 8005582:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d010      	beq.n	80055ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	3324      	adds	r3, #36	; 0x24
 8005590:	4618      	mov	r0, r3
 8005592:	f000 ffe5 	bl	8006560 <xTaskRemoveFromEventList>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d013      	beq.n	80055c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800559c:	4b3f      	ldr	r3, [pc, #252]	; (800569c <xQueueGenericSend+0x200>)
 800559e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	f3bf 8f4f 	dsb	sy
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	e00a      	b.n	80055c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055b4:	4b39      	ldr	r3, [pc, #228]	; (800569c <xQueueGenericSend+0x200>)
 80055b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055ba:	601a      	str	r2, [r3, #0]
 80055bc:	f3bf 8f4f 	dsb	sy
 80055c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055c4:	f001 fd12 	bl	8006fec <vPortExitCritical>
				return pdPASS;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e063      	b.n	8005694 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d103      	bne.n	80055da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055d2:	f001 fd0b 	bl	8006fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	e05c      	b.n	8005694 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80055da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d106      	bne.n	80055ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80055e0:	f107 0314 	add.w	r3, r7, #20
 80055e4:	4618      	mov	r0, r3
 80055e6:	f001 f81f 	bl	8006628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055ee:	f001 fcfd 	bl	8006fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055f2:	f000 fdc9 	bl	8006188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055f6:	f001 fcc7 	bl	8006f88 <vPortEnterCritical>
 80055fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005600:	b25b      	sxtb	r3, r3
 8005602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005606:	d103      	bne.n	8005610 <xQueueGenericSend+0x174>
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005616:	b25b      	sxtb	r3, r3
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d103      	bne.n	8005626 <xQueueGenericSend+0x18a>
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005626:	f001 fce1 	bl	8006fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800562a:	1d3a      	adds	r2, r7, #4
 800562c:	f107 0314 	add.w	r3, r7, #20
 8005630:	4611      	mov	r1, r2
 8005632:	4618      	mov	r0, r3
 8005634:	f001 f80e 	bl	8006654 <xTaskCheckForTimeOut>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d124      	bne.n	8005688 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800563e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005640:	f000 fb63 	bl	8005d0a <prvIsQueueFull>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	3310      	adds	r3, #16
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4611      	mov	r1, r2
 8005652:	4618      	mov	r0, r3
 8005654:	f000 ff5e 	bl	8006514 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800565a:	f000 faee 	bl	8005c3a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800565e:	f000 fda1 	bl	80061a4 <xTaskResumeAll>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	f47f af7c 	bne.w	8005562 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800566a:	4b0c      	ldr	r3, [pc, #48]	; (800569c <xQueueGenericSend+0x200>)
 800566c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	e772      	b.n	8005562 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800567c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800567e:	f000 fadc 	bl	8005c3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005682:	f000 fd8f 	bl	80061a4 <xTaskResumeAll>
 8005686:	e76c      	b.n	8005562 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005688:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800568a:	f000 fad6 	bl	8005c3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800568e:	f000 fd89 	bl	80061a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005692:	2300      	movs	r3, #0
		}
	}
}
 8005694:	4618      	mov	r0, r3
 8005696:	3738      	adds	r7, #56	; 0x38
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	e000ed04 	.word	0xe000ed04

080056a0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08e      	sub	sp, #56	; 0x38
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80056ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <xQueueGiveFromISR+0x2c>
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	b672      	cpsid	i
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	b662      	cpsie	i
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	e7fe      	b.n	80056ca <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d00b      	beq.n	80056ec <xQueueGiveFromISR+0x4c>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	b672      	cpsid	i
 80056da:	f383 8811 	msr	BASEPRI, r3
 80056de:	f3bf 8f6f 	isb	sy
 80056e2:	f3bf 8f4f 	dsb	sy
 80056e6:	b662      	cpsie	i
 80056e8:	61fb      	str	r3, [r7, #28]
 80056ea:	e7fe      	b.n	80056ea <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <xQueueGiveFromISR+0x5c>
 80056f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <xQueueGiveFromISR+0x60>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <xQueueGiveFromISR+0x62>
 8005700:	2300      	movs	r3, #0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <xQueueGiveFromISR+0x7e>
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	b672      	cpsid	i
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	b662      	cpsie	i
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	e7fe      	b.n	800571c <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800571e:	f001 fd13 	bl	8007148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005722:	f3ef 8211 	mrs	r2, BASEPRI
 8005726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572a:	b672      	cpsid	i
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	b662      	cpsie	i
 800573a:	617a      	str	r2, [r7, #20]
 800573c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800573e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005740:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800574e:	429a      	cmp	r2, r3
 8005750:	d22b      	bcs.n	80057aa <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	1c5a      	adds	r2, r3, #1
 8005760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005762:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005764:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800576c:	d112      	bne.n	8005794 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	d016      	beq.n	80057a4 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005778:	3324      	adds	r3, #36	; 0x24
 800577a:	4618      	mov	r0, r3
 800577c:	f000 fef0 	bl	8006560 <xTaskRemoveFromEventList>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00e      	beq.n	80057a4 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	2201      	movs	r2, #1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	e007      	b.n	80057a4 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005798:	3301      	adds	r3, #1
 800579a:	b2db      	uxtb	r3, r3
 800579c:	b25a      	sxtb	r2, r3
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80057a4:	2301      	movs	r3, #1
 80057a6:	637b      	str	r3, [r7, #52]	; 0x34
 80057a8:	e001      	b.n	80057ae <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057aa:	2300      	movs	r3, #0
 80057ac:	637b      	str	r3, [r7, #52]	; 0x34
 80057ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3738      	adds	r7, #56	; 0x38
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	; 0x38
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80057e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e4:	b672      	cpsid	i
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	b662      	cpsie	i
 80057f4:	623b      	str	r3, [r7, #32]
 80057f6:	e7fe      	b.n	80057f6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <xQueueSemaphoreTake+0x54>
 8005800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005804:	b672      	cpsid	i
 8005806:	f383 8811 	msr	BASEPRI, r3
 800580a:	f3bf 8f6f 	isb	sy
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	b662      	cpsie	i
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e7fe      	b.n	8005816 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005818:	f001 f866 	bl	80068e8 <xTaskGetSchedulerState>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d102      	bne.n	8005828 <xQueueSemaphoreTake+0x64>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <xQueueSemaphoreTake+0x68>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <xQueueSemaphoreTake+0x6a>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10b      	bne.n	800584a <xQueueSemaphoreTake+0x86>
 8005832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005836:	b672      	cpsid	i
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	b662      	cpsie	i
 8005846:	61bb      	str	r3, [r7, #24]
 8005848:	e7fe      	b.n	8005848 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800584a:	f001 fb9d 	bl	8006f88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	2b00      	cmp	r3, #0
 8005858:	d024      	beq.n	80058a4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	1e5a      	subs	r2, r3, #1
 800585e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005860:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d104      	bne.n	8005874 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800586a:	f001 fa0b 	bl	8006c84 <pvTaskIncrementMutexHeldCount>
 800586e:	4602      	mov	r2, r0
 8005870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005872:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00f      	beq.n	800589c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587e:	3310      	adds	r3, #16
 8005880:	4618      	mov	r0, r3
 8005882:	f000 fe6d 	bl	8006560 <xTaskRemoveFromEventList>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d007      	beq.n	800589c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800588c:	4b54      	ldr	r3, [pc, #336]	; (80059e0 <xQueueSemaphoreTake+0x21c>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800589c:	f001 fba6 	bl	8006fec <vPortExitCritical>
				return pdPASS;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e098      	b.n	80059d6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d112      	bne.n	80058d0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00b      	beq.n	80058c8 <xQueueSemaphoreTake+0x104>
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	b672      	cpsid	i
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	b662      	cpsie	i
 80058c4:	617b      	str	r3, [r7, #20]
 80058c6:	e7fe      	b.n	80058c6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058c8:	f001 fb90 	bl	8006fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e082      	b.n	80059d6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80058d6:	f107 030c 	add.w	r3, r7, #12
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 fea4 	bl	8006628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058e4:	f001 fb82 	bl	8006fec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058e8:	f000 fc4e 	bl	8006188 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058ec:	f001 fb4c 	bl	8006f88 <vPortEnterCritical>
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058f6:	b25b      	sxtb	r3, r3
 80058f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fc:	d103      	bne.n	8005906 <xQueueSemaphoreTake+0x142>
 80058fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800590c:	b25b      	sxtb	r3, r3
 800590e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005912:	d103      	bne.n	800591c <xQueueSemaphoreTake+0x158>
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	2200      	movs	r2, #0
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800591c:	f001 fb66 	bl	8006fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005920:	463a      	mov	r2, r7
 8005922:	f107 030c 	add.w	r3, r7, #12
 8005926:	4611      	mov	r1, r2
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fe93 	bl	8006654 <xTaskCheckForTimeOut>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d132      	bne.n	800599a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005934:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005936:	f000 f9d2 	bl	8005cde <prvIsQueueEmpty>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d026      	beq.n	800598e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005948:	f001 fb1e 	bl	8006f88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	4618      	mov	r0, r3
 8005952:	f000 ffe7 	bl	8006924 <xTaskPriorityInherit>
 8005956:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005958:	f001 fb48 	bl	8006fec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595e:	3324      	adds	r3, #36	; 0x24
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	4611      	mov	r1, r2
 8005964:	4618      	mov	r0, r3
 8005966:	f000 fdd5 	bl	8006514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800596a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800596c:	f000 f965 	bl	8005c3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005970:	f000 fc18 	bl	80061a4 <xTaskResumeAll>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	f47f af67 	bne.w	800584a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800597c:	4b18      	ldr	r3, [pc, #96]	; (80059e0 <xQueueSemaphoreTake+0x21c>)
 800597e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005982:	601a      	str	r2, [r3, #0]
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	e75d      	b.n	800584a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800598e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005990:	f000 f953 	bl	8005c3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005994:	f000 fc06 	bl	80061a4 <xTaskResumeAll>
 8005998:	e757      	b.n	800584a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800599a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800599c:	f000 f94d 	bl	8005c3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059a0:	f000 fc00 	bl	80061a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059a6:	f000 f99a 	bl	8005cde <prvIsQueueEmpty>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f43f af4c 	beq.w	800584a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00d      	beq.n	80059d4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80059b8:	f001 fae6 	bl	8006f88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059be:	f000 f894 	bl	8005aea <prvGetDisinheritPriorityAfterTimeout>
 80059c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80059c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 f8b8 	bl	8006b40 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80059d0:	f001 fb0c 	bl	8006fec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80059d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3738      	adds	r7, #56	; 0x38
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	e000ed04 	.word	0xe000ed04

080059e4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b08e      	sub	sp, #56	; 0x38
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <xQueueReceiveFromISR+0x2e>
 80059fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fe:	b672      	cpsid	i
 8005a00:	f383 8811 	msr	BASEPRI, r3
 8005a04:	f3bf 8f6f 	isb	sy
 8005a08:	f3bf 8f4f 	dsb	sy
 8005a0c:	b662      	cpsie	i
 8005a0e:	623b      	str	r3, [r7, #32]
 8005a10:	e7fe      	b.n	8005a10 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d103      	bne.n	8005a20 <xQueueReceiveFromISR+0x3c>
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <xQueueReceiveFromISR+0x40>
 8005a20:	2301      	movs	r3, #1
 8005a22:	e000      	b.n	8005a26 <xQueueReceiveFromISR+0x42>
 8005a24:	2300      	movs	r3, #0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10b      	bne.n	8005a42 <xQueueReceiveFromISR+0x5e>
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	b672      	cpsid	i
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	b662      	cpsie	i
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e7fe      	b.n	8005a40 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a42:	f001 fb81 	bl	8007148 <vPortValidateInterruptPriority>
	__asm volatile
 8005a46:	f3ef 8211 	mrs	r2, BASEPRI
 8005a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4e:	b672      	cpsid	i
 8005a50:	f383 8811 	msr	BASEPRI, r3
 8005a54:	f3bf 8f6f 	isb	sy
 8005a58:	f3bf 8f4f 	dsb	sy
 8005a5c:	b662      	cpsie	i
 8005a5e:	61ba      	str	r2, [r7, #24]
 8005a60:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a62:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d02f      	beq.n	8005ad2 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a80:	f000 f8b5 	bl	8005bee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a86:	1e5a      	subs	r2, r3, #1
 8005a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a8c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a94:	d112      	bne.n	8005abc <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d016      	beq.n	8005acc <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa0:	3310      	adds	r3, #16
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 fd5c 	bl	8006560 <xTaskRemoveFromEventList>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
 8005aba:	e007      	b.n	8005acc <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	b25a      	sxtb	r2, r3
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005acc:	2301      	movs	r3, #1
 8005ace:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad0:	e001      	b.n	8005ad6 <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3738      	adds	r7, #56	; 0x38
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005aea:	b480      	push	{r7}
 8005aec:	b085      	sub	sp, #20
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d006      	beq.n	8005b08 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1c3 0307 	rsb	r3, r3, #7
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	e001      	b.n	8005b0c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3714      	adds	r7, #20
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b086      	sub	sp, #24
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d10d      	bne.n	8005b54 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d14d      	bne.n	8005bdc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 ff73 	bl	8006a30 <xTaskPriorityDisinherit>
 8005b4a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	e043      	b.n	8005bdc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d119      	bne.n	8005b8e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	6898      	ldr	r0, [r3, #8]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	461a      	mov	r2, r3
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	f001 fd35 	bl	80075d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b72:	441a      	add	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d32b      	bcc.n	8005bdc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	609a      	str	r2, [r3, #8]
 8005b8c:	e026      	b.n	8005bdc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	68d8      	ldr	r0, [r3, #12]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	461a      	mov	r2, r3
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	f001 fd1b 	bl	80075d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba6:	425b      	negs	r3, r3
 8005ba8:	441a      	add	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d207      	bcs.n	8005bca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	425b      	negs	r3, r3
 8005bc4:	441a      	add	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d105      	bne.n	8005bdc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d002      	beq.n	8005bdc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	3b01      	subs	r3, #1
 8005bda:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1c5a      	adds	r2, r3, #1
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005be4:	697b      	ldr	r3, [r7, #20]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d018      	beq.n	8005c32 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68da      	ldr	r2, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	441a      	add	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d303      	bcc.n	8005c22 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68d9      	ldr	r1, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	6838      	ldr	r0, [r7, #0]
 8005c2e:	f001 fcd1 	bl	80075d4 <memcpy>
	}
}
 8005c32:	bf00      	nop
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b084      	sub	sp, #16
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005c42:	f001 f9a1 	bl	8006f88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c4c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c4e:	e011      	b.n	8005c74 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d012      	beq.n	8005c7e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3324      	adds	r3, #36	; 0x24
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f000 fc7f 	bl	8006560 <xTaskRemoveFromEventList>
 8005c62:	4603      	mov	r3, r0
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c68:	f000 fd58 	bl	800671c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	dce9      	bgt.n	8005c50 <prvUnlockQueue+0x16>
 8005c7c:	e000      	b.n	8005c80 <prvUnlockQueue+0x46>
					break;
 8005c7e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	22ff      	movs	r2, #255	; 0xff
 8005c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005c88:	f001 f9b0 	bl	8006fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c8c:	f001 f97c 	bl	8006f88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c96:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c98:	e011      	b.n	8005cbe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d012      	beq.n	8005cc8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3310      	adds	r3, #16
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 fc5a 	bl	8006560 <xTaskRemoveFromEventList>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005cb2:	f000 fd33 	bl	800671c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005cbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	dce9      	bgt.n	8005c9a <prvUnlockQueue+0x60>
 8005cc6:	e000      	b.n	8005cca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005cc8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	22ff      	movs	r2, #255	; 0xff
 8005cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005cd2:	f001 f98b 	bl	8006fec <vPortExitCritical>
}
 8005cd6:	bf00      	nop
 8005cd8:	3710      	adds	r7, #16
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005ce6:	f001 f94f 	bl	8006f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	60fb      	str	r3, [r7, #12]
 8005cf6:	e001      	b.n	8005cfc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cfc:	f001 f976 	bl	8006fec <vPortExitCritical>

	return xReturn;
 8005d00:	68fb      	ldr	r3, [r7, #12]
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	af00      	add	r7, sp, #0
 8005d10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d12:	f001 f939 	bl	8006f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d102      	bne.n	8005d28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d22:	2301      	movs	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]
 8005d26:	e001      	b.n	8005d2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d2c:	f001 f95e 	bl	8006fec <vPortExitCritical>

	return xReturn;
 8005d30:	68fb      	ldr	r3, [r7, #12]
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b08e      	sub	sp, #56	; 0x38
 8005d3e:	af04      	add	r7, sp, #16
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	b672      	cpsid	i
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	b662      	cpsie	i
 8005d62:	623b      	str	r3, [r7, #32]
 8005d64:	e7fe      	b.n	8005d64 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8005d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10b      	bne.n	8005d84 <xTaskCreateStatic+0x4a>
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	b672      	cpsid	i
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	b662      	cpsie	i
 8005d80:	61fb      	str	r3, [r7, #28]
 8005d82:	e7fe      	b.n	8005d82 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005d84:	2354      	movs	r3, #84	; 0x54
 8005d86:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	2b54      	cmp	r3, #84	; 0x54
 8005d8c:	d00b      	beq.n	8005da6 <xTaskCreateStatic+0x6c>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	b672      	cpsid	i
 8005d94:	f383 8811 	msr	BASEPRI, r3
 8005d98:	f3bf 8f6f 	isb	sy
 8005d9c:	f3bf 8f4f 	dsb	sy
 8005da0:	b662      	cpsie	i
 8005da2:	61bb      	str	r3, [r7, #24]
 8005da4:	e7fe      	b.n	8005da4 <xTaskCreateStatic+0x6a>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d01e      	beq.n	8005dea <xTaskCreateStatic+0xb0>
 8005dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d01b      	beq.n	8005dea <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	9303      	str	r3, [sp, #12]
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	9302      	str	r3, [sp, #8]
 8005dcc:	f107 0314 	add.w	r3, r7, #20
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f850 	bl	8005e82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005de2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005de4:	f000 f8ce 	bl	8005f84 <prvAddNewTaskToReadyList>
 8005de8:	e001      	b.n	8005dee <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8005dea:	2300      	movs	r3, #0
 8005dec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005dee:	697b      	ldr	r3, [r7, #20]
	}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3728      	adds	r7, #40	; 0x28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b08c      	sub	sp, #48	; 0x30
 8005dfc:	af04      	add	r7, sp, #16
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	603b      	str	r3, [r7, #0]
 8005e04:	4613      	mov	r3, r2
 8005e06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f001 f9dd 	bl	80071cc <pvPortMalloc>
 8005e12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00e      	beq.n	8005e38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e1a:	2054      	movs	r0, #84	; 0x54
 8005e1c:	f001 f9d6 	bl	80071cc <pvPortMalloc>
 8005e20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d003      	beq.n	8005e30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	697a      	ldr	r2, [r7, #20]
 8005e2c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e2e:	e005      	b.n	8005e3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e30:	6978      	ldr	r0, [r7, #20]
 8005e32:	f001 fa93 	bl	800735c <vPortFree>
 8005e36:	e001      	b.n	8005e3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d017      	beq.n	8005e72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e4a:	88fa      	ldrh	r2, [r7, #6]
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	9303      	str	r3, [sp, #12]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	9302      	str	r3, [sp, #8]
 8005e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5a:	9300      	str	r3, [sp, #0]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	68b9      	ldr	r1, [r7, #8]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 f80e 	bl	8005e82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e66:	69f8      	ldr	r0, [r7, #28]
 8005e68:	f000 f88c 	bl	8005f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	61bb      	str	r3, [r7, #24]
 8005e70:	e002      	b.n	8005e78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295
 8005e76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005e78:	69bb      	ldr	r3, [r7, #24]
	}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b088      	sub	sp, #32
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	60b9      	str	r1, [r7, #8]
 8005e8c:	607a      	str	r2, [r7, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005e9a:	440b      	add	r3, r1
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f023 0307 	bic.w	r3, r3, #7
 8005ea8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	f003 0307 	and.w	r3, r3, #7
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00b      	beq.n	8005ecc <prvInitialiseNewTask+0x4a>
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	b672      	cpsid	i
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	b662      	cpsie	i
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	e7fe      	b.n	8005eca <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ecc:	2300      	movs	r3, #0
 8005ece:	61fb      	str	r3, [r7, #28]
 8005ed0:	e012      	b.n	8005ef8 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	7819      	ldrb	r1, [r3, #0]
 8005eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	3334      	adds	r3, #52	; 0x34
 8005ee2:	460a      	mov	r2, r1
 8005ee4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005ee6:	68ba      	ldr	r2, [r7, #8]
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	4413      	add	r3, r2
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d006      	beq.n	8005f00 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	61fb      	str	r3, [r7, #28]
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b0f      	cmp	r3, #15
 8005efc:	d9e9      	bls.n	8005ed2 <prvInitialiseNewTask+0x50>
 8005efe:	e000      	b.n	8005f02 <prvInitialiseNewTask+0x80>
		{
			break;
 8005f00:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	2b06      	cmp	r3, #6
 8005f0e:	d901      	bls.n	8005f14 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f10:	2306      	movs	r3, #6
 8005f12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f22:	2200      	movs	r2, #0
 8005f24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7ff f8de 	bl	80050ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f32:	3318      	adds	r3, #24
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff f8d9 	bl	80050ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	f1c3 0207 	rsb	r2, r3, #7
 8005f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	2200      	movs	r2, #0
 8005f54:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68f9      	ldr	r1, [r7, #12]
 8005f62:	69b8      	ldr	r0, [r7, #24]
 8005f64:	f000 ff08 	bl	8006d78 <pxPortInitialiseStack>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f7a:	bf00      	nop
 8005f7c:	3720      	adds	r7, #32
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f8c:	f000 fffc 	bl	8006f88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f90:	4b2a      	ldr	r3, [pc, #168]	; (800603c <prvAddNewTaskToReadyList+0xb8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	3301      	adds	r3, #1
 8005f96:	4a29      	ldr	r2, [pc, #164]	; (800603c <prvAddNewTaskToReadyList+0xb8>)
 8005f98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f9a:	4b29      	ldr	r3, [pc, #164]	; (8006040 <prvAddNewTaskToReadyList+0xbc>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005fa2:	4a27      	ldr	r2, [pc, #156]	; (8006040 <prvAddNewTaskToReadyList+0xbc>)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005fa8:	4b24      	ldr	r3, [pc, #144]	; (800603c <prvAddNewTaskToReadyList+0xb8>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d110      	bne.n	8005fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005fb0:	f000 fbd8 	bl	8006764 <prvInitialiseTaskLists>
 8005fb4:	e00d      	b.n	8005fd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fb6:	4b23      	ldr	r3, [pc, #140]	; (8006044 <prvAddNewTaskToReadyList+0xc0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d109      	bne.n	8005fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fbe:	4b20      	ldr	r3, [pc, #128]	; (8006040 <prvAddNewTaskToReadyList+0xbc>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d802      	bhi.n	8005fd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005fcc:	4a1c      	ldr	r2, [pc, #112]	; (8006040 <prvAddNewTaskToReadyList+0xbc>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fd2:	4b1d      	ldr	r3, [pc, #116]	; (8006048 <prvAddNewTaskToReadyList+0xc4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <prvAddNewTaskToReadyList+0xc4>)
 8005fda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	409a      	lsls	r2, r3
 8005fe4:	4b19      	ldr	r3, [pc, #100]	; (800604c <prvAddNewTaskToReadyList+0xc8>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	4a18      	ldr	r2, [pc, #96]	; (800604c <prvAddNewTaskToReadyList+0xc8>)
 8005fec:	6013      	str	r3, [r2, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4a15      	ldr	r2, [pc, #84]	; (8006050 <prvAddNewTaskToReadyList+0xcc>)
 8005ffc:	441a      	add	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3304      	adds	r3, #4
 8006002:	4619      	mov	r1, r3
 8006004:	4610      	mov	r0, r2
 8006006:	f7ff f87e 	bl	8005106 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800600a:	f000 ffef 	bl	8006fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800600e:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <prvAddNewTaskToReadyList+0xc0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00e      	beq.n	8006034 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006016:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <prvAddNewTaskToReadyList+0xbc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	429a      	cmp	r2, r3
 8006022:	d207      	bcs.n	8006034 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006024:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <prvAddNewTaskToReadyList+0xd0>)
 8006026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800602a:	601a      	str	r2, [r3, #0]
 800602c:	f3bf 8f4f 	dsb	sy
 8006030:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006034:	bf00      	nop
 8006036:	3708      	adds	r7, #8
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	200003a4 	.word	0x200003a4
 8006040:	200002a4 	.word	0x200002a4
 8006044:	200003b0 	.word	0x200003b0
 8006048:	200003c0 	.word	0x200003c0
 800604c:	200003ac 	.word	0x200003ac
 8006050:	200002a8 	.word	0x200002a8
 8006054:	e000ed04 	.word	0xe000ed04

08006058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d018      	beq.n	800609c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <vTaskDelay+0x64>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <vTaskDelay+0x32>
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	b672      	cpsid	i
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	b662      	cpsie	i
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	e7fe      	b.n	8006088 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800608a:	f000 f87d 	bl	8006188 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800608e:	2100      	movs	r1, #0
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fe0b 	bl	8006cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006096:	f000 f885 	bl	80061a4 <xTaskResumeAll>
 800609a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d107      	bne.n	80060b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80060a2:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <vTaskDelay+0x68>)
 80060a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80060b2:	bf00      	nop
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	200003cc 	.word	0x200003cc
 80060c0:	e000ed04 	.word	0xe000ed04

080060c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08a      	sub	sp, #40	; 0x28
 80060c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060ce:	2300      	movs	r3, #0
 80060d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060d2:	463a      	mov	r2, r7
 80060d4:	1d39      	adds	r1, r7, #4
 80060d6:	f107 0308 	add.w	r3, r7, #8
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fa fa18 	bl	8000510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060e0:	6839      	ldr	r1, [r7, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	9202      	str	r2, [sp, #8]
 80060e8:	9301      	str	r3, [sp, #4]
 80060ea:	2300      	movs	r3, #0
 80060ec:	9300      	str	r3, [sp, #0]
 80060ee:	2300      	movs	r3, #0
 80060f0:	460a      	mov	r2, r1
 80060f2:	491f      	ldr	r1, [pc, #124]	; (8006170 <vTaskStartScheduler+0xac>)
 80060f4:	481f      	ldr	r0, [pc, #124]	; (8006174 <vTaskStartScheduler+0xb0>)
 80060f6:	f7ff fe20 	bl	8005d3a <xTaskCreateStatic>
 80060fa:	4602      	mov	r2, r0
 80060fc:	4b1e      	ldr	r3, [pc, #120]	; (8006178 <vTaskStartScheduler+0xb4>)
 80060fe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006100:	4b1d      	ldr	r3, [pc, #116]	; (8006178 <vTaskStartScheduler+0xb4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d002      	beq.n	800610e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006108:	2301      	movs	r3, #1
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	e001      	b.n	8006112 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b01      	cmp	r3, #1
 8006116:	d117      	bne.n	8006148 <vTaskStartScheduler+0x84>
 8006118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611c:	b672      	cpsid	i
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	b662      	cpsie	i
 800612c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800612e:	4b13      	ldr	r3, [pc, #76]	; (800617c <vTaskStartScheduler+0xb8>)
 8006130:	f04f 32ff 	mov.w	r2, #4294967295
 8006134:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006136:	4b12      	ldr	r3, [pc, #72]	; (8006180 <vTaskStartScheduler+0xbc>)
 8006138:	2201      	movs	r2, #1
 800613a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800613c:	4b11      	ldr	r3, [pc, #68]	; (8006184 <vTaskStartScheduler+0xc0>)
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006142:	f000 fea5 	bl	8006e90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006146:	e00f      	b.n	8006168 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d10b      	bne.n	8006168 <vTaskStartScheduler+0xa4>
 8006150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006154:	b672      	cpsid	i
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	b662      	cpsie	i
 8006164:	60fb      	str	r3, [r7, #12]
 8006166:	e7fe      	b.n	8006166 <vTaskStartScheduler+0xa2>
}
 8006168:	bf00      	nop
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}
 8006170:	080076ac 	.word	0x080076ac
 8006174:	08006735 	.word	0x08006735
 8006178:	200003c8 	.word	0x200003c8
 800617c:	200003c4 	.word	0x200003c4
 8006180:	200003b0 	.word	0x200003b0
 8006184:	200003a8 	.word	0x200003a8

08006188 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800618c:	4b04      	ldr	r3, [pc, #16]	; (80061a0 <vTaskSuspendAll+0x18>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3301      	adds	r3, #1
 8006192:	4a03      	ldr	r2, [pc, #12]	; (80061a0 <vTaskSuspendAll+0x18>)
 8006194:	6013      	str	r3, [r2, #0]
}
 8006196:	bf00      	nop
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	200003cc 	.word	0x200003cc

080061a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80061ae:	2300      	movs	r3, #0
 80061b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80061b2:	4b42      	ldr	r3, [pc, #264]	; (80062bc <xTaskResumeAll+0x118>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <xTaskResumeAll+0x2e>
 80061ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061be:	b672      	cpsid	i
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	b662      	cpsie	i
 80061ce:	603b      	str	r3, [r7, #0]
 80061d0:	e7fe      	b.n	80061d0 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061d2:	f000 fed9 	bl	8006f88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061d6:	4b39      	ldr	r3, [pc, #228]	; (80062bc <xTaskResumeAll+0x118>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3b01      	subs	r3, #1
 80061dc:	4a37      	ldr	r2, [pc, #220]	; (80062bc <xTaskResumeAll+0x118>)
 80061de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061e0:	4b36      	ldr	r3, [pc, #216]	; (80062bc <xTaskResumeAll+0x118>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d161      	bne.n	80062ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061e8:	4b35      	ldr	r3, [pc, #212]	; (80062c0 <xTaskResumeAll+0x11c>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d05d      	beq.n	80062ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061f0:	e02e      	b.n	8006250 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061f2:	4b34      	ldr	r3, [pc, #208]	; (80062c4 <xTaskResumeAll+0x120>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3318      	adds	r3, #24
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fe ffde 	bl	80051c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3304      	adds	r3, #4
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe ffd9 	bl	80051c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	2201      	movs	r2, #1
 8006214:	409a      	lsls	r2, r3
 8006216:	4b2c      	ldr	r3, [pc, #176]	; (80062c8 <xTaskResumeAll+0x124>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	4a2a      	ldr	r2, [pc, #168]	; (80062c8 <xTaskResumeAll+0x124>)
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006224:	4613      	mov	r3, r2
 8006226:	009b      	lsls	r3, r3, #2
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4a27      	ldr	r2, [pc, #156]	; (80062cc <xTaskResumeAll+0x128>)
 800622e:	441a      	add	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	3304      	adds	r3, #4
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fe ff65 	bl	8005106 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006240:	4b23      	ldr	r3, [pc, #140]	; (80062d0 <xTaskResumeAll+0x12c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	429a      	cmp	r2, r3
 8006248:	d302      	bcc.n	8006250 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800624a:	4b22      	ldr	r3, [pc, #136]	; (80062d4 <xTaskResumeAll+0x130>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006250:	4b1c      	ldr	r3, [pc, #112]	; (80062c4 <xTaskResumeAll+0x120>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1cc      	bne.n	80061f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800625e:	f000 fb1d 	bl	800689c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006262:	4b1d      	ldr	r3, [pc, #116]	; (80062d8 <xTaskResumeAll+0x134>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d010      	beq.n	8006290 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800626e:	f000 f837 	bl	80062e0 <xTaskIncrementTick>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d002      	beq.n	800627e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006278:	4b16      	ldr	r3, [pc, #88]	; (80062d4 <xTaskResumeAll+0x130>)
 800627a:	2201      	movs	r2, #1
 800627c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3b01      	subs	r3, #1
 8006282:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1f1      	bne.n	800626e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800628a:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <xTaskResumeAll+0x134>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <xTaskResumeAll+0x130>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d009      	beq.n	80062ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006298:	2301      	movs	r3, #1
 800629a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800629c:	4b0f      	ldr	r3, [pc, #60]	; (80062dc <xTaskResumeAll+0x138>)
 800629e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062a2:	601a      	str	r2, [r3, #0]
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062ac:	f000 fe9e 	bl	8006fec <vPortExitCritical>

	return xAlreadyYielded;
 80062b0:	68bb      	ldr	r3, [r7, #8]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	200003cc 	.word	0x200003cc
 80062c0:	200003a4 	.word	0x200003a4
 80062c4:	20000364 	.word	0x20000364
 80062c8:	200003ac 	.word	0x200003ac
 80062cc:	200002a8 	.word	0x200002a8
 80062d0:	200002a4 	.word	0x200002a4
 80062d4:	200003b8 	.word	0x200003b8
 80062d8:	200003b4 	.word	0x200003b4
 80062dc:	e000ed04 	.word	0xe000ed04

080062e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062ea:	4b51      	ldr	r3, [pc, #324]	; (8006430 <xTaskIncrementTick+0x150>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f040 808e 	bne.w	8006410 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062f4:	4b4f      	ldr	r3, [pc, #316]	; (8006434 <xTaskIncrementTick+0x154>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	3301      	adds	r3, #1
 80062fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062fc:	4a4d      	ldr	r2, [pc, #308]	; (8006434 <xTaskIncrementTick+0x154>)
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d121      	bne.n	800634c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006308:	4b4b      	ldr	r3, [pc, #300]	; (8006438 <xTaskIncrementTick+0x158>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00b      	beq.n	800632a <xTaskIncrementTick+0x4a>
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	b672      	cpsid	i
 8006318:	f383 8811 	msr	BASEPRI, r3
 800631c:	f3bf 8f6f 	isb	sy
 8006320:	f3bf 8f4f 	dsb	sy
 8006324:	b662      	cpsie	i
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	e7fe      	b.n	8006328 <xTaskIncrementTick+0x48>
 800632a:	4b43      	ldr	r3, [pc, #268]	; (8006438 <xTaskIncrementTick+0x158>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	4b42      	ldr	r3, [pc, #264]	; (800643c <xTaskIncrementTick+0x15c>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a40      	ldr	r2, [pc, #256]	; (8006438 <xTaskIncrementTick+0x158>)
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	4a40      	ldr	r2, [pc, #256]	; (800643c <xTaskIncrementTick+0x15c>)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	4b40      	ldr	r3, [pc, #256]	; (8006440 <xTaskIncrementTick+0x160>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3301      	adds	r3, #1
 8006344:	4a3e      	ldr	r2, [pc, #248]	; (8006440 <xTaskIncrementTick+0x160>)
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	f000 faa8 	bl	800689c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800634c:	4b3d      	ldr	r3, [pc, #244]	; (8006444 <xTaskIncrementTick+0x164>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	429a      	cmp	r2, r3
 8006354:	d34d      	bcc.n	80063f2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006356:	4b38      	ldr	r3, [pc, #224]	; (8006438 <xTaskIncrementTick+0x158>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <xTaskIncrementTick+0x84>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <xTaskIncrementTick+0x86>
 8006364:	2300      	movs	r3, #0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800636a:	4b36      	ldr	r3, [pc, #216]	; (8006444 <xTaskIncrementTick+0x164>)
 800636c:	f04f 32ff 	mov.w	r2, #4294967295
 8006370:	601a      	str	r2, [r3, #0]
					break;
 8006372:	e03e      	b.n	80063f2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006374:	4b30      	ldr	r3, [pc, #192]	; (8006438 <xTaskIncrementTick+0x158>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	429a      	cmp	r2, r3
 800638a:	d203      	bcs.n	8006394 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800638c:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <xTaskIncrementTick+0x164>)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6013      	str	r3, [r2, #0]
						break;
 8006392:	e02e      	b.n	80063f2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	3304      	adds	r3, #4
 8006398:	4618      	mov	r0, r3
 800639a:	f7fe ff11 	bl	80051c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d004      	beq.n	80063b0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	3318      	adds	r3, #24
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe ff08 	bl	80051c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b4:	2201      	movs	r2, #1
 80063b6:	409a      	lsls	r2, r3
 80063b8:	4b23      	ldr	r3, [pc, #140]	; (8006448 <xTaskIncrementTick+0x168>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4313      	orrs	r3, r2
 80063be:	4a22      	ldr	r2, [pc, #136]	; (8006448 <xTaskIncrementTick+0x168>)
 80063c0:	6013      	str	r3, [r2, #0]
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c6:	4613      	mov	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	009b      	lsls	r3, r3, #2
 80063ce:	4a1f      	ldr	r2, [pc, #124]	; (800644c <xTaskIncrementTick+0x16c>)
 80063d0:	441a      	add	r2, r3
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7fe fe94 	bl	8005106 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	4b1b      	ldr	r3, [pc, #108]	; (8006450 <xTaskIncrementTick+0x170>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d3b4      	bcc.n	8006356 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063ec:	2301      	movs	r3, #1
 80063ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063f0:	e7b1      	b.n	8006356 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063f2:	4b17      	ldr	r3, [pc, #92]	; (8006450 <xTaskIncrementTick+0x170>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f8:	4914      	ldr	r1, [pc, #80]	; (800644c <xTaskIncrementTick+0x16c>)
 80063fa:	4613      	mov	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d907      	bls.n	800641a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800640a:	2301      	movs	r3, #1
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e004      	b.n	800641a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006410:	4b10      	ldr	r3, [pc, #64]	; (8006454 <xTaskIncrementTick+0x174>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3301      	adds	r3, #1
 8006416:	4a0f      	ldr	r2, [pc, #60]	; (8006454 <xTaskIncrementTick+0x174>)
 8006418:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <xTaskIncrementTick+0x178>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8006422:	2301      	movs	r3, #1
 8006424:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006426:	697b      	ldr	r3, [r7, #20]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	200003cc 	.word	0x200003cc
 8006434:	200003a8 	.word	0x200003a8
 8006438:	2000035c 	.word	0x2000035c
 800643c:	20000360 	.word	0x20000360
 8006440:	200003bc 	.word	0x200003bc
 8006444:	200003c4 	.word	0x200003c4
 8006448:	200003ac 	.word	0x200003ac
 800644c:	200002a8 	.word	0x200002a8
 8006450:	200002a4 	.word	0x200002a4
 8006454:	200003b4 	.word	0x200003b4
 8006458:	200003b8 	.word	0x200003b8

0800645c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006462:	4b27      	ldr	r3, [pc, #156]	; (8006500 <vTaskSwitchContext+0xa4>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800646a:	4b26      	ldr	r3, [pc, #152]	; (8006504 <vTaskSwitchContext+0xa8>)
 800646c:	2201      	movs	r2, #1
 800646e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006470:	e040      	b.n	80064f4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8006472:	4b24      	ldr	r3, [pc, #144]	; (8006504 <vTaskSwitchContext+0xa8>)
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006478:	4b23      	ldr	r3, [pc, #140]	; (8006508 <vTaskSwitchContext+0xac>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	fab3 f383 	clz	r3, r3
 8006484:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	f1c3 031f 	rsb	r3, r3, #31
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	491f      	ldr	r1, [pc, #124]	; (800650c <vTaskSwitchContext+0xb0>)
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	440b      	add	r3, r1
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <vTaskSwitchContext+0x5e>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a6:	b672      	cpsid	i
 80064a8:	f383 8811 	msr	BASEPRI, r3
 80064ac:	f3bf 8f6f 	isb	sy
 80064b0:	f3bf 8f4f 	dsb	sy
 80064b4:	b662      	cpsie	i
 80064b6:	607b      	str	r3, [r7, #4]
 80064b8:	e7fe      	b.n	80064b8 <vTaskSwitchContext+0x5c>
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4613      	mov	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4a11      	ldr	r2, [pc, #68]	; (800650c <vTaskSwitchContext+0xb0>)
 80064c6:	4413      	add	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	685a      	ldr	r2, [r3, #4]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	605a      	str	r2, [r3, #4]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	685a      	ldr	r2, [r3, #4]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	3308      	adds	r3, #8
 80064dc:	429a      	cmp	r2, r3
 80064de:	d104      	bne.n	80064ea <vTaskSwitchContext+0x8e>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	605a      	str	r2, [r3, #4]
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	4a07      	ldr	r2, [pc, #28]	; (8006510 <vTaskSwitchContext+0xb4>)
 80064f2:	6013      	str	r3, [r2, #0]
}
 80064f4:	bf00      	nop
 80064f6:	371c      	adds	r7, #28
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	200003cc 	.word	0x200003cc
 8006504:	200003b8 	.word	0x200003b8
 8006508:	200003ac 	.word	0x200003ac
 800650c:	200002a8 	.word	0x200002a8
 8006510:	200002a4 	.word	0x200002a4

08006514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d10b      	bne.n	800653c <vTaskPlaceOnEventList+0x28>
 8006524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006528:	b672      	cpsid	i
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	b662      	cpsie	i
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	e7fe      	b.n	800653a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800653c:	4b07      	ldr	r3, [pc, #28]	; (800655c <vTaskPlaceOnEventList+0x48>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3318      	adds	r3, #24
 8006542:	4619      	mov	r1, r3
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7fe fe02 	bl	800514e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800654a:	2101      	movs	r1, #1
 800654c:	6838      	ldr	r0, [r7, #0]
 800654e:	f000 fbad 	bl	8006cac <prvAddCurrentTaskToDelayedList>
}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	200002a4 	.word	0x200002a4

08006560 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b086      	sub	sp, #24
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10b      	bne.n	800658e <xTaskRemoveFromEventList+0x2e>
 8006576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657a:	b672      	cpsid	i
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	b662      	cpsie	i
 800658a:	60fb      	str	r3, [r7, #12]
 800658c:	e7fe      	b.n	800658c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	3318      	adds	r3, #24
 8006592:	4618      	mov	r0, r3
 8006594:	f7fe fe14 	bl	80051c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006598:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <xTaskRemoveFromEventList+0xb0>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11c      	bne.n	80065da <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7fe fe0b 	bl	80051c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ae:	2201      	movs	r2, #1
 80065b0:	409a      	lsls	r2, r3
 80065b2:	4b18      	ldr	r3, [pc, #96]	; (8006614 <xTaskRemoveFromEventList+0xb4>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	4a16      	ldr	r2, [pc, #88]	; (8006614 <xTaskRemoveFromEventList+0xb4>)
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4a13      	ldr	r2, [pc, #76]	; (8006618 <xTaskRemoveFromEventList+0xb8>)
 80065ca:	441a      	add	r2, r3
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f7fe fd97 	bl	8005106 <vListInsertEnd>
 80065d8:	e005      	b.n	80065e6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	3318      	adds	r3, #24
 80065de:	4619      	mov	r1, r3
 80065e0:	480e      	ldr	r0, [pc, #56]	; (800661c <xTaskRemoveFromEventList+0xbc>)
 80065e2:	f7fe fd90 	bl	8005106 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ea:	4b0d      	ldr	r3, [pc, #52]	; (8006620 <xTaskRemoveFromEventList+0xc0>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d905      	bls.n	8006600 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <xTaskRemoveFromEventList+0xc4>)
 80065fa:	2201      	movs	r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e001      	b.n	8006604 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006604:	697b      	ldr	r3, [r7, #20]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	200003cc 	.word	0x200003cc
 8006614:	200003ac 	.word	0x200003ac
 8006618:	200002a8 	.word	0x200002a8
 800661c:	20000364 	.word	0x20000364
 8006620:	200002a4 	.word	0x200002a4
 8006624:	200003b8 	.word	0x200003b8

08006628 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006630:	4b06      	ldr	r3, [pc, #24]	; (800664c <vTaskInternalSetTimeOutState+0x24>)
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006638:	4b05      	ldr	r3, [pc, #20]	; (8006650 <vTaskInternalSetTimeOutState+0x28>)
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	605a      	str	r2, [r3, #4]
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	200003bc 	.word	0x200003bc
 8006650:	200003a8 	.word	0x200003a8

08006654 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <xTaskCheckForTimeOut+0x28>
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	b672      	cpsid	i
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	b662      	cpsie	i
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	e7fe      	b.n	800667a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <xTaskCheckForTimeOut+0x46>
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	b672      	cpsid	i
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	b662      	cpsie	i
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	e7fe      	b.n	8006698 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800669a:	f000 fc75 	bl	8006f88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800669e:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <xTaskCheckForTimeOut+0xc0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b6:	d102      	bne.n	80066be <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61fb      	str	r3, [r7, #28]
 80066bc:	e023      	b.n	8006706 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b15      	ldr	r3, [pc, #84]	; (8006718 <xTaskCheckForTimeOut+0xc4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d007      	beq.n	80066da <xTaskCheckForTimeOut+0x86>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d302      	bcc.n	80066da <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066d4:	2301      	movs	r3, #1
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	e015      	b.n	8006706 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d20b      	bcs.n	80066fc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f7ff ff99 	bl	8006628 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066f6:	2300      	movs	r3, #0
 80066f8:	61fb      	str	r3, [r7, #28]
 80066fa:	e004      	b.n	8006706 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	2200      	movs	r2, #0
 8006700:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006702:	2301      	movs	r3, #1
 8006704:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006706:	f000 fc71 	bl	8006fec <vPortExitCritical>

	return xReturn;
 800670a:	69fb      	ldr	r3, [r7, #28]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3720      	adds	r7, #32
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	200003a8 	.word	0x200003a8
 8006718:	200003bc 	.word	0x200003bc

0800671c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006720:	4b03      	ldr	r3, [pc, #12]	; (8006730 <vTaskMissedYield+0x14>)
 8006722:	2201      	movs	r2, #1
 8006724:	601a      	str	r2, [r3, #0]
}
 8006726:	bf00      	nop
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	200003b8 	.word	0x200003b8

08006734 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800673c:	f000 f852 	bl	80067e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006740:	4b06      	ldr	r3, [pc, #24]	; (800675c <prvIdleTask+0x28>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d9f9      	bls.n	800673c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <prvIdleTask+0x2c>)
 800674a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800674e:	601a      	str	r2, [r3, #0]
 8006750:	f3bf 8f4f 	dsb	sy
 8006754:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006758:	e7f0      	b.n	800673c <prvIdleTask+0x8>
 800675a:	bf00      	nop
 800675c:	200002a8 	.word	0x200002a8
 8006760:	e000ed04 	.word	0xe000ed04

08006764 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800676a:	2300      	movs	r3, #0
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	e00c      	b.n	800678a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4a12      	ldr	r2, [pc, #72]	; (80067c4 <prvInitialiseTaskLists+0x60>)
 800677c:	4413      	add	r3, r2
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fc94 	bl	80050ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3301      	adds	r3, #1
 8006788:	607b      	str	r3, [r7, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b06      	cmp	r3, #6
 800678e:	d9ef      	bls.n	8006770 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006790:	480d      	ldr	r0, [pc, #52]	; (80067c8 <prvInitialiseTaskLists+0x64>)
 8006792:	f7fe fc8b 	bl	80050ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006796:	480d      	ldr	r0, [pc, #52]	; (80067cc <prvInitialiseTaskLists+0x68>)
 8006798:	f7fe fc88 	bl	80050ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800679c:	480c      	ldr	r0, [pc, #48]	; (80067d0 <prvInitialiseTaskLists+0x6c>)
 800679e:	f7fe fc85 	bl	80050ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067a2:	480c      	ldr	r0, [pc, #48]	; (80067d4 <prvInitialiseTaskLists+0x70>)
 80067a4:	f7fe fc82 	bl	80050ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067a8:	480b      	ldr	r0, [pc, #44]	; (80067d8 <prvInitialiseTaskLists+0x74>)
 80067aa:	f7fe fc7f 	bl	80050ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067ae:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <prvInitialiseTaskLists+0x78>)
 80067b0:	4a05      	ldr	r2, [pc, #20]	; (80067c8 <prvInitialiseTaskLists+0x64>)
 80067b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <prvInitialiseTaskLists+0x7c>)
 80067b6:	4a05      	ldr	r2, [pc, #20]	; (80067cc <prvInitialiseTaskLists+0x68>)
 80067b8:	601a      	str	r2, [r3, #0]
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	200002a8 	.word	0x200002a8
 80067c8:	20000334 	.word	0x20000334
 80067cc:	20000348 	.word	0x20000348
 80067d0:	20000364 	.word	0x20000364
 80067d4:	20000378 	.word	0x20000378
 80067d8:	20000390 	.word	0x20000390
 80067dc:	2000035c 	.word	0x2000035c
 80067e0:	20000360 	.word	0x20000360

080067e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b082      	sub	sp, #8
 80067e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067ea:	e019      	b.n	8006820 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067ec:	f000 fbcc 	bl	8006f88 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80067f0:	4b0f      	ldr	r3, [pc, #60]	; (8006830 <prvCheckTasksWaitingTermination+0x4c>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3304      	adds	r3, #4
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fe fcdf 	bl	80051c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006802:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <prvCheckTasksWaitingTermination+0x50>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3b01      	subs	r3, #1
 8006808:	4a0a      	ldr	r2, [pc, #40]	; (8006834 <prvCheckTasksWaitingTermination+0x50>)
 800680a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <prvCheckTasksWaitingTermination+0x54>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3b01      	subs	r3, #1
 8006812:	4a09      	ldr	r2, [pc, #36]	; (8006838 <prvCheckTasksWaitingTermination+0x54>)
 8006814:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006816:	f000 fbe9 	bl	8006fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 f80e 	bl	800683c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <prvCheckTasksWaitingTermination+0x54>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1e1      	bne.n	80067ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006828:	bf00      	nop
 800682a:	3708      	adds	r7, #8
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20000378 	.word	0x20000378
 8006834:	200003a4 	.word	0x200003a4
 8006838:	2000038c 	.word	0x2000038c

0800683c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800684a:	2b00      	cmp	r3, #0
 800684c:	d108      	bne.n	8006860 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fd82 	bl	800735c <vPortFree>
				vPortFree( pxTCB );
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fd7f 	bl	800735c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800685e:	e019      	b.n	8006894 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006866:	2b01      	cmp	r3, #1
 8006868:	d103      	bne.n	8006872 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fd76 	bl	800735c <vPortFree>
	}
 8006870:	e010      	b.n	8006894 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006878:	2b02      	cmp	r3, #2
 800687a:	d00b      	beq.n	8006894 <prvDeleteTCB+0x58>
 800687c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006880:	b672      	cpsid	i
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	b662      	cpsie	i
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e7fe      	b.n	8006892 <prvDeleteTCB+0x56>
	}
 8006894:	bf00      	nop
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068a2:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <prvResetNextTaskUnblockTime+0x44>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <prvResetNextTaskUnblockTime+0x14>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <prvResetNextTaskUnblockTime+0x16>
 80068b0:	2300      	movs	r3, #0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d004      	beq.n	80068c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <prvResetNextTaskUnblockTime+0x48>)
 80068b8:	f04f 32ff 	mov.w	r2, #4294967295
 80068bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068be:	e008      	b.n	80068d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <prvResetNextTaskUnblockTime+0x44>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	4a05      	ldr	r2, [pc, #20]	; (80068e4 <prvResetNextTaskUnblockTime+0x48>)
 80068d0:	6013      	str	r3, [r2, #0]
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	2000035c 	.word	0x2000035c
 80068e4:	200003c4 	.word	0x200003c4

080068e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068ee:	4b0b      	ldr	r3, [pc, #44]	; (800691c <xTaskGetSchedulerState+0x34>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d102      	bne.n	80068fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068f6:	2301      	movs	r3, #1
 80068f8:	607b      	str	r3, [r7, #4]
 80068fa:	e008      	b.n	800690e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068fc:	4b08      	ldr	r3, [pc, #32]	; (8006920 <xTaskGetSchedulerState+0x38>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006904:	2302      	movs	r3, #2
 8006906:	607b      	str	r3, [r7, #4]
 8006908:	e001      	b.n	800690e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800690e:	687b      	ldr	r3, [r7, #4]
	}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr
 800691c:	200003b0 	.word	0x200003b0
 8006920:	200003cc 	.word	0x200003cc

08006924 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d06e      	beq.n	8006a18 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693e:	4b39      	ldr	r3, [pc, #228]	; (8006a24 <xTaskPriorityInherit+0x100>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	429a      	cmp	r2, r3
 8006946:	d25e      	bcs.n	8006a06 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	2b00      	cmp	r3, #0
 800694e:	db06      	blt.n	800695e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006950:	4b34      	ldr	r3, [pc, #208]	; (8006a24 <xTaskPriorityInherit+0x100>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006956:	f1c3 0207 	rsb	r2, r3, #7
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6959      	ldr	r1, [r3, #20]
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006966:	4613      	mov	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	4413      	add	r3, r2
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4a2e      	ldr	r2, [pc, #184]	; (8006a28 <xTaskPriorityInherit+0x104>)
 8006970:	4413      	add	r3, r2
 8006972:	4299      	cmp	r1, r3
 8006974:	d101      	bne.n	800697a <xTaskPriorityInherit+0x56>
 8006976:	2301      	movs	r3, #1
 8006978:	e000      	b.n	800697c <xTaskPriorityInherit+0x58>
 800697a:	2300      	movs	r3, #0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d03a      	beq.n	80069f6 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	3304      	adds	r3, #4
 8006984:	4618      	mov	r0, r3
 8006986:	f7fe fc1b 	bl	80051c0 <uxListRemove>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d115      	bne.n	80069bc <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006994:	4924      	ldr	r1, [pc, #144]	; (8006a28 <xTaskPriorityInherit+0x104>)
 8006996:	4613      	mov	r3, r2
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10a      	bne.n	80069bc <xTaskPriorityInherit+0x98>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069aa:	2201      	movs	r2, #1
 80069ac:	fa02 f303 	lsl.w	r3, r2, r3
 80069b0:	43da      	mvns	r2, r3
 80069b2:	4b1e      	ldr	r3, [pc, #120]	; (8006a2c <xTaskPriorityInherit+0x108>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4013      	ands	r3, r2
 80069b8:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <xTaskPriorityInherit+0x108>)
 80069ba:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069bc:	4b19      	ldr	r3, [pc, #100]	; (8006a24 <xTaskPriorityInherit+0x100>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ca:	2201      	movs	r2, #1
 80069cc:	409a      	lsls	r2, r3
 80069ce:	4b17      	ldr	r3, [pc, #92]	; (8006a2c <xTaskPriorityInherit+0x108>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <xTaskPriorityInherit+0x108>)
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069dc:	4613      	mov	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4a10      	ldr	r2, [pc, #64]	; (8006a28 <xTaskPriorityInherit+0x104>)
 80069e6:	441a      	add	r2, r3
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3304      	adds	r3, #4
 80069ec:	4619      	mov	r1, r3
 80069ee:	4610      	mov	r0, r2
 80069f0:	f7fe fb89 	bl	8005106 <vListInsertEnd>
 80069f4:	e004      	b.n	8006a00 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069f6:	4b0b      	ldr	r3, [pc, #44]	; (8006a24 <xTaskPriorityInherit+0x100>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a00:	2301      	movs	r3, #1
 8006a02:	60fb      	str	r3, [r7, #12]
 8006a04:	e008      	b.n	8006a18 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a0a:	4b06      	ldr	r3, [pc, #24]	; (8006a24 <xTaskPriorityInherit+0x100>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d201      	bcs.n	8006a18 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a14:	2301      	movs	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a18:	68fb      	ldr	r3, [r7, #12]
	}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3710      	adds	r7, #16
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	200002a4 	.word	0x200002a4
 8006a28:	200002a8 	.word	0x200002a8
 8006a2c:	200003ac 	.word	0x200003ac

08006a30 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d070      	beq.n	8006b28 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a46:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <xTaskPriorityDisinherit+0x104>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	693a      	ldr	r2, [r7, #16]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d00b      	beq.n	8006a68 <xTaskPriorityDisinherit+0x38>
 8006a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a54:	b672      	cpsid	i
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	b662      	cpsie	i
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e7fe      	b.n	8006a66 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d10b      	bne.n	8006a88 <xTaskPriorityDisinherit+0x58>
 8006a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a74:	b672      	cpsid	i
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	b662      	cpsie	i
 8006a84:	60bb      	str	r3, [r7, #8]
 8006a86:	e7fe      	b.n	8006a86 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8c:	1e5a      	subs	r2, r3, #1
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d044      	beq.n	8006b28 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d140      	bne.n	8006b28 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe fb88 	bl	80051c0 <uxListRemove>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d115      	bne.n	8006ae2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aba:	491f      	ldr	r1, [pc, #124]	; (8006b38 <xTaskPriorityDisinherit+0x108>)
 8006abc:	4613      	mov	r3, r2
 8006abe:	009b      	lsls	r3, r3, #2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	440b      	add	r3, r1
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <xTaskPriorityDisinherit+0xb2>
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	43da      	mvns	r2, r3
 8006ad8:	4b18      	ldr	r3, [pc, #96]	; (8006b3c <xTaskPriorityDisinherit+0x10c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4013      	ands	r3, r2
 8006ade:	4a17      	ldr	r2, [pc, #92]	; (8006b3c <xTaskPriorityDisinherit+0x10c>)
 8006ae0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	f1c3 0207 	rsb	r2, r3, #7
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006afa:	2201      	movs	r2, #1
 8006afc:	409a      	lsls	r2, r3
 8006afe:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <xTaskPriorityDisinherit+0x10c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	4a0d      	ldr	r2, [pc, #52]	; (8006b3c <xTaskPriorityDisinherit+0x10c>)
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4613      	mov	r3, r2
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4a08      	ldr	r2, [pc, #32]	; (8006b38 <xTaskPriorityDisinherit+0x108>)
 8006b16:	441a      	add	r2, r3
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	3304      	adds	r3, #4
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	f7fe faf1 	bl	8005106 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006b24:	2301      	movs	r3, #1
 8006b26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b28:	697b      	ldr	r3, [r7, #20]
	}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200002a4 	.word	0x200002a4
 8006b38:	200002a8 	.word	0x200002a8
 8006b3c:	200003ac 	.word	0x200003ac

08006b40 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b088      	sub	sp, #32
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 808a 	beq.w	8006c6e <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	b672      	cpsid	i
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	b662      	cpsie	i
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e7fe      	b.n	8006b78 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d902      	bls.n	8006b8a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	61fb      	str	r3, [r7, #28]
 8006b88:	e002      	b.n	8006b90 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	69fa      	ldr	r2, [r7, #28]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d069      	beq.n	8006c6e <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d164      	bne.n	8006c6e <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ba4:	4b34      	ldr	r3, [pc, #208]	; (8006c78 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d10b      	bne.n	8006bc6 <vTaskPriorityDisinheritAfterTimeout+0x86>
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	b672      	cpsid	i
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	b662      	cpsie	i
 8006bc2:	60bb      	str	r3, [r7, #8]
 8006bc4:	e7fe      	b.n	8006bc4 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	69fa      	ldr	r2, [r7, #28]
 8006bd0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	db04      	blt.n	8006be4 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f1c3 0207 	rsb	r2, r3, #7
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	6959      	ldr	r1, [r3, #20]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4a22      	ldr	r2, [pc, #136]	; (8006c7c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4299      	cmp	r1, r3
 8006bf8:	d101      	bne.n	8006bfe <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e000      	b.n	8006c00 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d034      	beq.n	8006c6e <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	3304      	adds	r3, #4
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fe fad9 	bl	80051c0 <uxListRemove>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d115      	bne.n	8006c40 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c18:	4918      	ldr	r1, [pc, #96]	; (8006c7c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006c1a:	4613      	mov	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	4413      	add	r3, r2
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	440b      	add	r3, r1
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <vTaskPriorityDisinheritAfterTimeout+0x100>
 8006c2a:	69bb      	ldr	r3, [r7, #24]
 8006c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c2e:	2201      	movs	r2, #1
 8006c30:	fa02 f303 	lsl.w	r3, r2, r3
 8006c34:	43da      	mvns	r2, r3
 8006c36:	4b12      	ldr	r3, [pc, #72]	; (8006c80 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	4a10      	ldr	r2, [pc, #64]	; (8006c80 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8006c3e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c44:	2201      	movs	r2, #1
 8006c46:	409a      	lsls	r2, r3
 8006c48:	4b0d      	ldr	r3, [pc, #52]	; (8006c80 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	4a0c      	ldr	r2, [pc, #48]	; (8006c80 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8006c50:	6013      	str	r3, [r2, #0]
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c56:	4613      	mov	r3, r2
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8006c60:	441a      	add	r2, r3
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	3304      	adds	r3, #4
 8006c66:	4619      	mov	r1, r3
 8006c68:	4610      	mov	r0, r2
 8006c6a:	f7fe fa4c 	bl	8005106 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c6e:	bf00      	nop
 8006c70:	3720      	adds	r7, #32
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200002a4 	.word	0x200002a4
 8006c7c:	200002a8 	.word	0x200002a8
 8006c80:	200003ac 	.word	0x200003ac

08006c84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c88:	4b07      	ldr	r3, [pc, #28]	; (8006ca8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d004      	beq.n	8006c9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c96:	3201      	adds	r2, #1
 8006c98:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006c9a:	4b03      	ldr	r3, [pc, #12]	; (8006ca8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
	}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	200002a4 	.word	0x200002a4

08006cac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006cb6:	4b29      	ldr	r3, [pc, #164]	; (8006d5c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cbc:	4b28      	ldr	r3, [pc, #160]	; (8006d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fa7c 	bl	80051c0 <uxListRemove>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d10b      	bne.n	8006ce6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006cce:	4b24      	ldr	r3, [pc, #144]	; (8006d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cda:	43da      	mvns	r2, r3
 8006cdc:	4b21      	ldr	r3, [pc, #132]	; (8006d64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	4a20      	ldr	r2, [pc, #128]	; (8006d64 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006ce4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cec:	d10a      	bne.n	8006d04 <prvAddCurrentTaskToDelayedList+0x58>
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d007      	beq.n	8006d04 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cf4:	4b1a      	ldr	r3, [pc, #104]	; (8006d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	4619      	mov	r1, r3
 8006cfc:	481a      	ldr	r0, [pc, #104]	; (8006d68 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006cfe:	f7fe fa02 	bl	8005106 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006d02:	e026      	b.n	8006d52 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4413      	add	r3, r2
 8006d0a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d0c:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d209      	bcs.n	8006d30 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d1c:	4b13      	ldr	r3, [pc, #76]	; (8006d6c <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4b0f      	ldr	r3, [pc, #60]	; (8006d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	3304      	adds	r3, #4
 8006d26:	4619      	mov	r1, r3
 8006d28:	4610      	mov	r0, r2
 8006d2a:	f7fe fa10 	bl	800514e <vListInsert>
}
 8006d2e:	e010      	b.n	8006d52 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d30:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f7fe fa06 	bl	800514e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006d42:	4b0c      	ldr	r3, [pc, #48]	; (8006d74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d202      	bcs.n	8006d52 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006d4c:	4a09      	ldr	r2, [pc, #36]	; (8006d74 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	6013      	str	r3, [r2, #0]
}
 8006d52:	bf00      	nop
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	200003a8 	.word	0x200003a8
 8006d60:	200002a4 	.word	0x200002a4
 8006d64:	200003ac 	.word	0x200003ac
 8006d68:	20000390 	.word	0x20000390
 8006d6c:	20000360 	.word	0x20000360
 8006d70:	2000035c 	.word	0x2000035c
 8006d74:	200003c4 	.word	0x200003c4

08006d78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3b04      	subs	r3, #4
 8006d88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3b04      	subs	r3, #4
 8006d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f023 0201 	bic.w	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3b04      	subs	r3, #4
 8006da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006da8:	4a0c      	ldr	r2, [pc, #48]	; (8006ddc <pxPortInitialiseStack+0x64>)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3b14      	subs	r3, #20
 8006db2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3b04      	subs	r3, #4
 8006dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f06f 0202 	mvn.w	r2, #2
 8006dc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3b20      	subs	r3, #32
 8006dcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dce:	68fb      	ldr	r3, [r7, #12]
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	08006de1 	.word	0x08006de1

08006de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006dea:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <prvTaskExitError+0x58>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d00b      	beq.n	8006e0c <prvTaskExitError+0x2c>
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	b672      	cpsid	i
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	b662      	cpsie	i
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	e7fe      	b.n	8006e0a <prvTaskExitError+0x2a>
 8006e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e10:	b672      	cpsid	i
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	b662      	cpsie	i
 8006e20:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e22:	bf00      	nop
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d0fc      	beq.n	8006e24 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e2a:	bf00      	nop
 8006e2c:	3714      	adds	r7, #20
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20000008 	.word	0x20000008
 8006e3c:	00000000 	.word	0x00000000

08006e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <pxCurrentTCBConst2>)
 8006e42:	6819      	ldr	r1, [r3, #0]
 8006e44:	6808      	ldr	r0, [r1, #0]
 8006e46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e4a:	f380 8809 	msr	PSP, r0
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	f04f 0000 	mov.w	r0, #0
 8006e56:	f380 8811 	msr	BASEPRI, r0
 8006e5a:	4770      	bx	lr
 8006e5c:	f3af 8000 	nop.w

08006e60 <pxCurrentTCBConst2>:
 8006e60:	200002a4 	.word	0x200002a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop

08006e68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e68:	4808      	ldr	r0, [pc, #32]	; (8006e8c <prvPortStartFirstTask+0x24>)
 8006e6a:	6800      	ldr	r0, [r0, #0]
 8006e6c:	6800      	ldr	r0, [r0, #0]
 8006e6e:	f380 8808 	msr	MSP, r0
 8006e72:	f04f 0000 	mov.w	r0, #0
 8006e76:	f380 8814 	msr	CONTROL, r0
 8006e7a:	b662      	cpsie	i
 8006e7c:	b661      	cpsie	f
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	df00      	svc	0
 8006e88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e8a:	bf00      	nop
 8006e8c:	e000ed08 	.word	0xe000ed08

08006e90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e96:	4b36      	ldr	r3, [pc, #216]	; (8006f70 <xPortStartScheduler+0xe0>)
 8006e98:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	22ff      	movs	r2, #255	; 0xff
 8006ea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006eb8:	b2da      	uxtb	r2, r3
 8006eba:	4b2e      	ldr	r3, [pc, #184]	; (8006f74 <xPortStartScheduler+0xe4>)
 8006ebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ebe:	4b2e      	ldr	r3, [pc, #184]	; (8006f78 <xPortStartScheduler+0xe8>)
 8006ec0:	2207      	movs	r2, #7
 8006ec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ec4:	e009      	b.n	8006eda <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006ec6:	4b2c      	ldr	r3, [pc, #176]	; (8006f78 <xPortStartScheduler+0xe8>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	4a2a      	ldr	r2, [pc, #168]	; (8006f78 <xPortStartScheduler+0xe8>)
 8006ece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eda:	78fb      	ldrb	r3, [r7, #3]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b80      	cmp	r3, #128	; 0x80
 8006ee4:	d0ef      	beq.n	8006ec6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ee6:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <xPortStartScheduler+0xe8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f1c3 0307 	rsb	r3, r3, #7
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d00b      	beq.n	8006f0a <xPortStartScheduler+0x7a>
 8006ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef6:	b672      	cpsid	i
 8006ef8:	f383 8811 	msr	BASEPRI, r3
 8006efc:	f3bf 8f6f 	isb	sy
 8006f00:	f3bf 8f4f 	dsb	sy
 8006f04:	b662      	cpsie	i
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	e7fe      	b.n	8006f08 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f0a:	4b1b      	ldr	r3, [pc, #108]	; (8006f78 <xPortStartScheduler+0xe8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <xPortStartScheduler+0xe8>)
 8006f12:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f14:	4b18      	ldr	r3, [pc, #96]	; (8006f78 <xPortStartScheduler+0xe8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f1c:	4a16      	ldr	r2, [pc, #88]	; (8006f78 <xPortStartScheduler+0xe8>)
 8006f1e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	b2da      	uxtb	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f28:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <xPortStartScheduler+0xec>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a13      	ldr	r2, [pc, #76]	; (8006f7c <xPortStartScheduler+0xec>)
 8006f2e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f32:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f34:	4b11      	ldr	r3, [pc, #68]	; (8006f7c <xPortStartScheduler+0xec>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a10      	ldr	r2, [pc, #64]	; (8006f7c <xPortStartScheduler+0xec>)
 8006f3a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f3e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f40:	f000 f8d4 	bl	80070ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f44:	4b0e      	ldr	r3, [pc, #56]	; (8006f80 <xPortStartScheduler+0xf0>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f4a:	f000 f8f3 	bl	8007134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f4e:	4b0d      	ldr	r3, [pc, #52]	; (8006f84 <xPortStartScheduler+0xf4>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a0c      	ldr	r2, [pc, #48]	; (8006f84 <xPortStartScheduler+0xf4>)
 8006f54:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f58:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f5a:	f7ff ff85 	bl	8006e68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f5e:	f7ff fa7d 	bl	800645c <vTaskSwitchContext>
	prvTaskExitError();
 8006f62:	f7ff ff3d 	bl	8006de0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	e000e400 	.word	0xe000e400
 8006f74:	200003d0 	.word	0x200003d0
 8006f78:	200003d4 	.word	0x200003d4
 8006f7c:	e000ed20 	.word	0xe000ed20
 8006f80:	20000008 	.word	0x20000008
 8006f84:	e000ef34 	.word	0xe000ef34

08006f88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f92:	b672      	cpsid	i
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	b662      	cpsie	i
 8006fa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <vPortEnterCritical+0x5c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	3301      	adds	r3, #1
 8006faa:	4a0e      	ldr	r2, [pc, #56]	; (8006fe4 <vPortEnterCritical+0x5c>)
 8006fac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006fae:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <vPortEnterCritical+0x5c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d110      	bne.n	8006fd8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006fb6:	4b0c      	ldr	r3, [pc, #48]	; (8006fe8 <vPortEnterCritical+0x60>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00b      	beq.n	8006fd8 <vPortEnterCritical+0x50>
 8006fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc4:	b672      	cpsid	i
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	b662      	cpsie	i
 8006fd4:	603b      	str	r3, [r7, #0]
 8006fd6:	e7fe      	b.n	8006fd6 <vPortEnterCritical+0x4e>
	}
}
 8006fd8:	bf00      	nop
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	20000008 	.word	0x20000008
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <vPortExitCritical+0x50>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10b      	bne.n	8007012 <vPortExitCritical+0x26>
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	b672      	cpsid	i
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	b662      	cpsie	i
 800700e:	607b      	str	r3, [r7, #4]
 8007010:	e7fe      	b.n	8007010 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8007012:	4b0a      	ldr	r3, [pc, #40]	; (800703c <vPortExitCritical+0x50>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3b01      	subs	r3, #1
 8007018:	4a08      	ldr	r2, [pc, #32]	; (800703c <vPortExitCritical+0x50>)
 800701a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800701c:	4b07      	ldr	r3, [pc, #28]	; (800703c <vPortExitCritical+0x50>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d104      	bne.n	800702e <vPortExitCritical+0x42>
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000008 	.word	0x20000008

08007040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007040:	f3ef 8009 	mrs	r0, PSP
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	4b15      	ldr	r3, [pc, #84]	; (80070a0 <pxCurrentTCBConst>)
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	f01e 0f10 	tst.w	lr, #16
 8007050:	bf08      	it	eq
 8007052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800705a:	6010      	str	r0, [r2, #0]
 800705c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007064:	b672      	cpsid	i
 8007066:	f380 8811 	msr	BASEPRI, r0
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	b662      	cpsie	i
 8007074:	f7ff f9f2 	bl	800645c <vTaskSwitchContext>
 8007078:	f04f 0000 	mov.w	r0, #0
 800707c:	f380 8811 	msr	BASEPRI, r0
 8007080:	bc09      	pop	{r0, r3}
 8007082:	6819      	ldr	r1, [r3, #0]
 8007084:	6808      	ldr	r0, [r1, #0]
 8007086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708a:	f01e 0f10 	tst.w	lr, #16
 800708e:	bf08      	it	eq
 8007090:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007094:	f380 8809 	msr	PSP, r0
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop

080070a0 <pxCurrentTCBConst>:
 80070a0:	200002a4 	.word	0x200002a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop

080070a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	b672      	cpsid	i
 80070b4:	f383 8811 	msr	BASEPRI, r3
 80070b8:	f3bf 8f6f 	isb	sy
 80070bc:	f3bf 8f4f 	dsb	sy
 80070c0:	b662      	cpsie	i
 80070c2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070c4:	f7ff f90c 	bl	80062e0 <xTaskIncrementTick>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070ce:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <SysTick_Handler+0x40>)
 80070d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	2300      	movs	r3, #0
 80070d8:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80070e0:	bf00      	nop
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070f0:	4b0b      	ldr	r3, [pc, #44]	; (8007120 <vPortSetupTimerInterrupt+0x34>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070f6:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <vPortSetupTimerInterrupt+0x38>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070fc:	4b0a      	ldr	r3, [pc, #40]	; (8007128 <vPortSetupTimerInterrupt+0x3c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a0a      	ldr	r2, [pc, #40]	; (800712c <vPortSetupTimerInterrupt+0x40>)
 8007102:	fba2 2303 	umull	r2, r3, r2, r3
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	4a09      	ldr	r2, [pc, #36]	; (8007130 <vPortSetupTimerInterrupt+0x44>)
 800710a:	3b01      	subs	r3, #1
 800710c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800710e:	4b04      	ldr	r3, [pc, #16]	; (8007120 <vPortSetupTimerInterrupt+0x34>)
 8007110:	2207      	movs	r2, #7
 8007112:	601a      	str	r2, [r3, #0]
}
 8007114:	bf00      	nop
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	e000e010 	.word	0xe000e010
 8007124:	e000e018 	.word	0xe000e018
 8007128:	20000000 	.word	0x20000000
 800712c:	10624dd3 	.word	0x10624dd3
 8007130:	e000e014 	.word	0xe000e014

08007134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007144 <vPortEnableVFP+0x10>
 8007138:	6801      	ldr	r1, [r0, #0]
 800713a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800713e:	6001      	str	r1, [r0, #0]
 8007140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007142:	bf00      	nop
 8007144:	e000ed88 	.word	0xe000ed88

08007148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007148:	b480      	push	{r7}
 800714a:	b085      	sub	sp, #20
 800714c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800714e:	f3ef 8305 	mrs	r3, IPSR
 8007152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b0f      	cmp	r3, #15
 8007158:	d915      	bls.n	8007186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800715a:	4a18      	ldr	r2, [pc, #96]	; (80071bc <vPortValidateInterruptPriority+0x74>)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007164:	4b16      	ldr	r3, [pc, #88]	; (80071c0 <vPortValidateInterruptPriority+0x78>)
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	7afa      	ldrb	r2, [r7, #11]
 800716a:	429a      	cmp	r2, r3
 800716c:	d20b      	bcs.n	8007186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800716e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007172:	b672      	cpsid	i
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	b662      	cpsie	i
 8007182:	607b      	str	r3, [r7, #4]
 8007184:	e7fe      	b.n	8007184 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007186:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <vPortValidateInterruptPriority+0x7c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800718e:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <vPortValidateInterruptPriority+0x80>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	429a      	cmp	r2, r3
 8007194:	d90b      	bls.n	80071ae <vPortValidateInterruptPriority+0x66>
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	b672      	cpsid	i
 800719c:	f383 8811 	msr	BASEPRI, r3
 80071a0:	f3bf 8f6f 	isb	sy
 80071a4:	f3bf 8f4f 	dsb	sy
 80071a8:	b662      	cpsie	i
 80071aa:	603b      	str	r3, [r7, #0]
 80071ac:	e7fe      	b.n	80071ac <vPortValidateInterruptPriority+0x64>
	}
 80071ae:	bf00      	nop
 80071b0:	3714      	adds	r7, #20
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	e000e3f0 	.word	0xe000e3f0
 80071c0:	200003d0 	.word	0x200003d0
 80071c4:	e000ed0c 	.word	0xe000ed0c
 80071c8:	200003d4 	.word	0x200003d4

080071cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b08a      	sub	sp, #40	; 0x28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071d8:	f7fe ffd6 	bl	8006188 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071dc:	4b5a      	ldr	r3, [pc, #360]	; (8007348 <pvPortMalloc+0x17c>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071e4:	f000 f916 	bl	8007414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071e8:	4b58      	ldr	r3, [pc, #352]	; (800734c <pvPortMalloc+0x180>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	4013      	ands	r3, r2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f040 8090 	bne.w	8007316 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01e      	beq.n	800723a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80071fc:	2208      	movs	r2, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4413      	add	r3, r2
 8007202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f003 0307 	and.w	r3, r3, #7
 800720a:	2b00      	cmp	r3, #0
 800720c:	d015      	beq.n	800723a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f023 0307 	bic.w	r3, r3, #7
 8007214:	3308      	adds	r3, #8
 8007216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00b      	beq.n	800723a <pvPortMalloc+0x6e>
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	b672      	cpsid	i
 8007228:	f383 8811 	msr	BASEPRI, r3
 800722c:	f3bf 8f6f 	isb	sy
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	b662      	cpsie	i
 8007236:	617b      	str	r3, [r7, #20]
 8007238:	e7fe      	b.n	8007238 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d06a      	beq.n	8007316 <pvPortMalloc+0x14a>
 8007240:	4b43      	ldr	r3, [pc, #268]	; (8007350 <pvPortMalloc+0x184>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	429a      	cmp	r2, r3
 8007248:	d865      	bhi.n	8007316 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800724a:	4b42      	ldr	r3, [pc, #264]	; (8007354 <pvPortMalloc+0x188>)
 800724c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800724e:	4b41      	ldr	r3, [pc, #260]	; (8007354 <pvPortMalloc+0x188>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007254:	e004      	b.n	8007260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	429a      	cmp	r2, r3
 8007268:	d903      	bls.n	8007272 <pvPortMalloc+0xa6>
 800726a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1f1      	bne.n	8007256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007272:	4b35      	ldr	r3, [pc, #212]	; (8007348 <pvPortMalloc+0x17c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007278:	429a      	cmp	r2, r3
 800727a:	d04c      	beq.n	8007316 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800727c:	6a3b      	ldr	r3, [r7, #32]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2208      	movs	r2, #8
 8007282:	4413      	add	r3, r2
 8007284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800728e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	1ad2      	subs	r2, r2, r3
 8007296:	2308      	movs	r3, #8
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	429a      	cmp	r2, r3
 800729c:	d920      	bls.n	80072e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800729e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	f003 0307 	and.w	r3, r3, #7
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <pvPortMalloc+0xfc>
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	b672      	cpsid	i
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	b662      	cpsie	i
 80072c4:	613b      	str	r3, [r7, #16]
 80072c6:	e7fe      	b.n	80072c6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	685a      	ldr	r2, [r3, #4]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072da:	69b8      	ldr	r0, [r7, #24]
 80072dc:	f000 f8fc 	bl	80074d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072e0:	4b1b      	ldr	r3, [pc, #108]	; (8007350 <pvPortMalloc+0x184>)
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	4a19      	ldr	r2, [pc, #100]	; (8007350 <pvPortMalloc+0x184>)
 80072ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072ee:	4b18      	ldr	r3, [pc, #96]	; (8007350 <pvPortMalloc+0x184>)
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b19      	ldr	r3, [pc, #100]	; (8007358 <pvPortMalloc+0x18c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d203      	bcs.n	8007302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072fa:	4b15      	ldr	r3, [pc, #84]	; (8007350 <pvPortMalloc+0x184>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a16      	ldr	r2, [pc, #88]	; (8007358 <pvPortMalloc+0x18c>)
 8007300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <pvPortMalloc+0x180>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	431a      	orrs	r2, r3
 800730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007316:	f7fe ff45 	bl	80061a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00b      	beq.n	800733c <pvPortMalloc+0x170>
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	b672      	cpsid	i
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	b662      	cpsie	i
 8007338:	60fb      	str	r3, [r7, #12]
 800733a:	e7fe      	b.n	800733a <pvPortMalloc+0x16e>
	return pvReturn;
 800733c:	69fb      	ldr	r3, [r7, #28]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3728      	adds	r7, #40	; 0x28
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	20003fe0 	.word	0x20003fe0
 800734c:	20003fec 	.word	0x20003fec
 8007350:	20003fe4 	.word	0x20003fe4
 8007354:	20003fd8 	.word	0x20003fd8
 8007358:	20003fe8 	.word	0x20003fe8

0800735c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d04a      	beq.n	8007404 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800736e:	2308      	movs	r3, #8
 8007370:	425b      	negs	r3, r3
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4413      	add	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	4b22      	ldr	r3, [pc, #136]	; (800740c <vPortFree+0xb0>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4013      	ands	r3, r2
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10b      	bne.n	80073a2 <vPortFree+0x46>
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	b672      	cpsid	i
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	b662      	cpsie	i
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	e7fe      	b.n	80073a0 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00b      	beq.n	80073c2 <vPortFree+0x66>
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	b672      	cpsid	i
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	b662      	cpsie	i
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	e7fe      	b.n	80073c0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	685a      	ldr	r2, [r3, #4]
 80073c6:	4b11      	ldr	r3, [pc, #68]	; (800740c <vPortFree+0xb0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4013      	ands	r3, r2
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d019      	beq.n	8007404 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d115      	bne.n	8007404 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	4b0b      	ldr	r3, [pc, #44]	; (800740c <vPortFree+0xb0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	43db      	mvns	r3, r3
 80073e2:	401a      	ands	r2, r3
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073e8:	f7fe fece 	bl	8006188 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	4b07      	ldr	r3, [pc, #28]	; (8007410 <vPortFree+0xb4>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4413      	add	r3, r2
 80073f6:	4a06      	ldr	r2, [pc, #24]	; (8007410 <vPortFree+0xb4>)
 80073f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073fa:	6938      	ldr	r0, [r7, #16]
 80073fc:	f000 f86c 	bl	80074d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007400:	f7fe fed0 	bl	80061a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007404:	bf00      	nop
 8007406:	3718      	adds	r7, #24
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	20003fec 	.word	0x20003fec
 8007410:	20003fe4 	.word	0x20003fe4

08007414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800741a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800741e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007420:	4b27      	ldr	r3, [pc, #156]	; (80074c0 <prvHeapInit+0xac>)
 8007422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 0307 	and.w	r3, r3, #7
 800742a:	2b00      	cmp	r3, #0
 800742c:	d00c      	beq.n	8007448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	3307      	adds	r3, #7
 8007432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0307 	bic.w	r3, r3, #7
 800743a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	4a1f      	ldr	r2, [pc, #124]	; (80074c0 <prvHeapInit+0xac>)
 8007444:	4413      	add	r3, r2
 8007446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800744c:	4a1d      	ldr	r2, [pc, #116]	; (80074c4 <prvHeapInit+0xb0>)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007452:	4b1c      	ldr	r3, [pc, #112]	; (80074c4 <prvHeapInit+0xb0>)
 8007454:	2200      	movs	r2, #0
 8007456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68ba      	ldr	r2, [r7, #8]
 800745c:	4413      	add	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007460:	2208      	movs	r2, #8
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f023 0307 	bic.w	r3, r3, #7
 800746e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	4a15      	ldr	r2, [pc, #84]	; (80074c8 <prvHeapInit+0xb4>)
 8007474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <prvHeapInit+0xb4>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2200      	movs	r2, #0
 800747c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800747e:	4b12      	ldr	r3, [pc, #72]	; (80074c8 <prvHeapInit+0xb4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	1ad2      	subs	r2, r2, r3
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007494:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <prvHeapInit+0xb4>)
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <prvHeapInit+0xb8>)
 80074a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	4a09      	ldr	r2, [pc, #36]	; (80074d0 <prvHeapInit+0xbc>)
 80074aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80074ac:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <prvHeapInit+0xc0>)
 80074ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074b2:	601a      	str	r2, [r3, #0]
}
 80074b4:	bf00      	nop
 80074b6:	3714      	adds	r7, #20
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr
 80074c0:	200003d8 	.word	0x200003d8
 80074c4:	20003fd8 	.word	0x20003fd8
 80074c8:	20003fe0 	.word	0x20003fe0
 80074cc:	20003fe8 	.word	0x20003fe8
 80074d0:	20003fe4 	.word	0x20003fe4
 80074d4:	20003fec 	.word	0x20003fec

080074d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074e0:	4b28      	ldr	r3, [pc, #160]	; (8007584 <prvInsertBlockIntoFreeList+0xac>)
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e002      	b.n	80074ec <prvInsertBlockIntoFreeList+0x14>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60fb      	str	r3, [r7, #12]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d8f7      	bhi.n	80074e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	4413      	add	r3, r2
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	d108      	bne.n	800751a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	685a      	ldr	r2, [r3, #4]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	441a      	add	r2, r3
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	441a      	add	r2, r3
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d118      	bne.n	8007560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	4b15      	ldr	r3, [pc, #84]	; (8007588 <prvInsertBlockIntoFreeList+0xb0>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	429a      	cmp	r2, r3
 8007538:	d00d      	beq.n	8007556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	685a      	ldr	r2, [r3, #4]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	441a      	add	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	601a      	str	r2, [r3, #0]
 8007554:	e008      	b.n	8007568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007556:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <prvInsertBlockIntoFreeList+0xb0>)
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	601a      	str	r2, [r3, #0]
 800755e:	e003      	b.n	8007568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	d002      	beq.n	8007576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007576:	bf00      	nop
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop
 8007584:	20003fd8 	.word	0x20003fd8
 8007588:	20003fe0 	.word	0x20003fe0

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4e0d      	ldr	r6, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1ba4      	subs	r4, r4, r6
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2500      	movs	r5, #0
 8007598:	42a5      	cmp	r5, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4e0b      	ldr	r6, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f000 f82c 	bl	80075fc <_init>
 80075a4:	1ba4      	subs	r4, r4, r6
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2500      	movs	r5, #0
 80075aa:	42a5      	cmp	r5, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075b4:	4798      	blx	r3
 80075b6:	3501      	adds	r5, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80075be:	4798      	blx	r3
 80075c0:	3501      	adds	r5, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	080076d4 	.word	0x080076d4
 80075c8:	080076d4 	.word	0x080076d4
 80075cc:	080076d4 	.word	0x080076d4
 80075d0:	080076d8 	.word	0x080076d8

080075d4 <memcpy>:
 80075d4:	b510      	push	{r4, lr}
 80075d6:	1e43      	subs	r3, r0, #1
 80075d8:	440a      	add	r2, r1
 80075da:	4291      	cmp	r1, r2
 80075dc:	d100      	bne.n	80075e0 <memcpy+0xc>
 80075de:	bd10      	pop	{r4, pc}
 80075e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e8:	e7f7      	b.n	80075da <memcpy+0x6>

080075ea <memset>:
 80075ea:	4402      	add	r2, r0
 80075ec:	4603      	mov	r3, r0
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d100      	bne.n	80075f4 <memset+0xa>
 80075f2:	4770      	bx	lr
 80075f4:	f803 1b01 	strb.w	r1, [r3], #1
 80075f8:	e7f9      	b.n	80075ee <memset+0x4>
	...

080075fc <_init>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr

08007608 <_fini>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr
